<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/09/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2021/08/09/%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote><p>作用域一般指某个函数，变量声明时能够访问的位置权限来决定的。作用域范围而就由此决定。<br>作用域的目的，提高了程序的可靠性，减少了命名的冲突  </p></blockquote><h3 id="全局作用域-局部作用域"><a href="#全局作用域-局部作用域" class="headerlink" title="全局作用域/局部作用域"></a>全局作用域/局部作用域</h3><blockquote><p>全局作用域： 直接写在js 标签的声明 就是在全局作用域里面，js全局作用域中有一个全局对象 windeow,在这里创建声明的都会作为window对象的属性进行保存<br>局部作用域： 在词法作用域内部的就是局部作用域，只在当前的载体内起作用，每次调用创建局部作用域，执行完销毁，相互独立</p></blockquote><p>以下这种，在局部声明的方式，也是全局变量。这种隐式声明不推荐。 （严格模式下会报错）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nu</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;</span><br><span class="javascript">        v = <span class="hljs-number">20</span>;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(a);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    nu();</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(b);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><blockquote><p>使用 var 与function声明的变量、函数 会在所有的代码前进行一次预编译效果，也就是变量提升 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//undefined   预编译 ==&gt;  var a</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>                               <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//undefined</span><br>                                         a= <span class="hljs-number">10</span><br><br>coun()                               <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">coun</span> (<span class="hljs-params"></span>)</span>&#123;  <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">coun</span> (<span class="hljs-params"></span>)</span>&#123;            预编译 ==&gt;       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>) <br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>)                    &#125;<br>&#125;      coun()<br>  <br><span class="hljs-string">``</span><span class="hljs-string">`  </span><br><span class="hljs-string">但注意函数式方式不会具有变量提升</span><br></code></pre></td></tr></table></figure><p>coun()   //这种方式报错<br>var coun = function(){<br>    console.log(‘hi’)<br>}</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br><br>### 局部作用域<br><br> #### 函数作用域<br>   <br></code></pre></td></tr></table></figure><p>  function foo(a) {<br>   var b = 2;<br>   // 一些代码<br>   function bar() {<br>   // …<br>   }<br>  22<br>   // 更多的代码<br>   var c = 3;<br>  }</p><p>  ```<br>  每个函数自身都会具有创建一个作用域，foo()可以在全局中获取到，而foo中的a,b,c 只能在foo中获取  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>作用域</title>
    <link href="/2021/08/09/08-09%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2021/08/09/08-09%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote><p>作用域一般指某个函数，变量声明时能够访问的位置权限来决定的。作用域范围而就由此决定。<br>作用域的目的，提高了程序的可靠性，减少了命名的冲突</p></blockquote><h3 id="全局作用域-局部作用域"><a href="#全局作用域-局部作用域" class="headerlink" title="全局作用域/局部作用域"></a>全局作用域/局部作用域</h3><blockquote><p>全局作用域： 直接写在 js 标签的声明 就是在全局作用域里面，js 全局作用域中有一个全局对象 windeow,在这里创建声明的都会作为 window 对象的属性进行保存<br>局部作用域： 在词法作用域内部的就是局部作用域，只在当前的载体内起作用，每次调用创建局部作用域，执行完销毁，相互独立</p></blockquote><p>以下这种，在局部声明的方式，也是全局变量。这种隐式声明不推荐。 （严格模式下会报错）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nu</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;</span><br><span class="javascript">        v = <span class="hljs-number">20</span>;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(a);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    nu();</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(b);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><blockquote><p>使用 var 与 function 声明的变量、函数 会在所有的代码前进行一次预编译效果，也就是变量提升</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//undefined   预编译 ==&gt;  var a</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>                               <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//undefined</span><br>                                         a= <span class="hljs-number">10</span><br><br>coun()                               <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">coun</span> (<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">coun</span> (<span class="hljs-params"></span>)</span>&#123;            预编译 ==&gt;       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>)                    &#125;<br>&#125;      coun()<br><br></code></pre></td></tr></table></figure><p>但注意函数式方式不会具有变量提升</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">coun</span><span class="hljs-params">()</span></span>   <span class="hljs-comment">//这种方式报错</span><br><span class="hljs-selector-tag">var</span> coun = function()&#123;<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">(a)</span> </span>&#123;<br> <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br> <span class="hljs-comment">// 一些代码</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span> </span>&#123;<br> <span class="hljs-comment">// ...</span><br> &#125;<br><span class="hljs-number">22</span><br> <span class="hljs-comment">// 更多的代码</span><br> <span class="hljs-keyword">var</span> c = <span class="hljs-number">3</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>每个函数自身都会具有创建一个作用域，foo()可以在全局中获取到，而 foo 中的 a,b,c 只能在 foo 中获取</p><h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><p>首先 javaScript 本身并没有定义块级作用域说法，但是却时存在这一现象。例如：for 循环中的 变量定义声明、with、 try/catch、中的 catch 失败时的调用、 let const</p><p><img src="/img/1.jpg" alt="BG图片"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v-if 和 v-show</title>
    <link href="/2021/08/05/08-05ifshow/"/>
    <url>/2021/08/05/08-05ifshow/</url>
    
    <content type="html"><![CDATA[<h3 id="相同点-不同点"><a href="#相同点-不同点" class="headerlink" title="相同点/不同点"></a>相同点/不同点</h3><ul><li>  相同点：相同使用方式，值为 true 时，满足条件元素显示，反则不显示。</li><li>  不同点：1. v-if 根据值在 DOM 中生成或移除一个元素。v-show 根据值来显示或者隐藏 HTML 元素。当 v-show 赋值为 false 时，元素被隐藏，此时查看代码时，该元素上会多一个内联样式 style=“display:none” 2.渲染元素的开销不同，v-if 有更高的切换消耗，而 v-show 初始渲染消耗较高。频繁切换，则使用 v-show 更好。</li></ul><p><img src="/img/1.jpg" alt="BG图片"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.set()</title>
    <link href="/2021/08/01/08-01Vue%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    <url>/2021/08/01/08-01Vue%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>由于 JavaScript 的限制，Vue 不能检测数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。<br>首先 Vue 中已经封装了一些数组的封装方法 例如：push() pop() shift() unshift() splice() sort() reverse() 这些事 都可以处理一些响应式数据。<br>但一些无法检测到 property()<br><a href="https://cn.vuejs.org/v2/api/#Vue-set">Vue.set()</a> Api 可以解决这一现象</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p><code>Vue.set( target, key, value )</code></p><ul><li>  target Arr||Obj (修改的对象)</li><li>  key/index string || number（修改的具体数据 key 值。）</li><li>  value : any（要修改的结果）</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app2&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="xml">        </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.message</span>&#125;&#125;</span><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btn2Click()&quot;</span>&gt;</span>动态赋值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btn3Click()&quot;</span>&gt;</span>为data新增属性<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../dist/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">items</span>:[</span></span><br><span class="javascript"><span class="xml">            &#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&quot;Test one&quot;</span>,<span class="hljs-attr">id</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;,</span></span><br><span class="javascript"><span class="xml">            &#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&quot;Test two&quot;</span>,<span class="hljs-attr">id</span>:<span class="hljs-string">&quot;2&quot;</span>&#125;,</span></span><br><span class="javascript"><span class="xml">            &#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&quot;Test three&quot;</span>,<span class="hljs-attr">id</span>:<span class="hljs-string">&quot;3&quot;</span>&#125;</span></span><br><span class="javascript"><span class="xml">        ]</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">btn2Click</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">            Vue.set(<span class="hljs-built_in">this</span>.items,<span class="hljs-number">0</span>,&#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&quot;Change Test&quot;</span>,<span class="hljs-attr">id</span>:<span class="hljs-built_in">this</span>.items.length + <span class="hljs-number">1</span>&#125;)</span></span><br><span class="javascript"><span class="xml">        &#125;,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">btn3Click</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-keyword">var</span> itemLen=<span class="hljs-built_in">this</span>.items.length;</span></span><br><span class="javascript"><span class="xml">            Vue.set(<span class="hljs-built_in">this</span>.items,itemLen,&#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&quot;Test add attr&quot;</span>,<span class="hljs-attr">id</span>:itemLen&#125;);</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;);</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>有时想向已有对象上添加一些属性，例如使用 Object.assign() 或 _.extend() 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 代替 Object.assign(this.obj, &#123; a: 1, b: 2 &#125;)</span><br><span class="hljs-keyword">this</span>.obj= Object.assign(&#123;&#125;, <span class="hljs-keyword">this</span>.obj, &#123; a: <span class="hljs-number">1</span>, b: <span class="hljs-number">2</span> &#125;)<br></code></pre></td></tr></table></figure><h3 id="set-源码"><a href="#set-源码" class="headerlink" title="set 源码"></a>set 源码</h3><p><img src="/img/1.jpg" alt="BG图片"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态组件/异步组件</title>
    <link href="/2021/07/31/07-31%E5%8A%A8%E6%80%81%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6/"/>
    <url>/2021/07/31/07-31%E5%8A%A8%E6%80%81%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>一个多标签的界面中使用 is 来切换不同的组件,并可参考<a href="https://cn.vuejs.org/v2/api/#keep-alive">keep-alive 组件</a>将动态组件状态储存起来</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs elixir">component <span class="hljs-symbol">:is=<span class="hljs-string">&quot;nextName&quot;</span>&gt;&lt;/component&gt;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">next</span> from <span class="hljs-string">&#x27;./next&#x27;</span><br>export default &#123;<br>  <span class="hljs-symbol">components:</span>&#123;<br>    <span class="hljs-keyword">next</span>,<br>  &#125;,<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-symbol">nextName:</span><span class="hljs-string">&quot;next&quot;</span><br>    &#125;;<br>  &#125;,<br><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="切换不同的页面"><a href="#切换不同的页面" class="headerlink" title="切换不同的页面"></a>切换不同的页面</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs axapta">&lt;<span class="hljs-keyword">div</span> id=<span class="hljs-string">&quot;example&quot;</span>&gt;<br>  &lt;button @click=<span class="hljs-string">&quot;change&quot;</span>&gt;切换页面&lt;/button&gt;<br>  &lt;component :<span class="hljs-keyword">is</span>=<span class="hljs-string">&quot;currentView&quot;</span>&gt;&lt;/component&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#example&#x27;</span>,<br>  data:&#123;<br>    <span class="hljs-keyword">index</span>:<span class="hljs-number">0</span>,<br>    arr:[<br>      &#123;template:`&lt;<span class="hljs-keyword">div</span>&gt;我是页面A&lt;/<span class="hljs-keyword">div</span>&gt;`&#125;,<br>      &#123;template:`&lt;<span class="hljs-keyword">div</span>&gt;我是页面B&lt;/<span class="hljs-keyword">div</span>&gt;`&#125;,<br>      &#123;template:`&lt;<span class="hljs-keyword">div</span>&gt;我是页面C&lt;/<span class="hljs-keyword">div</span>&gt;`&#125;<br>    ],<br>  &#125;,<br>  computed:&#123;<br>    currentView()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.arr[<span class="hljs-keyword">this</span>.<span class="hljs-keyword">index</span>];<br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    change()&#123;<br>      <span class="hljs-keyword">this</span>.<span class="hljs-keyword">index</span> = (++<span class="hljs-keyword">this</span>.<span class="hljs-keyword">index</span>)%<span class="hljs-number">3</span>;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p>异步组件就是定义的时候不做渲染运算，只在组件需要渲染（组件第一次显示）的时候进行加载渲染并缓存，缓存是以备下次访问。</p><h4 id="Vue-实现按需加载"><a href="#Vue-实现按需加载" class="headerlink" title="Vue 实现按需加载"></a>Vue 实现按需加载</h4><p>import() 函数 按需加载，异步加载大组件</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>&lt;FromDemo v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;show&quot;</span>/&gt;<br>&lt;button @click=<span class="hljs-string">&quot;show=true&quot;</span>&gt;&lt;/button&gt;<br><br><br>components:&#123;<br>  FromDemo:<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../FromDemo&#x27;</span>)<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="/img/1.jpg" alt="BG图片"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue插槽</title>
    <link href="/2021/07/30/07-30Vue%E6%8F%92%E6%A7%BD/"/>
    <url>/2021/07/30/07-30Vue%E6%8F%92%E6%A7%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>插槽就是子组件中的提供给父组件使用的一个占位符，用<code>&lt;slot&gt;&lt;/slot&gt;</code> 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code>标签。插槽使用会给我们带来很多便利。<a href="https://cn.vuejs.org/v2/guide/components-slots.html#%E6%8F%92%E6%A7%BD%E5%86%85%E5%AE%B9">vue 官网插槽</a></p><h2 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h2><h4 id="默认插槽-lt-slot-gt-lt-slot-gt"><a href="#默认插槽-lt-slot-gt-lt-slot-gt" class="headerlink" title="默认插槽 &lt;slot&gt;&lt;/slot&gt;"></a>默认插槽 <code>&lt;slot&gt;&lt;/slot&gt;</code></h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xquery">// 子组件<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>今天天气：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><span class="xml"></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="xquery">&#123;</span><br><span class="xquery">     <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;child&#x27;</span></span><br><span class="xquery">  &#125;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>// 父组件<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>使用slot分发内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">child</span>&gt;</span></span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>小雨，最高气温34度，最低气温28度，微风<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span></span><span class="xml"></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./child.vue&quot;</span>;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="xquery">&#123;</span><br><span class="xquery">     <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;father&#x27;</span>,</span><br><span class="xquery">      components:&#123;</span><br><span class="xquery">          child</span><br><span class="xquery">      &#125;</span><span class="xml"></span><br><span class="xml">  &#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h4 id="具名插槽-lt-slot-name-quot-xxx-quot-gt-lt-slot-gt-v-slot-name-”xxx”"><a href="#具名插槽-lt-slot-name-quot-xxx-quot-gt-lt-slot-gt-v-slot-name-”xxx”" class="headerlink" title="具名插槽 &lt;slot name=&quot;xxx&quot;&gt;&lt;/slot&gt; v-slot:name =”xxx”"></a>具名插槽 <code>&lt;slot name=&quot;xxx&quot;&gt;&lt;/slot&gt;</code> v-slot:name =”xxx”</h4><blockquote><p>子组件定义插槽，名称位置。父组件填充内容, 父组件通过 v-slot:[name] 的方式指定到对应的插槽中.<br>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml">---子组件---<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>今天天气：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;child&quot;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>---父组件---<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>slot内容分发<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">child</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>天气预报<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>小雨，最高气温34度，最低气温28度，微风<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./child.vue&quot;</span>;</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;father1&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="javascript">            child</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>带数据的插槽，作用域插槽绑定了一套数据，父组件可以拿来用。于是，情况就变成了这样：样式父组件说了算，但内容可以显示子组件插槽绑定的。</p><p><img src="/img/1.jpg" alt="BG图片"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue响应数据原理</title>
    <link href="/2021/07/26/07-26Vue%E7%BB%84%E4%BB%B6%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    <url>/2021/07/26/07-26Vue%E7%BB%84%E4%BB%B6%E5%93%8D%E5%BA%94%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="响应式原理（Vue-2x）"><a href="#响应式原理（Vue-2x）" class="headerlink" title="响应式原理（Vue.2x）"></a><a href="https://cn.vuejs.org/v2/guide/reactivity.html">响应式原理（Vue.2x）</a></h2><p>官网上介绍了， Vue2.x 版本数据绑定原理其主要于使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty()</a>的方法，对数据进行了<code>getter/setter</code>数据劫持。</p><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><blockquote><p>Object.defineProperty 需要三个参数（object , propName , descriptor）</p></blockquote><ul><li>  object 对象 =&gt; 添加的对象</li><li>  propName 属性名 =&gt; 要加的属性的名字 【类型：String】</li><li>  descriptor 属性描述 =&gt; 加的这个属性值【类型：Object】</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> message = <span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">data</span> = &#123;&#125;;<br>Object.defineProperty(<span class="hljs-keyword">data</span>, <span class="hljs-string">&#x27;message&#x27;</span>, &#123;<br>   <span class="hljs-keyword">get</span>() &#123;<br>       <span class="hljs-keyword">return</span> message;<br>   &#125;,<br>   <span class="hljs-keyword">set</span>(newVal) &#123;<br>       message = newVal;<br>   &#125;<br>&#125;);<br><span class="hljs-keyword">data</span>.message <span class="hljs-comment">// &#x27;hello world&#x27;</span><br><span class="hljs-keyword">data</span>.message = <span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-comment">// &#x27;test&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Vue-中实现数据劫持过程"><a href="#Vue-中实现数据劫持过程" class="headerlink" title="Vue 中实现数据劫持过程"></a>Vue 中实现数据劫持过程</h2><blockquote><p>经典的例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> data = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;你不知道的VUE&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>,<br>    <span class="hljs-attr">info</span>: &#123;<br>        <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;北京&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">numbers</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observerObject</span>(<span class="hljs-params">target, name, value</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;object&#x27;</span> || <span class="hljs-built_in">Array</span>.isArray(target)) &#123;<br>        observer(value);<br>    &#125;<br>    <span class="hljs-built_in">Object</span>.defineProperty(target, name, &#123;<br>        <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newVal</span>)</span> &#123;<br>            <span class="hljs-keyword">if</span> (newVal !== value) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;object&#x27;</span> || <span class="hljs-built_in">Array</span>.isArray(value)) &#123;<br>                    observer(value);<br>                &#125;<br>                value = newVal;<br>            &#125;<br>            renderView();<br>        &#125;<br>    &#125;);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observer</span>(<span class="hljs-params">target</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target !== <span class="hljs-string">&#x27;object&#x27;</span> || !target) &#123;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target) &#123;<br>        <span class="hljs-keyword">if</span> (target.hasOwnProperty(key)) &#123;<br>            <span class="hljs-keyword">const</span> value = target[key];<br>            observerObject(target, key, value);<br>        &#125;<br>    &#125;<br>&#125;<br>observer(data);<br></code></pre></td></tr></table></figure><p>遍历这个 data 对象，对每一个属性都使用 observerObject 方法进行数据劫持。</p><p>observerObject 主要做的就是使用 Object.defineProperty 去监听传入的属性，如果 target 是一个对象的话，就递归执行 observer，确保 data 中所有的对象中的所以属性都能够被监听到。当我们 set 的时候，去执行 renderView（执行视图渲染相关逻辑）。</p><h3 id="Object-defineProperty-局限性"><a href="#Object-defineProperty-局限性" class="headerlink" title="Object.defineProperty 局限性"></a>Object.defineProperty 局限性</h3><ol><li> 递归遍历所有的对象的属性，这样如果我们数据层级比较深的话，是一件很耗费性能的事情</li><li> 只能应用在对象上，不能用于数组</li><li> 只能够监听定义时的属性，不能监听新加的属性，这也就是为什么在 vue 中要使用 Vue.set/vue.detele</li></ol><h2 id="Proxy-Vue3"><a href="#Proxy-Vue3" class="headerlink" title="Proxy(Vue3)"></a><a href="https://v3.cn.vuejs.org/guide/reactivity.html#proxy-vs-%E5%8E%9F%E5%A7%8B%E6%A0%87%E8%AF%86">Proxy(Vue3)</a></h2><ul><li><p>  使用了 proxy 去实现对象的监听，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p></li><li><p>  Proxy 对拦截操作多达 13 种，所以在这 13 中操作中，我们可以自定义很多逻辑。Proxy 的出现，其实就是为了扩展对象的能力。</p></li></ul><h3 id="proxy-MDN"><a href="#proxy-MDN" class="headerlink" title="proxy MDN"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">proxy MDN</a></h3><p><code>new Proxy(target, handler)</code><br>target: 拦截的目标对象<br>handler：定义拦截的方法</p><ul><li>  handler.apply</li><li>  handler.construct 拦截构造函数调用 new Example（）</li><li>  handler.difineProperty</li><li>  handler.get 拦截对象属性的读取 obj.name</li><li>  handler.set 拦截对象属性的设置 obj.name = ‘前端的自我修养’</li><li>  handler.getOwnPropertyDwscriptor</li><li>  handler.has</li><li>  handler.ownKeys 拦截 Object.keys for in 等</li><li>  handler.setPrototypeOf</li><li>  handler.isExtensible</li><li>  handler.getPropertyOf</li><li>  handler.preventExtensiions</li><li>  handler.enumerate</li></ul><h3 id="Refect"><a href="#Refect" class="headerlink" title="Refect"></a>Refect</h3><ul><li>  将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty），放到 Reflect 对象上。</li><li>  修改某些 Object 方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而 Reflect.defineProperty(obj, name, desc)则会返回 false。</li><li>  让 Object 操作都变成函数行为。比如 name in obj 和 delete obj[name]，而 Reflect.has(obj, name)和 Reflect.deleteProperty(obj, name)让它们变成了函数行为。</li><li>  Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的* Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。</li></ul><h3 id="数据劫持相应"><a href="#数据劫持相应" class="headerlink" title="数据劫持相应"></a>数据劫持相应</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observe</span>(<span class="hljs-params">target</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target !== <span class="hljs-string">&#x27;object&#x27;</span> || target == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br>    <span class="hljs-keyword">const</span> obseved = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, &#123;<br>        <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target, key, receiver</span>)</span> &#123;<br>           <span class="hljs-keyword">return</span> observe(<span class="hljs-built_in">Reflect</span>.get(target, key, receiver);)<br><br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target, key, value, receiver</span>)</span> &#123;<br>            <span class="hljs-keyword">if</span> (value === target[key]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">const</span> ownKeys = <span class="hljs-built_in">Reflect</span>.ownKeys(target);<br>              <span class="hljs-keyword">if</span> (ownKeys.includes(key)) &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;旧属性&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;新添加的属性&#x27;</span>);<br><br>           <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(target, key, value, receiver);<br><br><br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">deleteProperty</span>(<span class="hljs-params">target, key</span>)</span> &#123;<br>           <span class="hljs-keyword">return</span> result  <span class="hljs-built_in">Reflect</span>.deleteProperty(target, key);<br><br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> obseved;<br>&#125;<br><span class="hljs-keyword">const</span> data = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;你不知道的前端&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>,<br>    <span class="hljs-attr">info</span>: &#123;<br>        <span class="hljs-attr">city</span>:<span class="hljs-string">&#x27;beijing&#x27;</span><br>    &#125;，<br>    <span class="hljs-attr">numbers</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>&#125;;<br><span class="hljs-keyword">const</span> proxyData = observe(data<br></code></pre></td></tr></table></figure><h4 id="proxy-在实现数据劫持时，具有以下优点"><a href="#proxy-在实现数据劫持时，具有以下优点" class="headerlink" title="proxy 在实现数据劫持时，具有以下优点"></a>proxy 在实现数据劫持时，具有以下优点</h4><ul><li>  proxy 可以直接监听数组的修改</li><li>  proxy 可以直接监听属性的新增和删除</li><li>  在实现深度监听的时候，只有在 data 对象的属性被访问的时候，才去对这个属性做监听处理，而不是一次性递归所有的。</li></ul><blockquote><p>内容便于自身理解，并非 vue 源码实现<br>部分内容转载于 知乎-<a href="https://zhuanlan.zhihu.com/p/111591503">Vue 如何实现数据劫持</a></p></blockquote><p><img src="/img/1.jpg" alt="BG图片"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue自定义指令学习总结</title>
    <link href="/2021/07/24/07-24Vue%E6%8C%87%E4%BB%A4%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/07/24/07-24Vue%E6%8C%87%E4%BB%A4%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>封装常规业务的自定义指令，理解自定义指令各钩子函数意义。<a href="https://cn.vuejs.org/v2/guide/custom-directive.html">vue 官网-自定义指令</a></p><h2 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h2><ul><li>  <code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，可以定义一个在绑定时执行一次的初始化动作。</li><li>  <code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中)。</li><li>  <code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值。</li><li>  <code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li><li>  <code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li></ul><h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><h3 id="v-copy"><a href="#v-copy" class="headerlink" title="v-copy"></a>v-copy</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> copy = &#123;<br> <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el, &#123; value &#125;</span>)</span> &#123;<br>   el.$value = value<br>   el.handler = <span class="hljs-function">() =&gt;</span> &#123;<br>     <span class="hljs-keyword">if</span> (!el.$value) &#123;<br>       <span class="hljs-comment">// 值为空的时候，给出提示。可根据项目UI仔细设计</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;无复制内容&#x27;</span>)<br>       <span class="hljs-keyword">return</span><br>     &#125;<br>     <span class="hljs-comment">// 动态创建 textarea 标签</span><br>     <span class="hljs-keyword">const</span> textarea = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;textarea&#x27;</span>)<br>     <span class="hljs-comment">// 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span><br>     textarea.readOnly =<span class="hljs-string">&#x27;readonly&#x27;</span><br>     textarea.style.position =<span class="hljs-string">&#x27;absolute&#x27;</span><br>     textarea.style.left =<span class="hljs-string">&#x27;-9999px&#x27;</span><br>     <span class="hljs-comment">// 将要 copy 的值赋给 textarea 标签的 value 属性</span><br>     textarea.value = el.$value<br>     <span class="hljs-comment">// 将 textarea 插入到 body 中</span><br>     <span class="hljs-built_in">document</span>.body.appendChild(textarea)<br>     <span class="hljs-comment">// 选中值并复制</span><br>     textarea.select()<br>     <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">document</span>.execCommand(<span class="hljs-string">&#x27;Copy&#x27;</span>)<br>     <span class="hljs-keyword">if</span> (result) &#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;复制成功&#x27;</span>)<span class="hljs-comment">// 可根据项目UI仔细设计</span><br>     &#125;<br>     <span class="hljs-built_in">document</span>.body.removeChild(textarea)<br>   &#125;<br>   <span class="hljs-comment">// 绑定点击事件，就是所谓的一键 copy 啦</span><br>   el.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, el.handler)<br> &#125;,<br> <span class="hljs-comment">// 当传进来的值更新的时候触发</span><br> <span class="hljs-function"><span class="hljs-title">componentUpdated</span>(<span class="hljs-params">el, &#123; value &#125;</span>)</span> &#123;<br>   el.$value = value<br> &#125;,<br> <span class="hljs-comment">// 指令与元素解绑的时候，移除事件绑定</span><br> <span class="hljs-function"><span class="hljs-title">unbind</span>(<span class="hljs-params">el</span>)</span> &#123;<br>   el.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, el.handler)<br> &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> copy<br><br><span class="hljs-comment">// 使用方式</span><br>&lt;template&gt;<br> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-copy</span>=<span class="hljs-string">&quot;copyText&quot;</span>&gt;</span>复制<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">   <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">     <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">       <span class="hljs-attr">copyText</span>:<span class="hljs-string">&#x27;a copy directives&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">     &#125;</span></span><br><span class="javascript"><span class="xml">   &#125;,</span></span><br><span class="javascript"><span class="xml"> &#125; </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h3 id="v-int（正整数）-v-Float（两位小数）"><a href="#v-int（正整数）-v-Float（两位小数）" class="headerlink" title="v-int（正整数） v-Float（两位小数）"></a>v-int（正整数） v-Float（两位小数）</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br>// 针对 <span class="hljs-keyword">input</span>做的限制，只能输入正整数<br>Vue.directive(<span class="hljs-string">&#x27;Int&#x27;</span>, &#123;<br>    bind: <span class="hljs-keyword">function</span>(el, binding, vnode) &#123;<br>        // 针对 el-<span class="hljs-keyword">input</span>做的限制，只能输入正整数<br>        // <span class="hljs-keyword">if</span> (binding.expression == &quot;el&quot;) &#123;<br>        //   input = el.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">0</span>]<br>        // &#125; <span class="hljs-keyword">else</span> &#123;<br>        //   input = el<br>        // &#125;<br>        const input = el.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">input</span>.onkeyup = <span class="hljs-keyword">function</span>(e) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.length === <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/[^<span class="hljs-number">0</span><span class="hljs-number">-9</span>]/g, <span class="hljs-string">&#x27;&#x27;</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/[^\d]/g, <span class="hljs-string">&#x27;&#x27;</span>)<br>                <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/\b(<span class="hljs-number">0</span>+)/gi, &quot;&quot;)<br>            &#125;<br>            <span class="hljs-keyword">trigger</span>(<span class="hljs-keyword">input</span>, <span class="hljs-string">&#x27;input&#x27;</span>)<br>        &#125;<br>        <span class="hljs-keyword">input</span>.onblur = <span class="hljs-keyword">function</span>(e) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.length === <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/[^<span class="hljs-number">0</span><span class="hljs-number">-9</span>]/g, <span class="hljs-string">&#x27;&#x27;</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/[^\d]/g, <span class="hljs-string">&#x27;&#x27;</span>)<br>                <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/\b(<span class="hljs-number">0</span>+)/gi, &quot;&quot;)<br>            &#125;<br>            <span class="hljs-keyword">trigger</span>(<span class="hljs-keyword">input</span>, <span class="hljs-string">&#x27;input&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br><br>// 针对 <span class="hljs-keyword">input</span>做的限制，能输入<span class="hljs-number">2</span>位小数<br>Vue.directive(<span class="hljs-string">&#x27;Float&#x27;</span>, &#123;<br>    bind: <span class="hljs-keyword">function</span>(el, binding, vnode) &#123;<br>        // let input = undefined<br>        // 针对 el-<span class="hljs-keyword">input</span>做的限制，只能输入正整数<br>        // <span class="hljs-keyword">if</span> (binding.expression == &quot;el&quot;) &#123;<br>        //   input = el.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">0</span>]<br>        // &#125; <span class="hljs-keyword">else</span> &#123;<br>        //   input = el<br>        // &#125;<br>        const input = el.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">input</span>.onkeyup = <span class="hljs-keyword">function</span>(e) &#123;<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/[^\d.]/g, <span class="hljs-string">&#x27;&#x27;</span>);<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/\.&#123;<span class="hljs-number">2</span>,&#125;/g, <span class="hljs-string">&#x27;.&#x27;</span>);<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/^\./g, <span class="hljs-string">&#x27;0.&#x27;</span>);<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/^\d*\.\d*\./g, <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.substring(<span class="hljs-number">0</span>, <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.length - <span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/^<span class="hljs-number">0</span>[^\.]+/g, <span class="hljs-string">&#x27;0&#x27;</span>)<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/^(\d+)\.(\d\d).*$/, <span class="hljs-string">&#x27;$1.$2&#x27;</span>)<br>            <span class="hljs-keyword">trigger</span>(<span class="hljs-keyword">input</span>, <span class="hljs-string">&#x27;input&#x27;</span>)<br>        &#125;<br>        <span class="hljs-keyword">input</span>.onblur = <span class="hljs-keyword">function</span>(e) &#123;<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/[^\d.]/g, <span class="hljs-string">&#x27;&#x27;</span>);<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/\.&#123;<span class="hljs-number">2</span>,&#125;/g, <span class="hljs-string">&#x27;.&#x27;</span>);<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/^\./g, <span class="hljs-string">&#x27;0.&#x27;</span>);<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/^\d*\.\d*\./g, <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.substring(<span class="hljs-number">0</span>, <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.length - <span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/^<span class="hljs-number">0</span>[^\.]+/g, <span class="hljs-string">&#x27;0&#x27;</span>)<br>            <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>.replace(/^(\d+)\.(\d\d).*$/, <span class="hljs-string">&#x27;$1.$2&#x27;</span>)<br>            <span class="hljs-keyword">trigger</span>(<span class="hljs-keyword">input</span>, <span class="hljs-string">&#x27;input&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br>const <span class="hljs-keyword">trigger</span> = (el, <span class="hljs-keyword">type</span>) =&gt; &#123;<br>    const e = document.createEvent(<span class="hljs-string">&#x27;HTMLEvents&#x27;</span>)<br>    e.initEvent(<span class="hljs-keyword">type</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">true</span>)<br>    el.dispatchEvent(e)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="v-debounce"><a href="#v-debounce" class="headerlink" title="v-debounce"></a>v-debounce</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 防止按钮在短时间内被多次点击，使用防抖函数限制规定时间内只能点击一次。</span><br><span class="hljs-keyword">const</span> debounce = &#123;<br>  <span class="hljs-attr">inserted</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer<br>    el.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (timer) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<br>      &#125;<br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        binding.value()<br>      &#125;, <span class="hljs-number">1000</span>)<br>    &#125;)<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> debounce<br></code></pre></td></tr></table></figure><h3 id="v-emoji"><a href="#v-emoji" class="headerlink" title="v-emoji"></a>v-emoji</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 根据正则表达式，设计自定义处理表单输入规则的指令，下面以禁止输入表情和特殊字符为例。</span><br><span class="hljs-keyword">let</span> findEle = <span class="hljs-function">(<span class="hljs-params">parent, <span class="hljs-keyword">type</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> parent.tagName.toLowerCase() === <span class="hljs-keyword">type</span> ? parent : parent.querySelector(<span class="hljs-keyword">type</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> trigger = <span class="hljs-function">(<span class="hljs-params">el, <span class="hljs-keyword">type</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> e = <span class="hljs-built_in">document</span>.createEvent(<span class="hljs-string">&#x27;HTMLEvents&#x27;</span>)<br>  e.initEvent(<span class="hljs-keyword">type</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>)<br>  el.dispatchEvent(e)<br>&#125;<br><br><span class="hljs-keyword">const</span> emoji = &#123;<br>  <span class="hljs-attr">bind</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding, vnode</span>) </span>&#123;<br>    <span class="hljs-comment">// 正则规则可根据需求自定义</span><br>    <span class="hljs-keyword">var</span> regRule = <span class="hljs-regexp">/[^u4E00-u9FA5|d|a-zA-Z|rns,.?!，。？！…—&amp;$=()-+/*&#123;&#125;[]]|s/g</span><br>    <span class="hljs-keyword">let</span> $inp = findEle(el,<span class="hljs-string">&#x27;input&#x27;</span>)<br>    el.$inp = $inp<br>    $inp.handle =<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> val = $inp.value<br>      $inp.value = val.replace(regRule,<span class="hljs-string">&#x27;&#x27;</span>)<br><br>      trigger($inp,<span class="hljs-string">&#x27;input&#x27;</span>)<br>    &#125;<br>    $inp.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, $inp.handle)<br>  &#125;,<br>  <span class="hljs-attr">unbind</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>    el.$inp.removeEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, el.$inp.handle)<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> emoji<br><br><span class="hljs-comment">//使用</span><br>&lt;template&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;note&quot;</span> <span class="hljs-attr">v-emoji</span> /&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="v-LazyLoad"><a href="#v-LazyLoad" class="headerlink" title="v-LazyLoad"></a>v-LazyLoad</h3><blockquote><p>实现一个图片懒加载指令，只加载浏览器可见区域的图片。</p></blockquote><p>思路：<br>图片懒加载的原理主要是判断当前图片是否到了可视区域这一核心逻辑实现的<br>拿到所有的图片 Dom ，遍历每个图片判断当前图片是否到了可视区范围内<br>如果到了就设置图片的 src 属性，否则显示默认图片</p><blockquote><p>图片懒加载有两种方式可以实现，一是绑定 srcoll 事件进行监听，二是使用 IntersectionObserver 判断图片是否到了可视区域，但是有浏览器兼容性问题。</p></blockquote><p>下面封装一个懒加载指令兼容两种方法，判断浏览器是否支持 IntersectionObserver API，如果支持就使用 IntersectionObserver 实现懒加载，否则则使用 srcoll 事件监听 + 节流的方法实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> LazyLoad = &#123;<br>  <span class="hljs-comment">// install方法</span><br>  <span class="hljs-function"><span class="hljs-title">install</span>(<span class="hljs-params">Vue, options</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> defaultSrc = options.default<br>    Vue.directive(<span class="hljs-string">&#x27;lazy&#x27;</span>, &#123;<br>      <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el, binding</span>)</span> &#123;<br>        LazyLoad.init(el, binding.value, defaultSrc)<br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-title">inserted</span>(<span class="hljs-params">el</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (IntersectionObserver) &#123;<br>          LazyLoad.observe(el)<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>          LazyLoad.listenerScroll(el)<br>        &#125;<br>      &#125;,<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">// 初始化</span><br>  <span class="hljs-function"><span class="hljs-title">init</span>(<span class="hljs-params">el, val, def</span>)</span> &#123;<br>    el.setAttribute(<span class="hljs-string">&#x27;data-src&#x27;</span>, val)<br>    el.setAttribute(<span class="hljs-string">&#x27;src&#x27;</span>, def)<br>  &#125;,<br>  <span class="hljs-comment">// 利用IntersectionObserver监听el</span><br>  <span class="hljs-function"><span class="hljs-title">observe</span>(<span class="hljs-params">el</span>)</span> &#123;<br>    <span class="hljs-keyword">var</span> io =<span class="hljs-keyword">new</span> IntersectionObserver(<span class="hljs-function">(<span class="hljs-params">entries</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> realSrc = el.dataset.src<br>      <span class="hljs-keyword">if</span> (entries[<span class="hljs-number">0</span>].isIntersecting) &#123;<br>        <span class="hljs-keyword">if</span> (realSrc) &#123;<br>          el.src = realSrc<br>          el.removeAttribute(<span class="hljs-string">&#x27;data-src&#x27;</span>)<br>        &#125;<br>      &#125;<br>    &#125;)<br>    io.observe(el)<br>  &#125;,<br>  <span class="hljs-comment">// 监听scroll事件</span><br>  <span class="hljs-function"><span class="hljs-title">listenerScroll</span>(<span class="hljs-params">el</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> handler = LazyLoad.throttle(LazyLoad.load, <span class="hljs-number">300</span>)<br>    LazyLoad.load(el)<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      handler(el)<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">// 加载真实图片</span><br>  <span class="hljs-function"><span class="hljs-title">load</span>(<span class="hljs-params">el</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> windowHeight = <span class="hljs-built_in">document</span>.documentElement.clientHeight<br>    <span class="hljs-keyword">const</span> elTop = el.getBoundingClientRect().top<br>    <span class="hljs-keyword">const</span> elBtm = el.getBoundingClientRect().bottom<br>    <span class="hljs-keyword">const</span> realSrc = el.dataset.src<br>    <span class="hljs-keyword">if</span> (elTop - windowHeight &lt; <span class="hljs-number">0</span> &amp;&amp; elBtm &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (realSrc) &#123;<br>        el.src = realSrc<br>        el.removeAttribute(<span class="hljs-string">&#x27;data-src&#x27;</span>)<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 节流</span><br>  <span class="hljs-function"><span class="hljs-title">throttle</span>(<span class="hljs-params">fn, delay</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> timer<br>    <span class="hljs-keyword">let</span> prevTime<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;<br>      <span class="hljs-keyword">const</span> currTime = <span class="hljs-built_in">Date</span>.now()<br>      <span class="hljs-keyword">const</span> context =<span class="hljs-built_in">this</span><br>      <span class="hljs-keyword">if</span> (!prevTime) prevTime = currTime<br>      <span class="hljs-built_in">clearTimeout</span>(timer)<br><br>      <span class="hljs-keyword">if</span> (currTime - prevTime &gt; delay) &#123;<br>        prevTime = currTime<br>        fn.apply(context, args)<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<br>        <span class="hljs-keyword">return</span><br>      &#125;<br><br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        prevTime = <span class="hljs-built_in">Date</span>.now()<br>        timer =<span class="hljs-literal">null</span><br>        fn.apply(context, args)<br>      &#125;, delay)<br>    &#125;<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> LazyLoad<br><br><span class="hljs-comment">// 使用</span><br>&lt;img v-LazyLoad=<span class="hljs-string">&quot;xxx.jpg&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h3 id="批量注册"><a href="#批量注册" class="headerlink" title="批量注册"></a>批量注册</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> copy <span class="hljs-keyword">from</span><span class="hljs-string">&#x27;./copy&#x27;</span><br><span class="hljs-keyword">import</span> debounce <span class="hljs-keyword">from</span><span class="hljs-string">&#x27;./debounce&#x27;</span><br><span class="hljs-comment">// 自定义指令</span><br><span class="hljs-keyword">const</span> directives = &#123;<br>  copy,<br>  debounce,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">install</span>(<span class="hljs-params">Vue</span>)</span> &#123;<br>    <span class="hljs-built_in">Object</span>.keys(directives).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      Vue.directive(key, directives[key])<br>    &#125;)<br>  &#125;,<br>&#125;<br><br><span class="hljs-comment">//在 main.js 引入并调用</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span><span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Directives <span class="hljs-keyword">from</span><span class="hljs-string">&#x27;./JS/directives&#x27;</span><br>Vue.use(Directives)<br></code></pre></td></tr></table></figure><p><img src="/img/1.jpg" alt="BG图片"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue指令学习</title>
    <link href="/2021/07/22/07-22Vue%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/07/22/07-22Vue%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在 vue 中提供了一些对于页面 + 数据的更为方便的输出,这些操作就叫做指令, 以 v-xxx 表示</p><h3 id="vue-中常用的-v-指令"><a href="#vue-中常用的-v-指令" class="headerlink" title="vue 中常用的 v-指令"></a>vue 中常用的 v-指令</h3><ul><li>  v-text 其实就是给元素的 innerText 赋值，只能用在双标签中 相当于插值表达试 <code>&#123;&#123;&#125;&#125;</code></li><li>  v-html 就是给元素的 innerHTML 赋值</li><li>  v-if 判断是否插入这个元素</li><li>  v-else-if 判断是否插入这个元素</li><li>  v-else 判断是否插入这个元素</li><li>v-show 隐藏元素 如果确定要隐藏, 会给元素的 style 加上 display:none<blockquote><p>v-if 家族都是对元素进行插入和移除的操作 v-show 是显示与否的问题。 v-if 家族使用必须是相同嵌套层相邻的 兄弟元素</p></blockquote></li><li>  v-model 双向数据绑定,针对的 js 内存对象,写在那个元素上，就对哪个元素操作</li><li>v-bind 可以给已经存在的属性赋值 input value 简写方式 v-bind:xx=”x” =&gt; :xx=”x”<blockquote><p>v-bind 和 v-model 的区别，在于，双向数据绑定 页面对于 input 的 value 改变，能影响内存中 name 变量，内存 js 改变 name 的值，会影响页面重新渲染最新值。bind,单向数据绑定 内存改变影响页面改变</p></blockquote></li><li>  v-on 处理自定义原生事件的,给按钮添加 click 并让使用变量的样式改变 简写： v-on:fn=”表达式||函数名” =&gt; @fn=”表达式||函数名”</li><li>v-for 循环遍历数据 v-for=”(item,index) in arr” v-for=”(value,key,index) in Obj”<blockquote><p>key 值， 都会说要拿一个唯一识别做渲染。由于 Vue 和 React 的虚拟 DOM diff 算法大致相同，我们需要使用 key 来给每个节点做一个唯一标识，Diff 算法就可以正确的识别此节点，找到正确的位置区插入新的节点，节约性能，更高效的更新 virtual DOM <a href="https://cn.vuejs.org/v2/api/#key">key 值运用</a></p></blockquote></li></ul><h3 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h3><ul><li>  v-pre 主要用来跳过这个元素和它的子元素编译过程</li><li>  v-cloak 这个指令是用来保持在元素上直到关联实例结束时进行编译。</li><li>  v-once 关联的实例，只会渲染一次。之后的重新渲染，实例极其所有的子节点将被视为静态内容跳过，这可以用于优化更新性能。</li></ul><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><h4 id="v-on-事件修饰符"><a href="#v-on-事件修饰符" class="headerlink" title="v-on / @ 事件修饰符"></a>v-on / @ 事件修饰符</h4><ul><li>  .stop 阻止事件继续传播冒泡</li><li>  .prevent 事件不再重载</li><li>  .capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理</li><li>  .self 只当在 event.target 是当前元素自身时触发处理函数</li><li>  .once 事件将只会触发一次</li><li>  .passive 告诉浏览器你不想阻止事件的默认行为</li></ul><h4 id="v-model-修饰符"><a href="#v-model-修饰符" class="headerlink" title="v-model 修饰符"></a>v-model 修饰符</h4><ul><li>  .lazy 默认情况下，v-model 同步输入框的值和数据。可以通过这个修饰符，转变为在 change 事件再同步。</li><li>  .number 自动将用户的输入值转化为数值类型。 会转换成 NAN</li><li>  .trim 自动过滤用户输入的首尾空格，string 格式</li></ul><h4 id="自定义事件修饰符"><a href="#自定义事件修饰符" class="headerlink" title="自定义事件修饰符"></a>自定义事件修饰符</h4><ul><li>  .sync 只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器。当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定。如果我们不用.sync，我们想做上面的那个弹窗功能，我们也可以 props 传初始值，然后事件监听，实现起来也不算复杂。</li></ul><blockquote><p>修饰符可以串联使用，但要注意顺序。例如： 用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</p></blockquote><p><img src="/img/1.jpg" alt="BG图片"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>过滤器filter</title>
    <link href="/2021/07/19/07-19Vue%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2021/07/19/07-19Vue%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a><a href="https://cn.vuejs.org/v2/guide/filters.html">过滤器</a></h3><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><p>我们可以直接在 vue 对象上使用 filter 方法注册过滤器，这种全局注册的过滤器在任何一个组件内都可以使用。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs qml">Vue.filter(<span class="hljs-string">&#x27;formatTime&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(val);<br>  <span class="hljs-keyword">const</span> hour = <span class="hljs-built_in">date</span>.getHours();<br>  <span class="hljs-keyword">const</span> minutes = <span class="hljs-built_in">date</span>.getMinutes();<br>  <span class="hljs-keyword">const</span> seconds = <span class="hljs-built_in">date</span>.getSeconds();<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;hour&#125;</span> : <span class="hljs-subst">$&#123;minutes&#125;</span> : <span class="hljs-subst">$&#123;seconds&#125;</span>`</span>;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>vue过滤器<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">new</span> Date() | formatTime&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">1627742058904</span> | formatTime&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>可以串联使用 <code>&#123;&#123; value | filterA | filterB &#125;&#125; </code><br>可以传递参数<code>接收参数 &#123;&#123; value | filterA('arg1') &#125;&#125;</code></p></blockquote><h2 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h2><p>注册组件内部过滤器则只能在当前组件内使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">export default&#123;<br>    data <span class="hljs-literal">()</span> &#123;<br>        return &#123;&#125;<br>    &#125;,<br>    filters: &#123;<br>        format<span class="hljs-constructor">Time(<span class="hljs-params">val</span>,<span class="hljs-params">type</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">type</span>)&#123;<br>              return  <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(<span class="hljs-params">val</span>)</span>.form<span class="hljs-constructor">Date(<span class="hljs-params">type</span>)</span><br>            &#125;<br>          return <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(<span class="hljs-params">val</span>)</span>.form<span class="hljs-constructor">Date(&#x27;<span class="hljs-params">yyyy</span>-MM-DD <span class="hljs-params">hh</span>:<span class="hljs-params">mm</span>:<span class="hljs-params">ss</span>&#x27;)</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/1.jpg" alt="BG图片"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片随屏幕滚动而滑入滑出</title>
    <link href="/2021/07/16/07-16%E6%BB%9A%E5%8A%A8%E4%BA%A7%E7%94%9F%E5%9B%BE%E7%89%87/"/>
    <url>/2021/07/16/07-16%E6%BB%9A%E5%8A%A8%E4%BA%A7%E7%94%9F%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p>浏览文本，当即将浏览到图片时，进行加载动画。</p><h4 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h4><blockquote><p>css 部分</p></blockquote><ul><li>  scale 控制图片缩放</li><li>  translateX 来控制左右移动</li></ul><blockquote><p>js 部分</p></blockquote><ul><li>  window.scrolly 纵向滚动距离</li><li>  window.innerHeight viewport 部分高度</li><li>  el.height 节点的高度</li><li>  el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口</li></ul><blockquote><p><code>debounce</code> 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。</p></blockquote><h3 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h3><p><img src="https://cl.ly/2k2e2H0b1U0J/Screen%20Recording%202017-07-18%20at%2010.04%20%E4%B8%8A%E5%8D%88.gif" alt="Scroll 效果演示">（图片太大，可点击<a href="https://cl.ly/2k2e2H0b1U0J">外链</a>查看，或查看<a href="http://soyaine.cn/JavaScript30/13%20-%20Slide%20in%20on%20Scroll/index-SOYAINE.html">在线效果</a>。）</p><h3 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;site-wrap&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>滚动出现图片<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariaturlores sunt esse magni, ut, dignissimos.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Adipisicing elit. Tempore tempora rerum..<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://unsplash.it/400/400&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;align-left slide-in&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptates, deserunt facilis et iste corrupti omnis tenetur est. Iste ut est dicta dolor itaque adipisci, dolorum minima, veritatis earum provident error molestias. Ratione magni illo sint vel velit ut excepturi consectetur suscipit, earum modi accusamus voluptatem nostrum, praesentium numquam, reiciendis voluptas sit id quisquam. Consequatur in quis reprehenderit modi perspiciatis necessitatibus saepe, quidem, suscipit iure natus dignissimos ipsam, eligendi deleniti accusantium, rerum quibusdam fugit perferendis et optio recusandae sed ratione. Culpa, dolorum reprehenderit harum ab voluptas fuga, nisi eligendi natus maiores illum quas quos et aperiam aut doloremque optio maxime fugiat doloribus. Eum dolorum expedita quam, nesciunt<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://unsplash.it/400/401&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;align-right slide-in&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> at provident praesentium atque quas rerum optio dignissimos repudiandae ullam illum quibusdam. Vel ad error quibusdam, illo ex totam placeat. Quos excepturi fuga, molestiae ea quisquam minus, ratione dicta consectetur officia omnis, doloribus voluptatibus? Veniam ipsum veritatis architecto, provident quas consequatur doloremque quam quidem earum expedita, ad delectus voluptatum, omnis praesentium nostrum qui aspernatur ea eaque adipisci et cumque ab? Ea voluptatum dolore itaque odio. Eius minima distinctio harum, officia ab nihil exercitationem. Tempora rem nemo nam temporibus molestias facilis minus ipsam quam doloribus consequatur debitis nesciunt tempore officiis aperiam quisquam, molestiae voluptates cum, fuga culpa. Distinctio accusamus quibusdam, tempore perspiciatis dolorum optio facere consequatur quidem ullam beatae architecto, ipsam sequi officiis dignissimos amet impedit natus necessitatibus tenetur repellendus dolor rem! Dicta dolorem, iure, facilis illo ex nihil ipsa amet officia, optio temporibus eum autem odit repellendus nisi. Possimus modi, corrupti error debitis doloribus dicta libero earum, sequi porro ut excepturi nostrum ea voluptatem nihil culpa? Ullam expedita eligendi obcaecati reiciendis velit provident omnis quas qui in corrupti est dolore facere ad hic, animi soluta assumenda consequuntur reprehenderit! Voluptate dolor nihil veniam laborum voluptas nisi pariatur sed optio accusantium quam consectetur, corrupti, sequi et consequuntur, excepturi doloremque. Tempore quis velit corporis neque fugit non sequi eaque rem hic. Facere, inventore, aspernatur. Accusantium modi atque, asperiores qui nobis soluta cumque suscipit excepturi possimus doloremque odit saepe perferendis temporibus molestiae nostrum voluptatum quis id sint quidem nesciunt culpa. Rerum labore dolor beatae blanditiis praesentium explicabo velit optio esse aperiam similique, voluptatem cum, maiores ipsa tempore. Reiciendis sed culpa atque inventore, nam ullam enim expedita consectetur id velit iusto alias vitae explicabo nemo neque odio reprehenderit soluta sint eaque. Aperiam, qui ut tenetur, voluptate doloremque officiis dicta quaerat voluptatem rerum natus magni. Eum amet autem dolor ullam.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://unsplash.it/200/500&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;align-left slide-in&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://unsplash.it/200/200&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;align-right slide-in&quot;</span>&gt;</span> temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://unsplash.it/400/400&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;align-right slide-in&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">html</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      <span class="hljs-attribute">background</span>:<span class="hljs-number">#ffc600</span>;</span><br><span class="css">      <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&#x27;helvetica neue&#x27;</span>;</span><br><span class="css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">200</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    *, *:before, *:after &#123;</span><br><span class="css">      box-sizing: inherit;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.site-wrap</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">max-width</span>: <span class="hljs-number">700px</span>;</span><br><span class="css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="css">      <span class="hljs-attribute">background</span>:white;</span><br><span class="css">      <span class="hljs-attribute">padding</span>:<span class="hljs-number">40px</span>;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: justify;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.align-left</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="css">      <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">20px</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.align-right</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>;</span><br><span class="css">      <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">20px</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.slide-in</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>;</span><br><span class="css">      <span class="hljs-attribute">transition</span>:all .<span class="hljs-number">5s</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.align-left</span><span class="hljs-selector-class">.slide-in</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateX</span>(-<span class="hljs-number">30%</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.95</span>);</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.align-right</span><span class="hljs-selector-class">.slide-in</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateX</span>(<span class="hljs-number">30%</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.95</span>);</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.slide-in</span><span class="hljs-selector-class">.active</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">opacity</span>:<span class="hljs-number">1</span>;</span><br><span class="css">      <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateX</span>(<span class="hljs-number">0%</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;site-wrap&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Slide in on Scroll<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>滑动查看图片效果<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariaturlores sunt esse magni, ut, dignissimos.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Adipisicing elit. Tempore tempora rerum..<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://unsplash.it/400/402&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;align-left slide-in&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptates, deserunt facilis et iste corrupti omnis tenetur est. Iste ut est dicta dolor itaque adipisci, dolorum minima, veritatis earum provident error molestias. Ratione magni illo sint vel velit ut excepturi consectetur suscipit, earum modi accusamus voluptatem nostrum, praesentium numquam, reiciendis voluptas sit id quisquam. Consequatur in quis reprehenderit modi perspiciatis necessitatibus saepe, quidem, suscipit iure natus dignissimos ipsam, eligendi deleniti accusantium, rerum quibusdam fugit perferendis et optio recusandae sed ratione. Culpa, dolorum reprehenderit harum ab voluptas fuga, nisi eligendi natus maiores illum quas quos et aperiam aut doloremque optio maxime fugiat doloribus. Eum dolorum expedita quam, nesciunt<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://unsplash.it/400/401&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;align-right slide-in&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> at provident praesentium atque quas rerum optio dignissimos repudiandae ullam illum quibusdam. Vel ad error quibusdam, illo ex totam placeat. Quos excepturi fuga, molestiae ea quisquam minus, ratione dicta consectetur officia omnis, doloribus voluptatibus? Veniam ipsum veritatis architecto, provident quas consequatur doloremque quam quidem earum expedita, ad delectus voluptatum, omnis praesentium nostrum qui aspernatur ea eaque adipisci et cumque ab? Ea voluptatum dolore itaque odio. Eius minima distinctio harum, officia ab nihil exercitationem. Tempora rem nemo nam temporibus molestias facilis minus ipsam quam doloribus consequatur debitis nesciunt tempore officiis aperiam quisquam, molestiae voluptates cum, fuga culpa. Distinctio accusamus quibusdam, tempore perspiciatis dolorum optio facere consequatur quidem ullam beatae architecto, ipsam sequi officiis dignissimos amet impedit natus necessitatibus tenetur repellendus dolor rem! Dicta dolorem, iure, facilis illo ex nihil ipsa amet officia, optio temporibus eum autem odit repellendus nisi. Possimus modi, corrupti error debitis doloribus dicta libero earum, sequi porro ut excepturi nostrum ea voluptatem nihil culpa? Ullam expedita eligendi obcaecati reiciendis velit provident omnis quas qui in corrupti est dolore facere ad hic, animi soluta assumenda consequuntur reprehenderit! Voluptate dolor nihil veniam laborum voluptas nisi pariatur sed optio accusantium quam consectetur, corrupti, sequi et consequuntur, excepturi doloremque. Tempore quis velit corporis neque fugit non sequi eaque rem hic. Facere, inventore, aspernatur. Accusantium modi atque, asperiores qui nobis soluta cumque suscipit excepturi possimus doloremque odit saepe perferendis temporibus molestiae nostrum voluptatum quis id sint quidem nesciunt culpa. Rerum labore dolor beatae blanditiis praesentium explicabo velit optio esse aperiam similique, voluptatem cum, maiores ipsa tempore. Reiciendis sed culpa atque inventore, nam ullam enim expedita consectetur id velit iusto alias vitae explicabo nemo neque odio reprehenderit soluta sint eaque. Aperiam, qui ut tenetur, voluptate doloremque officiis dicta quaerat voluptatem rerum natus magni. Eum amet autem dolor ullam.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://unsplash.it/200/500&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;align-left slide-in&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://unsplash.it/200/200&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;align-right slide-in&quot;</span>&gt;</span> temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://unsplash.it/400/400&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;align-right slide-in&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 减少功能消耗</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait = <span class="hljs-number">20</span>, immediate = <span class="hljs-literal">true</span></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> timeout;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> context = <span class="hljs-built_in">this</span>, args = <span class="hljs-built_in">arguments</span>;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> later = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          timeout = <span class="hljs-literal">null</span>;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (!immediate) func.apply(context, args);</span><br><span class="javascript">        &#125;;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class="javascript">        <span class="hljs-built_in">clearTimeout</span>(timeout);</span><br><span class="javascript">        timeout = <span class="hljs-built_in">setTimeout</span>(later, wait);</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (callNow) func.apply(context, args);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-comment">// 获取图片节点</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> slideImages = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;.slide-in&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-comment">// 定义处理事件</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkSlide</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        slideImages.forEach(<span class="hljs-function"><span class="hljs-params">img</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">const</span> slideInAt = (<span class="hljs-built_in">window</span>.scrollY + <span class="hljs-built_in">window</span>.innerHeight) - img.height / <span class="hljs-number">2</span>;</span><br><span class="javascript">            <span class="hljs-comment">// 图片底部</span></span><br><span class="javascript">            <span class="hljs-keyword">const</span> imgBottom = img.offsetTop + img.height;</span><br><span class="javascript">            <span class="hljs-comment">// 已滑过了图片的一半</span></span><br><span class="javascript">            <span class="hljs-keyword">const</span> isHalfShow = slideInAt &gt; img.offsetTop;</span><br><span class="javascript">            <span class="hljs-comment">// 未完全滑过图片</span></span><br><span class="javascript">            <span class="hljs-keyword">const</span> isNotScrollPast = <span class="hljs-built_in">window</span>.scrollY &lt; imgBottom;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (isHalfShow &amp;&amp; isNotScrollPast) &#123;</span><br><span class="javascript">                img.classList.add(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                img.classList.remove(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">     &#125;);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    注册scroll事件 进行监听</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, debounce(checkSlide));</span><br><span class="javascript"></span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">html</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      <span class="hljs-attribute">background</span>:<span class="hljs-number">#ffc600</span>;</span><br><span class="css">      <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&#x27;helvetica neue&#x27;</span>;</span><br><span class="css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">200</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    *, *:before, *:after &#123;</span><br><span class="css">      box-sizing: inherit;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.site-wrap</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">max-width</span>: <span class="hljs-number">700px</span>;</span><br><span class="css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="css">      <span class="hljs-attribute">background</span>:white;</span><br><span class="css">      <span class="hljs-attribute">padding</span>:<span class="hljs-number">40px</span>;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: justify;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.align-left</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="css">      <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">20px</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.align-right</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>;</span><br><span class="css">      <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">20px</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.slide-in</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>;</span><br><span class="css">      <span class="hljs-attribute">transition</span>:all .<span class="hljs-number">5s</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.align-left</span><span class="hljs-selector-class">.slide-in</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateX</span>(-<span class="hljs-number">30%</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.95</span>);</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.align-right</span><span class="hljs-selector-class">.slide-in</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateX</span>(<span class="hljs-number">30%</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.95</span>);</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.slide-in</span><span class="hljs-selector-class">.active</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">opacity</span>:<span class="hljs-number">1</span>;</span><br><span class="css">      <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateX</span>(<span class="hljs-number">0%</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>混入mixins</title>
    <link href="/2021/07/13/07-13Vue-mixins/"/>
    <url>/2021/07/13/07-13Vue-mixins/</url>
    
    <content type="html"><![CDATA[<h3 id="混入（mixins）"><a href="#混入（mixins）" class="headerlink" title="混入（mixins）"></a><a href="https://cn.vuejs.org/v2/guide/mixins.html">混入（mixins）</a></h3><ul><li>  官网指出： 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</li><li>  当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</li><li>  同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。</li></ul><h2 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h2><blockquote><p>定义看不懂</p></blockquote><h4 id="定义混入组件"><a href="#定义混入组件" class="headerlink" title="定义混入组件"></a>定义混入组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">num</span> : <span class="hljs-number">0</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">handleclick</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.num = <span class="hljs-built_in">this</span>.num ++<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="混入引用到组件（局部）"><a href="#混入引用到组件（局部）" class="headerlink" title="混入引用到组件（局部）"></a>混入引用到组件（局部）</h4><p>总的说是混入到这里面就是和所有的重合到一起，这样可以获取到混入组件的相关内容了</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">num</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleclick&quot;</span>&gt;</span>点击每次加1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> minin <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./minxin/minxin&#x27;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">mixins</span>: [minin],</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h2><blockquote><p>定义全局混入,main.js 中引入。在需要的使用的页面直接使用，不需要再引入（使用方法同局部混入）</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Vue.<span class="hljs-keyword">mixin</span>(&#123;<br>    data () &#123;<br>        rerutn &#123;<br><br>        &#125;<br>    &#125;,<br>    create () &#123;&#125;,<br>    methods: &#123;<br>        clgFn()&#123;<br>            console.log(<span class="hljs-string">&#x27;混入的mixin方法&#x27;</span>)<br>        &#125;,<br>    &#125;,<br>&#125;)<br><br></code></pre></td></tr></table></figure><p><img src="/img/1.jpg" alt="BG图片"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>表单校验方式</title>
    <link href="/2021/07/09/07-09element%E6%A0%A1%E9%AA%8C/"/>
    <url>/2021/07/09/07-09element%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><blockquote><p>日常总结常规的表单校验方式总结，针对于 element ui 组件库</p></blockquote><h2 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h2><blockquote><p>form 表单内 form-item prop 校验</p></blockquote><ul><li>  required 必填</li><li>  trigger 触发条件</li><li>  message 警示语</li><li>  type 校验类型</li><li>  pattern 正则校验</li><li>  validator 自定义 校验规则</li></ul><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> validateDate = <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (value) &#123;<br>        <span class="hljs-keyword">let</span> selectTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(value).valueOf();<br>        <span class="hljs-keyword">let</span> activeTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().valueOf();<br>        <span class="hljs-keyword">if</span> (activeTime &gt; selectTime) &#123;<br>          callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`生效时间不能低于或等于当前时间`</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          callback();<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        callback();<br>      &#125;<br><br><span class="hljs-attr">productTitle</span>: [<br>          &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;请输入商品名称&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>         &#123; <span class="hljs-attr">validator</span>: validateDate, <span class="hljs-attr">trigger</span>: [<span class="hljs-string">&quot;blur&quot;</span>, <span class="hljs-string">&quot;change&quot;</span>] &#125;,<br>         &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;类型应为数字值&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>         &#123;<span class="hljs-attr">pattern</span>: <span class="hljs-regexp">/^\+?[1-9][0-9]*$/</span>,message: <span class="hljs-string">&#x27;推荐顺序应为正整数&#x27;</span>,<span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span>,&#125;,<br>        ],<br></code></pre></td></tr></table></figure><h3 id="有依赖数据校验判断"><a href="#有依赖数据校验判断" class="headerlink" title="有依赖数据校验判断"></a>有依赖数据校验判断</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">computed: &#123;<br>        <span class="hljs-comment">// 表单校验规则 在计算属性中可将值进行判断</span><br>        <span class="hljs-function"><span class="hljs-title">rules</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">product</span>:[&#123; <span class="hljs-attr">required</span>: <span class="hljs-built_in">this</span>.form.big ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;请输入商品名称&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;]<br>            &#125;;<br>        &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure><h3 id="自定义正则方式修改输入内容"><a href="#自定义正则方式修改输入内容" class="headerlink" title="自定义正则方式修改输入内容"></a>自定义正则方式修改输入内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> &lt;el-form-item v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;showPrice&quot;</span> prop=<span class="hljs-string">&quot;itemPrice&quot;</span> label=<span class="hljs-string">&quot;面值&quot;</span>&gt;<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;addForm.itemPrice&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              @<span class="hljs-attr">keyup.native</span>=<span class="hljs-string">&quot;InputNumber(&#x27;itemPrice&#x27;)&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;6&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;blur&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br>&lt;/el-form-item&gt;<br><br>  <span class="hljs-comment">// 验证只能输入数字</span><br>   limitInputNumber (val) &#123;<br>     <span class="hljs-keyword">if</span> (val) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>(val).replace(<span class="hljs-regexp">/\D/g</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>     &#125;<br>     <span class="hljs-keyword">return</span> val<br>   &#125;,<br>    <span class="hljs-comment">// 限制只能输入数字(可以输入两位小数)</span><br>    <span class="hljs-function"><span class="hljs-title">limitInputPointNumber</span>(<span class="hljs-params">val, parent, property</span>)</span> &#123;<br>      <span class="hljs-keyword">let</span> tmap = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">if</span> (val === <span class="hljs-number">0</span> || val === <span class="hljs-string">&#x27;0&#x27;</span> || val === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        tmap = <span class="hljs-string">&#x27;&#x27;</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> value = <span class="hljs-literal">null</span><br>        value = <span class="hljs-built_in">String</span>(val).replace(<span class="hljs-regexp">/[^\d.]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// 清除“数字”和“.”以外的字符</span><br>        value = value.replace(<span class="hljs-regexp">/^\./g</span>, <span class="hljs-string">&#x27;0.&#x27;</span>) <span class="hljs-comment">// 第一个. 添加0.</span><br>        value = value.replace(<span class="hljs-regexp">/\.&#123;2,&#125;/g</span>, <span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-comment">// 只保留第一个. 清除多余的</span><br>        value = value<br>          .replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;$#$&#x27;</span>)<br>          .replace(<span class="hljs-regexp">/\./g</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>          .replace(<span class="hljs-string">&#x27;$#$&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>)<br>        value = value.replace(<span class="hljs-regexp">/^(-)*(\d+)\.(\d\d).*$/</span>, <span class="hljs-string">&#x27;$1$2.$3&#x27;</span>) <span class="hljs-comment">// 只能输入两个小数</span><br>        tmap = <span class="hljs-built_in">Number</span>(value)<br>      &#125;<br>      <span class="hljs-built_in">this</span>[parent][property] = tmap<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">InputNumber</span>(<span class="hljs-params">property</span>)</span> &#123;<br>     <span class="hljs-built_in">this</span>.addForm[property] = <span class="hljs-built_in">this</span>.limitInputNumber(<span class="hljs-built_in">this</span>.addForm[property])<br>   &#125;,<br></code></pre></td></tr></table></figure><h3 id="嵌套验证-联动验证"><a href="#嵌套验证-联动验证" class="headerlink" title="嵌套验证(联动验证)"></a>嵌套验证(联动验证)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- region是一个对象,国家和城市是它的属性 --&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动区域&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;region&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;registData.region.country&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择国家&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;国家一&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;USA&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;国家二&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;China&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;registData.region.city&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择城市&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;城市一&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shanghai&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;城市二&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><br>  region: [<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;object&#x27;</span>,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 这里有两种处理,一种是自定义验证,拿到值后自己对属性进行验证,比较麻烦</span><br>      <span class="hljs-comment">// validator: (rule, value, callback) =&gt; &#123;</span><br>      <span class="hljs-comment">//   console.log(55, value)</span><br>      <span class="hljs-comment">//   if (!value.country) &#123;</span><br>      <span class="hljs-comment">//     callback(new Error(&#x27;请选择国家&#x27;))</span><br>      <span class="hljs-comment">//   &#125; else if (!value.city) &#123;</span><br>      <span class="hljs-comment">//     callback(new Error(&#x27;请选择城市&#x27;))</span><br>      <span class="hljs-comment">//   &#125; else &#123;</span><br>      <span class="hljs-comment">//     callback()</span><br>      <span class="hljs-comment">//   &#125;</span><br>      <span class="hljs-comment">// &#125;,</span><br>      <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;change&#x27;</span>,<br>      <span class="hljs-comment">// 官网提供了对象的嵌套验证,只需要把需要验证的属性,放在fields对象里,就会按顺序进行验证</span><br>      <span class="hljs-attr">fields</span>: &#123;<br>        <span class="hljs-attr">country</span>: &#123;<span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择国家&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span>&#125;,<br>        <span class="hljs-attr">city</span>: &#123;<span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择城市&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span>&#125;<br>      &#125;<br>    &#125;<br>  ],<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Element UI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>校验方式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebSocket 基于实现</title>
    <link href="/2021/07/04/07-04websocket/"/>
    <url>/2021/07/04/07-04websocket/</url>
    
    <content type="html"><![CDATA[<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><blockquote><p><a href="https://websocket.org/">webSocket</a>是一种在单个 TCP 连接上进行全双工通信的协议,可以使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。是基于 HTML5 的新协议，一个持久化的协议，相对于 HTTP 这种非持久的协议来说。</p></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>应用提供多个用户相互交流，应用是展示服务器端经常变动的数据。涉及，社交订阅、流动数据、股票基金报价、天气更新、多媒体聊天、位置、视频…..</p><blockquote><p>主要用于客户端部分（HTML5 是一个很宽广的概念，是对大量新 API 的总称）</p></blockquote><h3 id="特点包括"><a href="#特点包括" class="headerlink" title="特点包括"></a>特点包括</h3><ul><li>  建立在 TCP 协议之上，服务器端的实现比较容易。</li><li>  与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li><li>  数据格式比较轻量，性能开销小，通信高效。</li><li>  可以发送文本，也可以发送二进制数据。</li><li>  没有同源限制，客户端可以与任意服务器通信。</li><li>  协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL。</li></ul><h2 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h2><p>详细参考于阮老师日志，便于细节了解 <a href="https://www.ruanyifeng.com/blog/2017/05/websocket.html">阮一峰的网络日志-websocket 教程</a></p><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> that = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSocketClient</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.ws = <span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">this</span>.url = <span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">this</span>.from = <span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">this</span>.to = <span class="hljs-literal">null</span>;<br>        that = <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取WebSocket单例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@returns <span class="hljs-type">&#123;WebSocketClient&#125;</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">getInstance</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.instance) &#123;<br>            <span class="hljs-built_in">this</span>.instance = <span class="hljs-keyword">new</span> WebSocketClient();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.instance;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化WebSocket</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">initWebSocket</span>(<span class="hljs-params">url</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>(!url) <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//timer为发送心跳的计时器</span><br>            <span class="hljs-built_in">this</span>.timer &amp;&amp; <span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.timer);<br>            <span class="hljs-built_in">this</span>.ws = <span class="hljs-keyword">new</span> WebSocket(url);<br>            <span class="hljs-built_in">this</span>.initWsEvent();<br><br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;WebSocket err:&#x27;</span>, e);<br>            <span class="hljs-comment">//重连</span><br>            <span class="hljs-built_in">this</span>.reconnect();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化WebSocket相关事件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">initWsEvent</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">//建立WebSocket连接</span><br>        <span class="hljs-built_in">this</span>.ws.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;WebSocket:&#x27;</span>, <span class="hljs-string">&#x27;连接成功了&#x27;</span>);<br>            <span class="hljs-comment">// 加载历史消息</span><br>            <span class="hljs-comment">// that.getMessageHistory(from,to);</span><br>        &#125;;<br><br>       <span class="hljs-comment">// 客户端接收服务端数据时触发</span><br>        <span class="hljs-built_in">this</span>.ws.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(&quot;websocket:&quot;,evt);</span><br>            <span class="hljs-keyword">if</span> (evt.data !== <span class="hljs-string">&#x27;pong&#x27;</span>) &#123;<br>                <span class="hljs-comment">//不是心跳消息，消息处理逻辑</span><br>                <span class="hljs-comment">//接收到消息，处理逻辑...</span><br>                <span class="hljs-comment">// console.log(&quot;websocket response:&quot;,evt.data);</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;WebSocket: response pong msg=&#x27;</span>, evt.data);<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// this.getMessage();</span><br>       <span class="hljs-comment">//连接错误</span><br>        <span class="hljs-built_in">this</span>.ws.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(&#x27;WebSocket:&#x27;, &#x27;connect to server error&#x27;);</span><br>            <span class="hljs-comment">//重连</span><br>            that.reconnect();<br>        &#125;;<br>        <span class="hljs-comment">//连接关闭</span><br>        <span class="hljs-built_in">this</span>.ws.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(&#x27;WebSocket:&#x27;, &#x27;connect close&#x27;);</span><br>            <span class="hljs-comment">//重连</span><br>            that.reconnect();<br>        &#125;;<br><br>        <span class="hljs-comment">//每隔15s向服务器发送一次心跳</span><br>        <span class="hljs-built_in">this</span>.timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.ws &amp;&amp; <span class="hljs-built_in">this</span>.ws.readyState === WebSocket.OPEN) &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;WebSocket:&#x27;</span>, <span class="hljs-string">&#x27;ping&#x27;</span>);<br>                <span class="hljs-built_in">this</span>.ws.send(<span class="hljs-string">&quot;ping&quot;</span>);<br>            &#125;<br>        &#125;, <span class="hljs-number">15000</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//获取历史消息</span><br>    <span class="hljs-function"><span class="hljs-title">getMessageHistory</span>(<span class="hljs-params">userId,shopId</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.ws &amp;&amp; <span class="hljs-built_in">this</span>.ws.readyState === WebSocket.OPEN) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">let</span> params = &#123;<br>                    <span class="hljs-string">&quot;to &quot;</span>:shopId,<br>                    <span class="hljs-string">&quot;from &quot;</span>:userId<br>                &#125;;<br><br>                <span class="hljs-built_in">this</span>.ws.send(<span class="hljs-built_in">JSON</span>.stringify(params));<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;发送成功&quot;</span>)<br>            &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>                <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&#x27;ws sendMessage&#x27;</span>, err.message);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;WebSocket:&#x27;</span>, <span class="hljs-string">&#x27;connect not open to send message&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//发送消息</span><br>    <span class="hljs-function"><span class="hljs-title">sendMessage</span>(<span class="hljs-params">msg,id</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.ws &amp;&amp; <span class="hljs-built_in">this</span>.ws.readyState === WebSocket.OPEN) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">let</span> params = &#123;<br>                    <span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-number">1</span>,<br>                    <span class="hljs-string">&quot;msgType&quot;</span>:msgType,<span class="hljs-comment">//0=文本 1=图片 3=视频 4=语音</span><br>                    <span class="hljs-string">&quot;to&quot;</span>:cusId,<br>                    <span class="hljs-string">&quot;from&quot;</span>:id,<br>                    <span class="hljs-string">&quot;msg&quot;</span>: msg<br>                &#125;;<br><br>                <span class="hljs-built_in">this</span>.ws.send(<span class="hljs-built_in">JSON</span>.stringify(params));<br>            &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>                <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&#x27;ws sendMessage&#x27;</span>, err.message);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;WebSocket:&#x27;</span>, <span class="hljs-string">&#x27;connect not open to send message&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//重连</span><br>    <span class="hljs-function"><span class="hljs-title">reconnect</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.timeout) &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-built_in">this</span>.timeout);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//重新连接WebSocket</span><br>            that.initWebSocket(<span class="hljs-built_in">this</span>.url,<span class="hljs-built_in">this</span>.from,<span class="hljs-built_in">this</span>.to);<br>        &#125;, <span class="hljs-number">15000</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">onClose</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">if</span>( <span class="hljs-built_in">this</span>.ws )&#123;<br>           <span class="hljs-built_in">this</span>.ws.close();<br>       &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>webSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生js训练1</title>
    <link href="/2021/07/02/07-02%E5%8E%9F%E7%94%9F1/"/>
    <url>/2021/07/02/07-02%E5%8E%9F%E7%94%9F1/</url>
    
    <content type="html"><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>模拟一个打鼓的页面。用户在键盘上按下 ASDFGHJKL 这几个键时，页面上与字母对应的按钮变大变亮，对应的鼓点声音响起来。</p><h3 id="在线效果"><a href="#在线效果" class="headerlink" title="在线效果"></a>在线效果</h3><p><a href="http://soyaine.github.io/JavaScript30/01%20-%20JavaScript%20Drum%20Kit/index-SOYAINE.html">点击查看在线效果</a></p><h3 id="实列代码"><a href="#实列代码" class="headerlink" title="实列代码"></a>实列代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS Drum Kit<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;keys&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;65&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>clap<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;83&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>S<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>hihat<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;68&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>D<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>kick<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;70&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>F<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>openhat<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;71&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>G<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>boom<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>H<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>ride<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;74&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>J<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>snare<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;75&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>K<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>tom<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;76&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>L<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>tink<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;65&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/clap.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;83&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/hihat.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;68&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/kick.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;70&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/openhat.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;71&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/boom.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/ride.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;74&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/snare.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;75&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/tom.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;76&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/tink.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="关键要点"><a href="#关键要点" class="headerlink" title="关键要点"></a>关键要点</h2><ol><li>键盘事件</li><li>播放声音</li><li>改变样式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS Drum Kit<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;keys&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;65&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>clap<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;83&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>S<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>hihat<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;68&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>D<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>kick<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;70&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>F<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>openhat<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;71&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>G<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>boom<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>H<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>ride<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;74&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>J<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>snare<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;75&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>K<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>tom<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;76&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>L<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sound&quot;</span>&gt;</span>tink<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;65&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/clap.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;83&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/hihat.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;68&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/kick.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;70&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/openhat.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;71&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/boom.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/ride.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;74&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/snare.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;75&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/tom.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">data-key</span>=<span class="hljs-string">&quot;76&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sounds/tink.wav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeTransition</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (event.propertyName !== <span class="hljs-string">&#x27;transform&#x27;</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 过滤其中一种事件</span></span><br><span class="javascript">      event.target.classList.remove(<span class="hljs-string">&#x27;playing&#x27;</span>); <span class="hljs-comment">// 移除高亮的样式</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">playSound</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> audio = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">`audio[data-key=&quot;<span class="hljs-subst">$&#123;event.keyCode&#125;</span>&quot;]`</span>); <span class="hljs-comment">// 根据触发按键的键码，获取对应音频</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> key = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">`div[data-key=&quot;<span class="hljs-subst">$&#123;event.keyCode&#125;</span>&quot;]`</span>); <span class="hljs-comment">// 获取页面对应按钮 DIV 元素</span></span><br><span class="javascript">      <span class="hljs-keyword">if</span> (!audio) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 处理无效的按键事件</span></span><br><span class="javascript"></span><br><span class="javascript">      key.classList.add(<span class="hljs-string">&#x27;playing&#x27;</span>); <span class="hljs-comment">// 改变样式</span></span><br><span class="javascript">      audio.currentTime = <span class="hljs-number">0</span>; <span class="hljs-comment">// 每次播放之后都使音频播放进度归零</span></span><br><span class="javascript">      audio.play(); <span class="hljs-comment">// 播放相应音效</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> keys = <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;.key&#x27;</span>)); <span class="hljs-comment">// 获取页面所有按钮元素</span></span><br><span class="javascript">    keys.forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> key.addEventListener(<span class="hljs-string">&#x27;transitionend&#x27;</span>, removeTransition)); <span class="hljs-comment">// 添加 transition 事件监听</span></span><br><span class="javascript">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;keydown&#x27;</span>, playSound);</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现阅读器功能</title>
    <link href="/2021/06/29/06-29%E9%98%85%E8%AF%BB%E5%99%A8/"/>
    <url>/2021/06/29/06-29%E9%98%85%E8%AF%BB%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p>输入一段文字，将其播放。</p><ul><li>  使用相应的 WebAPI 接口获得浏览器支持的语言种类列表，并填充至页面的下拉菜单中，选择中文;</li><li>  在文本域中输入对应语言的文字，点击<code>speak</code>按钮后浏览器会阅读输入的文字；</li><li>  在浏览器阅读时，点击<code>stop</code>按钮，浏览器会停止阅读；</li><li>  拖动<code>rate</code>和<code>pitch</code>滑块可改变阅读速度和音高。</li></ul><h4 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h4><ul><li><code>SpeechSynthesisUtterance</code>接口<br>  本接口用于设置阅读器阅读的配置参数，包括语言，阅读速度，语调等，实例化<code>SpeechSynthesisUtterance</code>后，可以通过为其属性赋值来完成参数配置，详细信息请直接参考 MDN 中的<a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance">SpeechSynthesisUtterance 接口说明</a>。</li><li><code>SpeechSynthesis</code>接口<br>  本接口用于控制阅读器行为，包括获取浏览器支持的朗读语言，文本朗读，暂停，停止等，接口属性中定义有 paused,speaking 等只读属性来表明当前的状态,详细使用方式请参考 MDN 中的<a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis">SpeechSynthesis 接口说明</a>。</li></ul><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p><img src="/img/%E9%98%85%E8%AF%BB%E5%99%A8.png" alt="BG图片"></p><h3 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Speech Synthesis<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;voiceinator&quot;</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The Voiceinator 5000<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;voice&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;voices&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Select A Voice<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;rate&quot;</span>&gt;</span>Rate:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rate&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;0.1&quot;</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pitch&quot;</span>&gt;</span>Pitch:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pitch&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;0.1&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>Hello! I love JavaScript 馃憤<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stop&quot;</span>&gt;</span>Stop!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;speak&quot;</span>&gt;</span>Speak<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Speech Synthesis<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;voiceinator&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>听说 5000<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;voice&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;voices&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Select A Voice<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;rate&quot;</span>&gt;</span>Rate:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rate&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;0.1&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pitch&quot;</span>&gt;</span>Pitch:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pitch&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;0.1&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>Hello! I love JavaScript 👍<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stop&quot;</span>&gt;</span>Stop!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;speak&quot;</span>&gt;</span>Speak<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> synth = <span class="hljs-built_in">window</span>.speechSynthesis;</span><br><span class="javascript">  <span class="hljs-keyword">let</span> voices = [];</span><br><span class="javascript">  <span class="hljs-keyword">const</span> msg = <span class="hljs-keyword">new</span> SpeechSynthesisUtterance();</span><br><span class="javascript">  <span class="hljs-keyword">const</span> voicesDropdown = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;[name=&quot;voice&quot;]&#x27;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">const</span> options = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;[type=&quot;range&quot;], [name=&quot;text&quot;]&#x27;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">const</span> speakButton = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#speak&#x27;</span>);</span><br><span class="javascript">  <span class="hljs-keyword">const</span> stopButton = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#stop&#x27;</span>);</span><br><span class="javascript">  msg.text = <span class="hljs-string">&#x27;你能说中文吗&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//获得浏览器支持的阅读语言并填充至下拉列表</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSupportVoice</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">  voices = synth.getVoices();</span><br><span class="javascript">  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; voices.length ; i++) &#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> option = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;option&#x27;</span>);</span><br><span class="javascript">    option.textContent = voices[i].name + <span class="hljs-string">&#x27; (&#x27;</span> + voices[i].lang + <span class="hljs-string">&#x27;)&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">if</span>(voices[i].default) &#123;</span><br><span class="javascript">      option.textContent += <span class="hljs-string">&#x27; -- DEFAULT&#x27;</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    option.setAttribute(<span class="hljs-string">&#x27;data-lang&#x27;</span>, voices[i].lang);</span><br><span class="javascript">    option.setAttribute(<span class="hljs-string">&#x27;data-name&#x27;</span>, voices[i].name);</span><br><span class="javascript">    voicesDropdown.appendChild(option);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//点击speak按钮时阅读文字</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">speak</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(voicesDropdown.value);</span><br><span class="javascript">  synth.speak(msg);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//阅读参数发生变化</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">paramChange</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">  msg[<span class="hljs-built_in">this</span>.name] = <span class="hljs-built_in">this</span>.value;</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name,<span class="hljs-built_in">this</span>.value);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//停止阅读</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stopSpeak</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">  synth.cancel();</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 事件绑定</span></span><br><span class="javascript">options.forEach(<span class="hljs-function"><span class="hljs-params">opt</span> =&gt;</span> opt.addEventListener(<span class="hljs-string">&#x27;change&#x27;</span>, paramChange));</span><br><span class="javascript">synth.addEventListener(<span class="hljs-string">&#x27;voiceschanged&#x27;</span>, getSupportVoice);<span class="hljs-comment">//经测试直接执行无效，须由事件触发</span></span><br><span class="javascript">speakButton.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, speak);</span><br><span class="javascript">stopButton.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, stopSpeak);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防抖/节流</title>
    <link href="/2021/06/26/06-26%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/"/>
    <url>/2021/06/26/06-26%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>防抖和节流是针对响应跟不上触发频率这类问题的两种解决方案。例如：滚动滚动条事件 onscroll，窗口大小改变事件 onresize onclick 防击穿，在实时检查输入时，如果我们绑定 onkeyup 事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发等 这些应用场景 我们都可以用上。</p><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>周期内多次触发事件，周期时间内动作只会执行一次，我们只是用最后一次的操作结果。使用定义 timeout 再次触发就清除之前的时间，取消之前的操作动作。 类似于，打游戏时的法师吟唱效果，有其他操作就会打断施法动作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc </span>函数防抖</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>func (function) 函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>wait (number) 延迟执行毫秒数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>immediate (boolean) true 表立即执行，false 表非立即执行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait = <span class="hljs-number">1000</span>, immediate</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> timeout<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> context = <span class="hljs-built_in">this</span><br>        <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span><br>        <span class="hljs-keyword">if</span> (timeout) <span class="hljs-built_in">clearTimeout</span>(timeout)<br>        <span class="hljs-keyword">if</span> (immediate) &#123;<br>            <span class="hljs-keyword">var</span> callNow = !timeout<br>            timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                timeout = <span class="hljs-literal">null</span><br>            &#125;, wait)<br>            <span class="hljs-keyword">if</span> (callNow) func.apply(context, args)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                func.apply(context, args)<br>            &#125;, wait)<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>连续高频触发事件时，动作会被定期执行，规定时间内，动作只执行一次，响应平滑。 类似于，打游戏时的普攻，无论我们点击再快，受到游戏数据影响，都只会规定的速度进行攻击</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"> * <span class="hljs-meta">@desc</span> 函数节流<br> * <span class="hljs-meta">@param</span> func (<span class="hljs-function"><span class="hljs-keyword">function</span>) 函数</span><br><span class="hljs-function"> * @<span class="hljs-title">param</span> <span class="hljs-title">wait</span> (<span class="hljs-params"><span class="hljs-built_in">number</span></span>) 延迟执行毫秒数</span><br><span class="hljs-function"> */</span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">func, wait</span>) </span>&#123;</span><br><span class="hljs-function">    <span class="hljs-title">var</span> <span class="hljs-title">timeout</span></span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> context = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span>;<br>        <span class="hljs-keyword">if</span> (!timeout) &#123;<br>            timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                timeout = <span class="hljs-literal">null</span>;<br>                func.apply(context, args)<br>            &#125;, wait)<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>顶</title>
    <link href="/2021/06/25/06-25%E9%A1%B6/"/>
    <url>/2021/06/25/06-25%E9%A1%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="MD-上手指南"><a href="#MD-上手指南" class="headerlink" title="MD 上手指南"></a>MD 上手指南</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标签 &gt; &lt;h1&gt;一级标签&lt;/h1&gt;<br>## 二级标签 &gt; &lt;h2&gt;一级标签&lt;/h2&gt;<br>### 三级标签 &gt; &lt;h3&gt;一级标签&lt;/h3&gt;<br>#### 四级标签 &gt; &lt;h4&gt;一级标签&lt;/h4&gt;<br>##### 五级标签 &gt; &lt;h5&gt;一级标签&lt;/h5&gt;<br></code></pre></td></tr></table></figure><h1 id="一级标签"><a href="#一级标签" class="headerlink" title="一级标签"></a>一级标签</h1><h2 id="二级标签"><a href="#二级标签" class="headerlink" title="二级标签"></a>二级标签</h2><h3 id="三级标签"><a href="#三级标签" class="headerlink" title="三级标签"></a>三级标签</h3><h4 id="四级标签"><a href="#四级标签" class="headerlink" title="四级标签"></a>四级标签</h4><h5 id="五级标签"><a href="#五级标签" class="headerlink" title="五级标签"></a>五级标签</h5><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序"><a href="#无序" class="headerlink" title="无序"></a>无序</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 1                             · 1<br><span class="hljs-bullet">+</span> 1            &gt; 预览            · 1<br><span class="hljs-bullet">-</span> 1                             · 1<br></code></pre></td></tr></table></figure><h4 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. 列表                            <span class="hljs-number">1</span>. 列表<br><span class="hljs-attribute">2</span>. 列表            &gt; 预览          <span class="hljs-number">2</span>. 列表<br><span class="hljs-attribute">3</span>. 列表                            <span class="hljs-number">3</span>. 列表<br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta">&gt;</span> <span class="javascript">这是一段引用数据</span><br></code></pre></td></tr></table></figure><blockquote><p>这是一段引用数据</p></blockquote><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">***</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><h3 id="超链接-图片"><a href="#超链接-图片" class="headerlink" title="超链接/图片"></a>超链接/图片</h3><p><code>[BG 超链接](/img/default.jpg)</code><br><a href="/img/1.jpg">BG 超链接</a></p><p><code>![BG图片](/img/default.jpg)</code><br><img src="/img/1.jpg" alt="BG图片"></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 项目        </span>|<span class="hljs-string"> 价格    </span>|<span class="hljs-string">  数量   </span>|<br>|<span class="hljs-string"> --------    </span>|<span class="hljs-string"> -----: </span>|<span class="hljs-string"> :----:  </span>|<br>|<span class="hljs-string"> 掉闹        </span>|<span class="hljs-string"> \$1600  </span>|<span class="hljs-string">   5    </span>|<br>|<span class="hljs-string"> 手机        </span>|<span class="hljs-string">   \$12  </span>|<span class="hljs-string">   12   </span>|<br>|<span class="hljs-string"> 鼠标        </span>|<span class="hljs-string">    \$1  </span>|<span class="hljs-string">   34   </span>|<br><br>: 是对齐方向<br></code></pre></td></tr></table></figure><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>掉闹</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>鼠标</td><td align="right">$1</td><td align="center">34</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>MD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
