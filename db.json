{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/img/1.jpg","path":"img/1.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/banner4.jpg","path":"img/banner4.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/banner3.jpg","path":"img/banner3.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/user.png","path":"img/user.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/wx-icon.jpg","path":"img/wx-icon.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/example/index.md","hash":"7e5e016f0dc4c2fdc42b83173f1d5dcd6b86bc45","modified":1627294168000},{"_id":"source/about/index.md","hash":"951f6e04d49f852d38f6de3a9830693ae54f8afb","modified":1627785070000},{"_id":"source/about/模板.md","hash":"2f330116fa3fc018f22a60f1be2d9b03a0e4c8af","modified":1627486632000},{"_id":"source/_posts/2021-06/06-26防抖节流.md","hash":"08a6aec2139bf16d5155a35de3a6e43a95d1fdf5","modified":1627707944000},{"_id":"source/_posts/2021-06/06-25顶.md","hash":"b0f143268bfd17cea23856da32079eb6b750419f","modified":1627707932000},{"_id":"source/_posts/2021-06/06-29阅读器.md","hash":"b67ed5f69e2c7959eceeb13c2d3ba198eca9ee93","modified":1627707976000},{"_id":"source/_posts/2021-07/07-02原生1.md","hash":"c043ed4d021068b2e7d7a3b5f80a8dddea1b7290","modified":1627723170000},{"_id":"source/_posts/2021-07/07-04websocket.md","hash":"240e9d09b48cdd459874d2a86c0df7fe7d60377e","modified":1627723340000},{"_id":"source/_posts/2021-07/07-09element校验.md","hash":"8653773d1952b88ae0c30b58073934172e87e2ec","modified":1627800930000},{"_id":"source/_posts/2021-07/07-16滚动产生图片.md","hash":"8760c3ef2076c33b65dde71c586287e3d60be40c","modified":1627800958000},{"_id":"source/_posts/2021-07/07-13Vue-mixins.md","hash":"617309af5291e7f30562c4443d530a2a2a7c59dd","modified":1628176560000},{"_id":"source/_posts/2021-07/07-22Vue指令学习.md","hash":"60bc7a983d4ac288da2d24546ae2e033fcbf73c5","modified":1627801028000},{"_id":"source/_posts/2021-07/07-19Vue过滤器.md","hash":"b75a789d85887887252a2ba2cd763df2935f9a9a","modified":1627800982000},{"_id":"source/_posts/2021-07/07-24Vue指令扩展学习.md","hash":"657fa19dd3732733e90775b54767fca10309e95d","modified":1627801024000},{"_id":"source/_posts/2021-07/07-26Vue组件响应式.md","hash":"c4d6fb8a1552f7c7eb2c17ea5720c8732fc1dfef","modified":1627804652000},{"_id":"source/_posts/2021-07/07-31动态异步组件.md","hash":"6e3fd41814f7c9f7ecc6035d9220e23d6fe3a449","modified":1627722810000},{"_id":"source/_posts/2021-07/07-30Vue插槽.md","hash":"ab7bf1fdf15093b83f31396bcf840afd4b35b1c4","modified":1628928394000},{"_id":"source/_posts/2021-08/08-05ifshow.md","hash":"1212edbd39f78dcce311ee8fee15fded7a4c95f4","modified":1628175110000},{"_id":"source/_posts/2021-08/08-01Vue深入响应式.md","hash":"0ae6bc9b0af7fd56e15bf1f2e14c36273b8176c4","modified":1628175114000},{"_id":"source/_posts/2021-08/08-09作用域.md","hash":"5e966cfee0db72cbc8fcfb33163f01f2b34fec90","modified":1628519486000},{"_id":"source/_posts/2021-08/08-11数据原理1 copy.md","hash":"c6926dd1414c6af33acf63960df0eaf392ad145d","modified":1629599016000},{"_id":"source/_posts/2021-08/08-15数据原理2 copy.md","hash":"23adaa26473d51b8f40b57ad0ea23c3c594d475b","modified":1629603022000},{"_id":"source/_posts/2021-08/08-17函数.md","hash":"10a38e707dae19e2519d5e99c353def3dc43c177","modified":1631020538000},{"_id":"source/_posts/2021-08/08-22数据原理3 copy.md","hash":"292e2386007523aed75f3594ed23752b4407392a","modified":1631021314000},{"_id":"source/_posts/2021-08/08-27响应原理1.md","hash":"cfa2f02ee51a1f4c412bbbe70f177c8503501889","modified":1631027716000},{"_id":"source/_posts/2021-09/vue数组的变异方法实现.md","hash":"34670e34493683fd8349b104637f2cd24692662e","modified":1639061572000},{"_id":"source/_posts/2021-10/10-25webpack配置学习1.md","hash":"c9c9f340a39fa26a19d84f46ee733336131500e9","modified":1639059720000},{"_id":"source/_posts/2021-10/10-28Tsѧϰ.md","hash":"6d54bbff0591bc2023150957d3fc356f0e9526f8","modified":1639059500000},{"_id":"source/_posts/2021-11/12-07认识node.md","hash":"2f330116fa3fc018f22a60f1be2d9b03a0e4c8af","modified":1639059088000},{"_id":"source/_posts/2021-12/12-06表单校验封装.md","hash":"a58f13d23f07749d9fdbcd4a981efc2d64498428","modified":1639059116000},{"_id":"source/_posts/2022-01/12-06表单校验封装.md","hash":"5a7b503659bbd660afd32d58857f94e8084b35a6","modified":1665647834523},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"themes/fluid/README.md","hash":"523b9db3801ca892124502c17d72864457cc4b21","modified":499162500000},{"_id":"themes/fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":499162500000},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":499162500000},{"_id":"themes/fluid/_config.yml","hash":"67b9354216c0e170736fb2625ac10612c41b546a","modified":1627784846000},{"_id":"themes/fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":499162500000},{"_id":"themes/fluid/package.json","hash":"35a2deaa55bd5c8f30683a0e44cbbf21737d53bd","modified":1627144432000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"themes/fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":499162500000},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":499162500000},{"_id":"themes/fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":499162500000},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":499162500000},{"_id":"themes/fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":499162500000},{"_id":"themes/fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":499162500000},{"_id":"themes/fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":499162500000},{"_id":"themes/fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":499162500000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"themes/fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":499162500000},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":499162500000},{"_id":"themes/fluid/languages/en.yml","hash":"dc112138a0f37a7030e9f6b2c5262923c357eda1","modified":1627146668000},{"_id":"themes/fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":499162500000},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":499162500000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":499162500000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":499162500000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":499162500000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":499162500000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":499162500000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":499162500000},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":499162500000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":499162500000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":499162500000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":499162500000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"248ecd01aead6e07ac1904a7b7c45395a922bcc7","modified":499162500000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":499162500000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":499162500000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":499162500000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":499162500000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"themes/fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":499162500000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":499162500000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":499162500000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":499162500000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":499162500000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":499162500000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":499162500000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":499162500000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"themes/fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"themes/fluid/source/img/wx-icon.jpg","hash":"e10d205e7810258efa7e60bde53251063a504fc7","modified":1627272928000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":499162500000},{"_id":"themes/fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":499162500000},{"_id":"themes/fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":499162500000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"themes/fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":499162500000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":499162500000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"themes/fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":499162500000},{"_id":"themes/fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":499162500000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":499162500000},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":499162500000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":499162500000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":499162500000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":499162500000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":499162500000},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":499162500000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":499162500000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":499162500000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":499162500000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":499162500000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":499162500000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":499162500000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":499162500000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":499162500000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"themes/fluid/source/img/banner4.jpg","hash":"2d438b37c1af8946579f272635b49418be3f9690","modified":1627293148000},{"_id":"themes/fluid/source/img/user.png","hash":"62e52da2d785e66548039a2094fd0f64a479a571","modified":1627272420000},{"_id":"themes/fluid/source/img/banner3.jpg","hash":"c7a483486bdff8002a6290c7e281e24520f07af4","modified":1627293198000},{"_id":"themes/fluid/source/img/1.jpg","hash":"11d6e8523749a3ab43884f51c2b778a6a4ce4abd","modified":1627145836000},{"_id":"public/local-search.xml","hash":"f63ead5e4345779a134666df0ddeb2d7a8ff7398","modified":1665742466184},{"_id":"public/example/index.html","hash":"93bff1404b8cae1f521f2e97a5d558c354ab1669","modified":1665742466184},{"_id":"public/about/index.html","hash":"82998a67c13ca5d10ad5c9683b8bee5945f7469f","modified":1665742466184},{"_id":"public/about/模板.html","hash":"3080fb96a862902b476fc8e629f534cd13152ea9","modified":1665742466184},{"_id":"public/2021/08/05/2021-08/08-05ifshow/index.html","hash":"939ac843fe73ac62c7238d52f07e0cc3e66045ec","modified":1665742466184},{"_id":"public/2021/06/28/2021-11/12-07认识node/index.html","hash":"4f09d92f26db6b2d96f60724ac2c1f4b0af1d00b","modified":1665742466184},{"_id":"public/archives/index.html","hash":"82188a72a646afba486d7e571ff272600c8d71e7","modified":1665742466184},{"_id":"public/2020/12/17/2021-08/08-17函数/index.html","hash":"b42811add689c4fe1dfa5223e49b088daf85f49d","modified":1665742466184},{"_id":"public/archives/page/2/index.html","hash":"91a37c13209435219f6ad85001ab59e8f3b42fde","modified":1665742466184},{"_id":"public/archives/page/3/index.html","hash":"4ce2143de0ce5189582fc7976b1c974de0b1e5ec","modified":1665742466184},{"_id":"public/archives/2020/index.html","hash":"9fc0cf6cd368391dcac6cebcc2114e06aedfa7e8","modified":1665742466184},{"_id":"public/archives/2020/12/index.html","hash":"9fc0cf6cd368391dcac6cebcc2114e06aedfa7e8","modified":1665742466184},{"_id":"public/archives/2021/index.html","hash":"6dced1d431ba68e9abfe04f7e93d595ef2743000","modified":1665742466184},{"_id":"public/archives/2021/page/2/index.html","hash":"4c8137d4be9e7e42fbaa2c2d71bb6d064c229f29","modified":1665742466184},{"_id":"public/archives/2021/page/3/index.html","hash":"74aa9e1fc9a70f522c7b5e7cd588dff7c980b217","modified":1665742466184},{"_id":"public/archives/2021/06/index.html","hash":"7b34e16b25c9de056e53bd91ad8a7080b5609b5c","modified":1665742466184},{"_id":"public/archives/2021/07/index.html","hash":"5edfacf4ba4e4cf87d5f87d1a56cfeecf307cc1b","modified":1665742466184},{"_id":"public/archives/2021/07/page/2/index.html","hash":"0f58416a774d8eae75c94268202b6c7eee95f6d1","modified":1665742466184},{"_id":"public/archives/2021/08/index.html","hash":"cdb163cf67c24510e6b294403057e23400741c18","modified":1665742466184},{"_id":"public/archives/2021/09/index.html","hash":"4ffb050ed409be5df83a3cab2198642f1ea87a65","modified":1665742466184},{"_id":"public/archives/2021/10/index.html","hash":"5780f1c781d2ffd4f6a3f8451509b38a7289e597","modified":1665742466184},{"_id":"public/archives/2021/12/index.html","hash":"c0be8c308ff4f5f094120052632af735e65d5fe0","modified":1665742466184},{"_id":"public/archives/2022/index.html","hash":"51a07e59463045b3619fa1a45b5ff155f7ae4d7b","modified":1665742466184},{"_id":"public/archives/2022/10/index.html","hash":"51a07e59463045b3619fa1a45b5ff155f7ae4d7b","modified":1665742466184},{"_id":"public/categories/JavaScript/index.html","hash":"dd30893e458adf44e79d265e55a42799027fcf2d","modified":1665742466184},{"_id":"public/categories/JavaScript/page/2/index.html","hash":"0aca7436d66a29d84318b019ca247f493791d887","modified":1665742466184},{"_id":"public/categories/MD/index.html","hash":"65aa35dea4dba39d5794ed5094267b397ce1af8f","modified":1665742466184},{"_id":"public/categories/Element-UI/index.html","hash":"8d7261a3fc4928d4d5994ef10617ef6a99483b7e","modified":1665742466184},{"_id":"public/categories/Vue/index.html","hash":"0f99aaff877f6e8ef058ceff0eca694a31c9413b","modified":1665742466184},{"_id":"public/categories/Vue/page/2/index.html","hash":"5656e7d8d2b4323ca0b435c57568dfb95c906b0c","modified":1665742466184},{"_id":"public/categories/webpack/index.html","hash":"f58e58c75db2b198a31b9b1456eff149b485b240","modified":1665742466184},{"_id":"public/tags/工具函数/index.html","hash":"285b61f59466e77b53ee1aa0e1145bb0bdf801c3","modified":1665742466184},{"_id":"public/tags/配置/index.html","hash":"cd75461bdc5d4ab19bd702571ad7f75764c0e60b","modified":1665742466184},{"_id":"public/tags/原生/index.html","hash":"cc0b5ca6acdbbff50e8b11f8ceba89e1c8d00cda","modified":1665742466184},{"_id":"public/tags/原生/page/2/index.html","hash":"6970739fe51e86d1457f1f9b0a2e2f49cc0c2b55","modified":1665742466184},{"_id":"public/tags/webSocket/index.html","hash":"65abb915115e5292f6760ad656d51c17bca0ecb9","modified":1665742466184},{"_id":"public/tags/校验方式/index.html","hash":"db3f7576db3886ec24e37c3fc0a23726a60a2612","modified":1665742466184},{"_id":"public/tags/Vue/index.html","hash":"36d8183fd74ce9815ac4531fa041298ea8c01a08","modified":1665742466184},{"_id":"public/tags/Vue/page/2/index.html","hash":"e8ae19cbe9a31f897868bfd401eeb29159ede4fa","modified":1665742466184},{"_id":"public/tags/vue/index.html","hash":"3379866900f30928a520b0820d192817e9a01f03","modified":1665742466184},{"_id":"public/404.html","hash":"dd97f75613d48fe3aa38482a6a0e36260610a466","modified":1665742466184},{"_id":"public/tags/index.html","hash":"f6a8551e6bba031269122a6094e79ad0ed7b63e6","modified":1665742466184},{"_id":"public/links/index.html","hash":"f7d8dc43168f342b0089d00d6880967595c767f4","modified":1665742466184},{"_id":"public/2022/10/06/2022-01/12-06表单校验封装/index.html","hash":"4733d057cfeceeb97daa0feb3f3f87f4a8684068","modified":1665742466184},{"_id":"public/2021/12/06/2021-12/12-06表单校验封装/index.html","hash":"517817313080254e7e11cce9c9337ac7e6c524f5","modified":1665742466184},{"_id":"public/2021/10/28/2021-10/10-28Tsѧϰ/index.html","hash":"aabdffaf300b3f64b66c412508993f3bc56bd1f4","modified":1665742466184},{"_id":"public/2021/10/25/2021-10/10-25webpack配置学习1/index.html","hash":"4862a88a9b022c5e82f7b943b975011beeaa8692","modified":1665742466184},{"_id":"public/2021/09/02/2021-09/vue数组的变异方法实现/index.html","hash":"ff17f5d29f6d3ecd96f048e245885e2b5614ea8c","modified":1665742466184},{"_id":"public/2021/08/27/2021-08/08-27响应原理1/index.html","hash":"888f4f1e10a59f496b4e48d2ea5d867791101f00","modified":1665742466184},{"_id":"public/2021/08/22/2021-08/08-22数据原理3 copy/index.html","hash":"4a27134e8b50d55801b6558375af530bb48df691","modified":1665742466184},{"_id":"public/2021/08/15/2021-08/08-15数据原理2 copy/index.html","hash":"dc0c6f517a68c2ae63c6db97947a96650d164494","modified":1665742466184},{"_id":"public/2021/08/11/2021-08/08-11数据原理1 copy/index.html","hash":"2efccac10fe341561699c2865af54ab2c70a305f","modified":1665742466184},{"_id":"public/2021/08/09/2021-08/08-09作用域/index.html","hash":"7012abc5c9064d366ae5f96074653216c1138b37","modified":1665742466184},{"_id":"public/2021/08/01/2021-08/08-01Vue深入响应式/index.html","hash":"d696095abebcd07ec63c73de3cf1317a7738509d","modified":1665742466184},{"_id":"public/2021/07/31/2021-07/07-31动态异步组件/index.html","hash":"89be8cde3eccc771149f0eced7ca5fc555a70cb3","modified":1665742466184},{"_id":"public/2021/07/30/2021-07/07-30Vue插槽/index.html","hash":"798dbfbcfa046d68c603c0ed6c46625ebf0d6a73","modified":1665742466184},{"_id":"public/2021/07/26/2021-07/07-26Vue组件响应式/index.html","hash":"b092a1405bcf2c7b152a0f1add05e41e230efd3e","modified":1665742466184},{"_id":"public/2021/07/24/2021-07/07-24Vue指令扩展学习/index.html","hash":"4db14965b3139ace5045cde63f73a4e3402d8f10","modified":1665742466184},{"_id":"public/2021/07/22/2021-07/07-22Vue指令学习/index.html","hash":"4c3a228a8f8a9c10b496841c74cb59bf83253245","modified":1665742466184},{"_id":"public/2021/07/19/2021-07/07-19Vue过滤器/index.html","hash":"cc766a406728e7d4cb445d9aa7b8ef0f7b829cfb","modified":1665742466184},{"_id":"public/2021/07/16/2021-07/07-16滚动产生图片/index.html","hash":"e806385b65aad931442a6bb3dfa8e878b59ff8e4","modified":1665742466184},{"_id":"public/2021/07/13/2021-07/07-13Vue-mixins/index.html","hash":"540e1d4d2b7ea247fd74b465e35009e22a271779","modified":1665742466184},{"_id":"public/2021/07/09/2021-07/07-09element校验/index.html","hash":"4cd472e7b8a6ec8eb625ee5d675cc398ad326e4e","modified":1665742466184},{"_id":"public/2021/07/04/2021-07/07-04websocket/index.html","hash":"d1e8fc2f428b1e04ed75c40453da29aa18f44f29","modified":1665742466184},{"_id":"public/2021/07/02/2021-07/07-02原生1/index.html","hash":"b4f2ae54a553a217a6b33f969aeced27e0f90b43","modified":1665742466184},{"_id":"public/2021/06/29/2021-06/06-29阅读器/index.html","hash":"2e7f94fe174fbd96fd5156678e75c37838b75336","modified":1665742466184},{"_id":"public/2021/06/26/2021-06/06-26防抖节流/index.html","hash":"33ff16314793bedae997f81e45adff66ef165cca","modified":1665742466184},{"_id":"public/2021/06/25/2021-06/06-25顶/index.html","hash":"c28ef21d8d2815238f982d8586be9571bd4eee1f","modified":1665742466184},{"_id":"public/index.html","hash":"02df4d63f306057d640223aae1718c66090b7c4c","modified":1665742466184},{"_id":"public/page/2/index.html","hash":"a4e993cd66763852be8ab938c7540580d207178b","modified":1665742466184},{"_id":"public/page/3/index.html","hash":"dd63ff841ac5e9039d54363f214416b01c9fd7b2","modified":1665742466184},{"_id":"public/categories/index.html","hash":"359cf4bf378992a7a9aa424b292e8eb4c98bbdb2","modified":1665742466184},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1665742466184},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1665742466184},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1665742466184},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1665742466184},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1665742466184},{"_id":"public/img/wx-icon.jpg","hash":"e10d205e7810258efa7e60bde53251063a504fc7","modified":1665742466184},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1665742466184},{"_id":"public/img/banner4.jpg","hash":"2d438b37c1af8946579f272635b49418be3f9690","modified":1665742466184},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1665742466184},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1665742466184},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1665742466184},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1665742466184},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1665742466184},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1665742466184},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1665742466184},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1665742466184},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1665742466184},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1665742466184},{"_id":"public/css/main.css","hash":"be9a0652de06d61fa26f4b4128b29bcc5a4a0ad7","modified":1665742466184},{"_id":"public/img/user.png","hash":"62e52da2d785e66548039a2094fd0f64a479a571","modified":1665742466184},{"_id":"public/img/banner3.jpg","hash":"c7a483486bdff8002a6290c7e281e24520f07af4","modified":1665742466184},{"_id":"public/img/1.jpg","hash":"11d6e8523749a3ab43884f51c2b778a6a4ce4abd","modified":1665742466184}],"Category":[{"name":"JavaScript","_id":"cl98c210n0004f60cho6zb9n0"},{"name":"MD","_id":"cl98c210u000af60ca577gnfv"},{"name":"Element UI","_id":"cl98c2110000mf60cbad35a4b"},{"name":"Vue","_id":"cl98c2114000vf60c447g86mb"},{"name":"webpack","_id":"cl98c211h0026f60c176e2v1m"}],"Data":[],"Page":[{"title":"页面","date":"2021-07-26T10:06:47.000Z","_content":"\n<div class=\"markdown-body\">\n正文\n</div>\n","source":"example/index.md","raw":"---\ntitle: 页面\ndate: 2021-07-26 18:06:47\n---\n\n<div class=\"markdown-body\">\n正文\n</div>\n","updated":"2021-07-26T10:09:28.000Z","path":"example/index.html","comments":1,"layout":"page","_id":"cl98c210e0000f60c96yrfis5","content":"<div class=\"markdown-body\">\n正文\n</div>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"markdown-body\">\n正文\n</div>\n"},{"title":"个人信息","layout":"about","date":"2021-06-26T03:28:10.000Z","_content":"\n#### 只是博主的笔记，概不支持评论。错误不对的地方，可 QQ 联系 ，欢迎批评指正。\n\n> 移动端适配不太好~欢迎使用 Pc 端访问\n","source":"about/index.md","raw":"---\ntitle: 个人信息\nlayout: about\ndate: 2021-06-26 11:28:10\n---\n\n#### 只是博主的笔记，概不支持评论。错误不对的地方，可 QQ 联系 ，欢迎批评指正。\n\n> 移动端适配不太好~欢迎使用 Pc 端访问\n","updated":"2021-08-01T02:31:10.000Z","path":"about/index.html","comments":1,"_id":"cl98c210l0002f60c2zdsefu5","content":"<h4 id=\"只是博主的笔记，概不支持评论。错误不对的地方，可-QQ-联系-，欢迎批评指正。\"><a href=\"#只是博主的笔记，概不支持评论。错误不对的地方，可-QQ-联系-，欢迎批评指正。\" class=\"headerlink\" title=\"只是博主的笔记，概不支持评论。错误不对的地方，可 QQ 联系 ，欢迎批评指正。\"></a>只是博主的笔记，概不支持评论。错误不对的地方，可 QQ 联系 ，欢迎批评指正。</h4><blockquote>\n<p>移动端适配不太好~欢迎使用 Pc 端访问</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"只是博主的笔记，概不支持评论。错误不对的地方，可-QQ-联系-，欢迎批评指正。\"><a href=\"#只是博主的笔记，概不支持评论。错误不对的地方，可-QQ-联系-，欢迎批评指正。\" class=\"headerlink\" title=\"只是博主的笔记，概不支持评论。错误不对的地方，可 QQ 联系 ，欢迎批评指正。\"></a>只是博主的笔记，概不支持评论。错误不对的地方，可 QQ 联系 ，欢迎批评指正。</h4><blockquote>\n<p>移动端适配不太好~欢迎使用 Pc 端访问</p>\n</blockquote>\n"},{"title":"模板","date":"2021-06-28T13:27:28.000Z","tags":"原生","category":"JavaScript","_content":"\n### 实现效果\n\n浏览文本，当即将浏览到图片时，进行加载动画。\n\n#### 主要\n\n> css 部分\n\n-   scale 控制图片缩放\n-   translateX 来控制左右移动\n\n> js 部分\n\n-   window.scrolly 纵向滚动距离\n-   window.innerHeight viewport 部分高度\n-   el.height 节点的高度\n-   el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口\n\n> `debounce` 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。\n\n### 在线地址\n\n### 初始代码\n\n### 实例代码\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","source":"about/模板.md","raw":"---\ntitle: 模板\ndate: 2021-06-28 21:27:28\ntags: 原生\ncategory: JavaScript\n---\n\n### 实现效果\n\n浏览文本，当即将浏览到图片时，进行加载动画。\n\n#### 主要\n\n> css 部分\n\n-   scale 控制图片缩放\n-   translateX 来控制左右移动\n\n> js 部分\n\n-   window.scrolly 纵向滚动距离\n-   window.innerHeight viewport 部分高度\n-   el.height 节点的高度\n-   el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口\n\n> `debounce` 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。\n\n### 在线地址\n\n### 初始代码\n\n### 实例代码\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","updated":"2021-07-28T15:37:12.000Z","path":"about/模板.html","comments":1,"layout":"page","_id":"cl98c210q0006f60cefsue1wu","content":"<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h3><p>浏览文本，当即将浏览到图片时，进行加载动画。</p>\n<h4 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h4><blockquote>\n<p>css 部分</p>\n</blockquote>\n<ul>\n<li>  scale 控制图片缩放</li>\n<li>  translateX 来控制左右移动</li>\n</ul>\n<blockquote>\n<p>js 部分</p>\n</blockquote>\n<ul>\n<li>  window.scrolly 纵向滚动距离</li>\n<li>  window.innerHeight viewport 部分高度</li>\n<li>  el.height 节点的高度</li>\n<li>  el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口</li>\n</ul>\n<blockquote>\n<p><code>debounce</code> 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。</p>\n</blockquote>\n<h3 id=\"在线地址\"><a href=\"#在线地址\" class=\"headerlink\" title=\"在线地址\"></a>在线地址</h3><h3 id=\"初始代码\"><a href=\"#初始代码\" class=\"headerlink\" title=\"初始代码\"></a>初始代码</h3><h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h3><p>浏览文本，当即将浏览到图片时，进行加载动画。</p>\n<h4 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h4><blockquote>\n<p>css 部分</p>\n</blockquote>\n<ul>\n<li>  scale 控制图片缩放</li>\n<li>  translateX 来控制左右移动</li>\n</ul>\n<blockquote>\n<p>js 部分</p>\n</blockquote>\n<ul>\n<li>  window.scrolly 纵向滚动距离</li>\n<li>  window.innerHeight viewport 部分高度</li>\n<li>  el.height 节点的高度</li>\n<li>  el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口</li>\n</ul>\n<blockquote>\n<p><code>debounce</code> 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。</p>\n</blockquote>\n<h3 id=\"在线地址\"><a href=\"#在线地址\" class=\"headerlink\" title=\"在线地址\"></a>在线地址</h3><h3 id=\"初始代码\"><a href=\"#初始代码\" class=\"headerlink\" title=\"初始代码\"></a>初始代码</h3><h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"}],"Post":[{"title":"防抖/节流","date":"2021-06-26T01:59:15.000Z","_content":"\n## 前言\n\n防抖和节流是针对响应跟不上触发频率这类问题的两种解决方案。例如：滚动滚动条事件 onscroll，窗口大小改变事件 onresize onclick 防击穿，在实时检查输入时，如果我们绑定 onkeyup 事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发等 这些应用场景 我们都可以用上。\n\n### 防抖\n\n周期内多次触发事件，周期时间内动作只会执行一次，我们只是用最后一次的操作结果。使用定义 timeout 再次触发就清除之前的时间，取消之前的操作动作。 类似于，打游戏时的法师吟唱效果，有其他操作就会打断施法动作。\n\n```\n/**\n * @desc 函数防抖\n * @param func (function) 函数\n * @param wait (number) 延迟执行毫秒数\n * @param immediate (boolean) true 表立即执行，false 表非立即执行\n */\nfunction debounce(func, wait = 1000, immediate) {\n    var timeout\n    return function() {\n        var context = this\n        var args = arguments\n        if (timeout) clearTimeout(timeout)\n        if (immediate) {\n            var callNow = !timeout\n            timeout = setTimeout(function() {\n                timeout = null\n            }, wait)\n            if (callNow) func.apply(context, args)\n        } else {\n            timeout = setTimeout(function() {\n                func.apply(context, args)\n            }, wait)\n        }\n    }\n}\n\n```\n\n### 节流\n\n连续高频触发事件时，动作会被定期执行，规定时间内，动作只执行一次，响应平滑。 类似于，打游戏时的普攻，无论我们点击再快，受到游戏数据影响，都只会规定的速度进行攻击\n\n```\n * @desc 函数节流\n * @param func (function) 函数\n * @param wait (number) 延迟执行毫秒数\n */\nfunction throttle(func, wait) {\n    var timeout;\n    return function () {\n        var context = this;\n        var args = arguments;\n        if (!timeout) {\n            timeout = setTimeout(function () {\n                timeout = null;\n                func.apply(context, args)\n            }, wait)\n        }\n\n    }\n}\n```\n","source":"_posts/2021-06/06-26防抖节流.md","raw":"---\ntitle: 防抖/节流\ndate: 2021-06-26 09:59:15\ntags: 工具函数\ncategory: JavaScript\n---\n\n## 前言\n\n防抖和节流是针对响应跟不上触发频率这类问题的两种解决方案。例如：滚动滚动条事件 onscroll，窗口大小改变事件 onresize onclick 防击穿，在实时检查输入时，如果我们绑定 onkeyup 事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发等 这些应用场景 我们都可以用上。\n\n### 防抖\n\n周期内多次触发事件，周期时间内动作只会执行一次，我们只是用最后一次的操作结果。使用定义 timeout 再次触发就清除之前的时间，取消之前的操作动作。 类似于，打游戏时的法师吟唱效果，有其他操作就会打断施法动作。\n\n```\n/**\n * @desc 函数防抖\n * @param func (function) 函数\n * @param wait (number) 延迟执行毫秒数\n * @param immediate (boolean) true 表立即执行，false 表非立即执行\n */\nfunction debounce(func, wait = 1000, immediate) {\n    var timeout\n    return function() {\n        var context = this\n        var args = arguments\n        if (timeout) clearTimeout(timeout)\n        if (immediate) {\n            var callNow = !timeout\n            timeout = setTimeout(function() {\n                timeout = null\n            }, wait)\n            if (callNow) func.apply(context, args)\n        } else {\n            timeout = setTimeout(function() {\n                func.apply(context, args)\n            }, wait)\n        }\n    }\n}\n\n```\n\n### 节流\n\n连续高频触发事件时，动作会被定期执行，规定时间内，动作只执行一次，响应平滑。 类似于，打游戏时的普攻，无论我们点击再快，受到游戏数据影响，都只会规定的速度进行攻击\n\n```\n * @desc 函数节流\n * @param func (function) 函数\n * @param wait (number) 延迟执行毫秒数\n */\nfunction throttle(func, wait) {\n    var timeout;\n    return function () {\n        var context = this;\n        var args = arguments;\n        if (!timeout) {\n            timeout = setTimeout(function () {\n                timeout = null;\n                func.apply(context, args)\n            }, wait)\n        }\n\n    }\n}\n```\n","slug":"2021-06/06-26防抖节流","published":1,"updated":"2021-07-31T05:05:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c210h0001f60c8rvm8z5j","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>防抖和节流是针对响应跟不上触发频率这类问题的两种解决方案。例如：滚动滚动条事件 onscroll，窗口大小改变事件 onresize onclick 防击穿，在实时检查输入时，如果我们绑定 onkeyup 事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发等 这些应用场景 我们都可以用上。</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>周期内多次触发事件，周期时间内动作只会执行一次，我们只是用最后一次的操作结果。使用定义 timeout 再次触发就清除之前的时间，取消之前的操作动作。 类似于，打游戏时的法师吟唱效果，有其他操作就会打断施法动作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@desc</span> 函数防抖</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> func (function) 函数</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> wait (number) 延迟执行毫秒数</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> immediate (boolean) true 表立即执行，false 表非立即执行</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span>(<span class=\"hljs-params\">func, wait = <span class=\"hljs-number\">1000</span>, immediate</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> timeout<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-variable language_\">this</span><br>        <span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-variable language_\">arguments</span><br>        <span class=\"hljs-keyword\">if</span> (timeout) <span class=\"hljs-built_in\">clearTimeout</span>(timeout)<br>        <span class=\"hljs-keyword\">if</span> (immediate) &#123;<br>            <span class=\"hljs-keyword\">var</span> callNow = !timeout<br>            timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>                timeout = <span class=\"hljs-literal\">null</span><br>            &#125;, wait)<br>            <span class=\"hljs-keyword\">if</span> (callNow) func.<span class=\"hljs-title function_\">apply</span>(context, args)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>                func.<span class=\"hljs-title function_\">apply</span>(context, args)<br>            &#125;, wait)<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>连续高频触发事件时，动作会被定期执行，规定时间内，动作只执行一次，响应平滑。 类似于，打游戏时的普攻，无论我们点击再快，受到游戏数据影响，都只会规定的速度进行攻击</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"> * <span class=\"hljs-meta\">@desc</span> 函数节流<br> * <span class=\"hljs-meta\">@param</span> func (<span class=\"hljs-keyword\">function</span>) 函数<br> * <span class=\"hljs-meta\">@param</span> wait (<span class=\"hljs-built_in\">number</span>) 延迟执行毫秒数<br> */<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">func, wait</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> timeout;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-variable language_\">this</span>;<br>        <span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-variable language_\">arguments</span>;<br>        <span class=\"hljs-keyword\">if</span> (!timeout) &#123;<br>            timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>                timeout = <span class=\"hljs-literal\">null</span>;<br>                func.<span class=\"hljs-title function_\">apply</span>(context, args)<br>            &#125;, wait)<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>防抖和节流是针对响应跟不上触发频率这类问题的两种解决方案。例如：滚动滚动条事件 onscroll，窗口大小改变事件 onresize onclick 防击穿，在实时检查输入时，如果我们绑定 onkeyup 事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发等 这些应用场景 我们都可以用上。</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>周期内多次触发事件，周期时间内动作只会执行一次，我们只是用最后一次的操作结果。使用定义 timeout 再次触发就清除之前的时间，取消之前的操作动作。 类似于，打游戏时的法师吟唱效果，有其他操作就会打断施法动作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@desc</span> 函数防抖</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> func (function) 函数</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> wait (number) 延迟执行毫秒数</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> immediate (boolean) true 表立即执行，false 表非立即执行</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span>(<span class=\"hljs-params\">func, wait = <span class=\"hljs-number\">1000</span>, immediate</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> timeout<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-variable language_\">this</span><br>        <span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-variable language_\">arguments</span><br>        <span class=\"hljs-keyword\">if</span> (timeout) <span class=\"hljs-built_in\">clearTimeout</span>(timeout)<br>        <span class=\"hljs-keyword\">if</span> (immediate) &#123;<br>            <span class=\"hljs-keyword\">var</span> callNow = !timeout<br>            timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>                timeout = <span class=\"hljs-literal\">null</span><br>            &#125;, wait)<br>            <span class=\"hljs-keyword\">if</span> (callNow) func.<span class=\"hljs-title function_\">apply</span>(context, args)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>                func.<span class=\"hljs-title function_\">apply</span>(context, args)<br>            &#125;, wait)<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>连续高频触发事件时，动作会被定期执行，规定时间内，动作只执行一次，响应平滑。 类似于，打游戏时的普攻，无论我们点击再快，受到游戏数据影响，都只会规定的速度进行攻击</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"> * <span class=\"hljs-meta\">@desc</span> 函数节流<br> * <span class=\"hljs-meta\">@param</span> func (<span class=\"hljs-keyword\">function</span>) 函数<br> * <span class=\"hljs-meta\">@param</span> wait (<span class=\"hljs-built_in\">number</span>) 延迟执行毫秒数<br> */<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">func, wait</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> timeout;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-variable language_\">this</span>;<br>        <span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-variable language_\">arguments</span>;<br>        <span class=\"hljs-keyword\">if</span> (!timeout) &#123;<br>            timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>                timeout = <span class=\"hljs-literal\">null</span>;<br>                func.<span class=\"hljs-title function_\">apply</span>(context, args)<br>            &#125;, wait)<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"顶","date":"2021-06-25T13:19:01.000Z","_content":"\n# MD 上手指南\n\n```\n# 一级标签 > <h1>一级标签</h1>\n## 二级标签 > <h2>一级标签</h2>\n### 三级标签 > <h3>一级标签</h3>\n#### 四级标签 > <h4>一级标签</h4>\n##### 五级标签 > <h5>一级标签</h5>\n```\n\n# 一级标签\n\n## 二级标签\n\n### 三级标签\n\n#### 四级标签\n\n##### 五级标签\n\n### 列表\n\n#### 无序\n\n```\n* 1                             · 1\n+ 1            > 预览            · 1\n- 1                             · 1\n```\n\n#### 有序\n\n```\n1. 列表                            1. 列表\n2. 列表            > 预览          2. 列表\n3. 列表                            3. 列表\n```\n\n### 引用\n\n```\n> 这是一段引用数据\n```\n\n> 这是一段引用数据\n\n### 分割线\n\n```\n***\n---\n```\n\n### 超链接/图片\n\n`[BG 超链接](/img/default.jpg)`\n[BG 超链接](/img/1.jpg)\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n\n### 表格\n\n```\n| 项目        | 价格    |  数量   |\n| --------    | -----: | :----:  |\n| 掉闹        | \\$1600  |   5    |\n| 手机        |   \\$12  |   12   |\n| 鼠标        |    \\$1  |   34   |\n\n: 是对齐方向\n```\n\n| 项目 |   价格 | 数量 |\n| ---- | -----: | :--: |\n| 掉闹 | \\$1600 |  5   |\n| 手机 |   \\$12 |  12  |\n| 鼠标 |    \\$1 |  34  |\n","source":"_posts/2021-06/06-25顶.md","raw":"---\ntitle: 顶\ndate: 2021-06-25 21:19:01\ntags: 配置\ncategory: MD\n---\n\n# MD 上手指南\n\n```\n# 一级标签 > <h1>一级标签</h1>\n## 二级标签 > <h2>一级标签</h2>\n### 三级标签 > <h3>一级标签</h3>\n#### 四级标签 > <h4>一级标签</h4>\n##### 五级标签 > <h5>一级标签</h5>\n```\n\n# 一级标签\n\n## 二级标签\n\n### 三级标签\n\n#### 四级标签\n\n##### 五级标签\n\n### 列表\n\n#### 无序\n\n```\n* 1                             · 1\n+ 1            > 预览            · 1\n- 1                             · 1\n```\n\n#### 有序\n\n```\n1. 列表                            1. 列表\n2. 列表            > 预览          2. 列表\n3. 列表                            3. 列表\n```\n\n### 引用\n\n```\n> 这是一段引用数据\n```\n\n> 这是一段引用数据\n\n### 分割线\n\n```\n***\n---\n```\n\n### 超链接/图片\n\n`[BG 超链接](/img/default.jpg)`\n[BG 超链接](/img/1.jpg)\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n\n### 表格\n\n```\n| 项目        | 价格    |  数量   |\n| --------    | -----: | :----:  |\n| 掉闹        | \\$1600  |   5    |\n| 手机        |   \\$12  |   12   |\n| 鼠标        |    \\$1  |   34   |\n\n: 是对齐方向\n```\n\n| 项目 |   价格 | 数量 |\n| ---- | -----: | :--: |\n| 掉闹 | \\$1600 |  5   |\n| 手机 |   \\$12 |  12  |\n| 鼠标 |    \\$1 |  34  |\n","slug":"2021-06/06-25顶","published":1,"updated":"2021-07-31T05:05:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c210l0003f60c3mzg82zq","content":"<h1 id=\"MD-上手指南\"><a href=\"#MD-上手指南\" class=\"headerlink\" title=\"MD 上手指南\"></a>MD 上手指南</h1><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"># 一级标签 &gt; &lt;h1&gt;一级标签&lt;/h1&gt;<br>## 二级标签 &gt; &lt;h2&gt;一级标签&lt;/h2&gt;<br>### 三级标签 &gt; &lt;h3&gt;一级标签&lt;/h3&gt;<br>#### 四级标签 &gt; &lt;h4&gt;一级标签&lt;/h4&gt;<br>##### 五级标签 &gt; &lt;h5&gt;一级标签&lt;/h5&gt;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"一级标签\"><a href=\"#一级标签\" class=\"headerlink\" title=\"一级标签\"></a>一级标签</h1><h2 id=\"二级标签\"><a href=\"#二级标签\" class=\"headerlink\" title=\"二级标签\"></a>二级标签</h2><h3 id=\"三级标签\"><a href=\"#三级标签\" class=\"headerlink\" title=\"三级标签\"></a>三级标签</h3><h4 id=\"四级标签\"><a href=\"#四级标签\" class=\"headerlink\" title=\"四级标签\"></a>四级标签</h4><h5 id=\"五级标签\"><a href=\"#五级标签\" class=\"headerlink\" title=\"五级标签\"></a>五级标签</h5><h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><h4 id=\"无序\"><a href=\"#无序\" class=\"headerlink\" title=\"无序\"></a>无序</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">*</span> 1                             · 1<br><span class=\"hljs-bullet\">+</span> 1            &gt; 预览            · 1<br><span class=\"hljs-bullet\">-</span> 1                             · 1<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"有序\"><a href=\"#有序\" class=\"headerlink\" title=\"有序\"></a>有序</h4><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">1</span>. 列表                            <span class=\"hljs-number\">1</span>. 列表<br><span class=\"hljs-attribute\">2</span>. 列表            &gt; 预览          <span class=\"hljs-number\">2</span>. 列表<br><span class=\"hljs-attribute\">3</span>. 列表                            <span class=\"hljs-number\">3</span>. 列表<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">这是一段引用数据</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这是一段引用数据</p>\n</blockquote>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-section\">***</span><br><span class=\"hljs-section\">---</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"超链接-图片\"><a href=\"#超链接-图片\" class=\"headerlink\" title=\"超链接/图片\"></a>超链接/图片</h3><p><code>[BG 超链接](/img/default.jpg)</code><br><a href=\"/img/1.jpg\">BG 超链接</a></p>\n<p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">|<span class=\"hljs-string\"> 项目        </span>|<span class=\"hljs-string\"> 价格    </span>|<span class=\"hljs-string\">  数量   </span>|<br>|<span class=\"hljs-string\"> --------    </span>|<span class=\"hljs-string\"> -----: </span>|<span class=\"hljs-string\"> :----:  </span>|<br>|<span class=\"hljs-string\"> 掉闹        </span>|<span class=\"hljs-string\"> \\$1600  </span>|<span class=\"hljs-string\">   5    </span>|<br>|<span class=\"hljs-string\"> 手机        </span>|<span class=\"hljs-string\">   \\$12  </span>|<span class=\"hljs-string\">   12   </span>|<br>|<span class=\"hljs-string\"> 鼠标        </span>|<span class=\"hljs-string\">    \\$1  </span>|<span class=\"hljs-string\">   34   </span>|<br><br>: 是对齐方向<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>掉闹</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>鼠标</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">34</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MD-上手指南\"><a href=\"#MD-上手指南\" class=\"headerlink\" title=\"MD 上手指南\"></a>MD 上手指南</h1><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"># 一级标签 &gt; &lt;h1&gt;一级标签&lt;/h1&gt;<br>## 二级标签 &gt; &lt;h2&gt;一级标签&lt;/h2&gt;<br>### 三级标签 &gt; &lt;h3&gt;一级标签&lt;/h3&gt;<br>#### 四级标签 &gt; &lt;h4&gt;一级标签&lt;/h4&gt;<br>##### 五级标签 &gt; &lt;h5&gt;一级标签&lt;/h5&gt;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"一级标签\"><a href=\"#一级标签\" class=\"headerlink\" title=\"一级标签\"></a>一级标签</h1><h2 id=\"二级标签\"><a href=\"#二级标签\" class=\"headerlink\" title=\"二级标签\"></a>二级标签</h2><h3 id=\"三级标签\"><a href=\"#三级标签\" class=\"headerlink\" title=\"三级标签\"></a>三级标签</h3><h4 id=\"四级标签\"><a href=\"#四级标签\" class=\"headerlink\" title=\"四级标签\"></a>四级标签</h4><h5 id=\"五级标签\"><a href=\"#五级标签\" class=\"headerlink\" title=\"五级标签\"></a>五级标签</h5><h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><h4 id=\"无序\"><a href=\"#无序\" class=\"headerlink\" title=\"无序\"></a>无序</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">*</span> 1                             · 1<br><span class=\"hljs-bullet\">+</span> 1            &gt; 预览            · 1<br><span class=\"hljs-bullet\">-</span> 1                             · 1<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"有序\"><a href=\"#有序\" class=\"headerlink\" title=\"有序\"></a>有序</h4><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">1</span>. 列表                            <span class=\"hljs-number\">1</span>. 列表<br><span class=\"hljs-attribute\">2</span>. 列表            &gt; 预览          <span class=\"hljs-number\">2</span>. 列表<br><span class=\"hljs-attribute\">3</span>. 列表                            <span class=\"hljs-number\">3</span>. 列表<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">这是一段引用数据</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这是一段引用数据</p>\n</blockquote>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-section\">***</span><br><span class=\"hljs-section\">---</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"超链接-图片\"><a href=\"#超链接-图片\" class=\"headerlink\" title=\"超链接/图片\"></a>超链接/图片</h3><p><code>[BG 超链接](/img/default.jpg)</code><br><a href=\"/img/1.jpg\">BG 超链接</a></p>\n<p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">|<span class=\"hljs-string\"> 项目        </span>|<span class=\"hljs-string\"> 价格    </span>|<span class=\"hljs-string\">  数量   </span>|<br>|<span class=\"hljs-string\"> --------    </span>|<span class=\"hljs-string\"> -----: </span>|<span class=\"hljs-string\"> :----:  </span>|<br>|<span class=\"hljs-string\"> 掉闹        </span>|<span class=\"hljs-string\"> \\$1600  </span>|<span class=\"hljs-string\">   5    </span>|<br>|<span class=\"hljs-string\"> 手机        </span>|<span class=\"hljs-string\">   \\$12  </span>|<span class=\"hljs-string\">   12   </span>|<br>|<span class=\"hljs-string\"> 鼠标        </span>|<span class=\"hljs-string\">    \\$1  </span>|<span class=\"hljs-string\">   34   </span>|<br><br>: 是对齐方向<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>掉闹</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>鼠标</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">34</td>\n</tr>\n</tbody></table>\n"},{"title":"实现阅读器功能","date":"2021-06-29T13:27:28.000Z","_content":"\n### 实现效果\n\n输入一段文字，将其播放。\n\n-   使用相应的 WebAPI 接口获得浏览器支持的语言种类列表，并填充至页面的下拉菜单中，选择中文;\n-   在文本域中输入对应语言的文字，点击`speak`按钮后浏览器会阅读输入的文字；\n-   在浏览器阅读时，点击`stop`按钮，浏览器会停止阅读；\n-   拖动`rate`和`pitch`滑块可改变阅读速度和音高。\n\n#### 主要\n\n-   `SpeechSynthesisUtterance`接口  \n    本接口用于设置阅读器阅读的配置参数，包括语言，阅读速度，语调等，实例化`SpeechSynthesisUtterance`后，可以通过为其属性赋值来完成参数配置，详细信息请直接参考 MDN 中的[SpeechSynthesisUtterance 接口说明](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance)。\n-   `SpeechSynthesis`接口  \n    本接口用于控制阅读器行为，包括获取浏览器支持的朗读语言，文本朗读，暂停，停止等，接口属性中定义有 paused,speaking 等只读属性来表明当前的状态,详细使用方式请参考 MDN 中的[SpeechSynthesis 接口说明](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis)。\n\n### 预览\n\n![BG图片](/img/阅读器.png)\n\n### 初始代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Speech Synthesis</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n\n    <div class=\"voiceinator\">\n\n      <h1>The Voiceinator 5000</h1>\n\n      <select name=\"voice\" id=\"voices\">\n        <option value=\"\">Select A Voice</option>\n      </select>\n\n      <label for=\"rate\">Rate:</label>\n      <input name=\"rate\" type=\"range\" min=\"0\" max=\"3\" value=\"1\" step=\"0.1\">\n\n      <label for=\"pitch\">Pitch:</label>\n\n      <input name=\"pitch\" type=\"range\" min=\"0\" max=\"2\" step=\"0.1\">\n      <textarea name=\"text\">Hello! I love JavaScript 馃憤</textarea>\n      <button id=\"stop\">Stop!</button>\n      <button id=\"speak\">Speak</button>\n\n    </div>\n\n<script>\n\n</script>\n\n</body>\n</html>\n```\n\n### 实例代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Speech Synthesis</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"voiceinator\">\n      <h1>听说 5000</h1>\n      <select name=\"voice\" id=\"voices\">\n        <option value=\"\">Select A Voice</option>\n      </select>\n      <label for=\"rate\">Rate:</label>\n      <input name=\"rate\" type=\"range\" min=\"0\" max=\"3\" value=\"1\" step=\"0.1\">\n      <label for=\"pitch\">Pitch:</label>\n      <input name=\"pitch\" type=\"range\" min=\"0\" max=\"2\" step=\"0.1\">\n      <textarea name=\"text\">Hello! I love JavaScript 👍</textarea>\n      <button id=\"stop\">Stop!</button>\n      <button id=\"speak\">Speak</button>\n    </div>\n<script>\n  const synth = window.speechSynthesis;\n  let voices = [];\n  const msg = new SpeechSynthesisUtterance();\n  const voicesDropdown = document.querySelector('[name=\"voice\"]');\n  const options = document.querySelectorAll('[type=\"range\"], [name=\"text\"]');\n  const speakButton = document.querySelector('#speak');\n  const stopButton = document.querySelector('#stop');\n  msg.text = '你能说中文吗';\n\n  //获得浏览器支持的阅读语言并填充至下拉列表\nfunction getSupportVoice() {\n  voices = synth.getVoices();\n  for(i = 0; i < voices.length ; i++) {\n    var option = document.createElement('option');\n    option.textContent = voices[i].name + ' (' + voices[i].lang + ')';\n\n    if(voices[i].default) {\n      option.textContent += ' -- DEFAULT';\n    }\n\n    option.setAttribute('data-lang', voices[i].lang);\n    option.setAttribute('data-name', voices[i].name);\n    voicesDropdown.appendChild(option);\n  }\n}\n\n//点击speak按钮时阅读文字\nfunction speak() {\n  console.log(voicesDropdown.value);\n  synth.speak(msg);\n}\n\n//阅读参数发生变化\nfunction paramChange(){\n  msg[this.name] = this.value;\n  console.log(this.name,this.value);\n}\n\n//停止阅读\nfunction stopSpeak(){\n  synth.cancel();\n}\n\n// 事件绑定\noptions.forEach(opt => opt.addEventListener('change', paramChange));\nsynth.addEventListener('voiceschanged', getSupportVoice);//经测试直接执行无效，须由事件触发\nspeakButton.addEventListener('click', speak);\nstopButton.addEventListener('click', stopSpeak);\n</script>\n\n</body>\n</html>\n\n```\n","source":"_posts/2021-06/06-29阅读器.md","raw":"---\ntitle: 实现阅读器功能\ndate: 2021-06-29 21:27:28\ntags: 原生\ncategory: JavaScript\n---\n\n### 实现效果\n\n输入一段文字，将其播放。\n\n-   使用相应的 WebAPI 接口获得浏览器支持的语言种类列表，并填充至页面的下拉菜单中，选择中文;\n-   在文本域中输入对应语言的文字，点击`speak`按钮后浏览器会阅读输入的文字；\n-   在浏览器阅读时，点击`stop`按钮，浏览器会停止阅读；\n-   拖动`rate`和`pitch`滑块可改变阅读速度和音高。\n\n#### 主要\n\n-   `SpeechSynthesisUtterance`接口  \n    本接口用于设置阅读器阅读的配置参数，包括语言，阅读速度，语调等，实例化`SpeechSynthesisUtterance`后，可以通过为其属性赋值来完成参数配置，详细信息请直接参考 MDN 中的[SpeechSynthesisUtterance 接口说明](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance)。\n-   `SpeechSynthesis`接口  \n    本接口用于控制阅读器行为，包括获取浏览器支持的朗读语言，文本朗读，暂停，停止等，接口属性中定义有 paused,speaking 等只读属性来表明当前的状态,详细使用方式请参考 MDN 中的[SpeechSynthesis 接口说明](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis)。\n\n### 预览\n\n![BG图片](/img/阅读器.png)\n\n### 初始代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Speech Synthesis</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n\n    <div class=\"voiceinator\">\n\n      <h1>The Voiceinator 5000</h1>\n\n      <select name=\"voice\" id=\"voices\">\n        <option value=\"\">Select A Voice</option>\n      </select>\n\n      <label for=\"rate\">Rate:</label>\n      <input name=\"rate\" type=\"range\" min=\"0\" max=\"3\" value=\"1\" step=\"0.1\">\n\n      <label for=\"pitch\">Pitch:</label>\n\n      <input name=\"pitch\" type=\"range\" min=\"0\" max=\"2\" step=\"0.1\">\n      <textarea name=\"text\">Hello! I love JavaScript 馃憤</textarea>\n      <button id=\"stop\">Stop!</button>\n      <button id=\"speak\">Speak</button>\n\n    </div>\n\n<script>\n\n</script>\n\n</body>\n</html>\n```\n\n### 实例代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Speech Synthesis</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"voiceinator\">\n      <h1>听说 5000</h1>\n      <select name=\"voice\" id=\"voices\">\n        <option value=\"\">Select A Voice</option>\n      </select>\n      <label for=\"rate\">Rate:</label>\n      <input name=\"rate\" type=\"range\" min=\"0\" max=\"3\" value=\"1\" step=\"0.1\">\n      <label for=\"pitch\">Pitch:</label>\n      <input name=\"pitch\" type=\"range\" min=\"0\" max=\"2\" step=\"0.1\">\n      <textarea name=\"text\">Hello! I love JavaScript 👍</textarea>\n      <button id=\"stop\">Stop!</button>\n      <button id=\"speak\">Speak</button>\n    </div>\n<script>\n  const synth = window.speechSynthesis;\n  let voices = [];\n  const msg = new SpeechSynthesisUtterance();\n  const voicesDropdown = document.querySelector('[name=\"voice\"]');\n  const options = document.querySelectorAll('[type=\"range\"], [name=\"text\"]');\n  const speakButton = document.querySelector('#speak');\n  const stopButton = document.querySelector('#stop');\n  msg.text = '你能说中文吗';\n\n  //获得浏览器支持的阅读语言并填充至下拉列表\nfunction getSupportVoice() {\n  voices = synth.getVoices();\n  for(i = 0; i < voices.length ; i++) {\n    var option = document.createElement('option');\n    option.textContent = voices[i].name + ' (' + voices[i].lang + ')';\n\n    if(voices[i].default) {\n      option.textContent += ' -- DEFAULT';\n    }\n\n    option.setAttribute('data-lang', voices[i].lang);\n    option.setAttribute('data-name', voices[i].name);\n    voicesDropdown.appendChild(option);\n  }\n}\n\n//点击speak按钮时阅读文字\nfunction speak() {\n  console.log(voicesDropdown.value);\n  synth.speak(msg);\n}\n\n//阅读参数发生变化\nfunction paramChange(){\n  msg[this.name] = this.value;\n  console.log(this.name,this.value);\n}\n\n//停止阅读\nfunction stopSpeak(){\n  synth.cancel();\n}\n\n// 事件绑定\noptions.forEach(opt => opt.addEventListener('change', paramChange));\nsynth.addEventListener('voiceschanged', getSupportVoice);//经测试直接执行无效，须由事件触发\nspeakButton.addEventListener('click', speak);\nstopButton.addEventListener('click', stopSpeak);\n</script>\n\n</body>\n</html>\n\n```\n","slug":"2021-06/06-29阅读器","published":1,"updated":"2021-07-31T05:06:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c210q0007f60c3x06b58z","content":"<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h3><p>输入一段文字，将其播放。</p>\n<ul>\n<li>  使用相应的 WebAPI 接口获得浏览器支持的语言种类列表，并填充至页面的下拉菜单中，选择中文;</li>\n<li>  在文本域中输入对应语言的文字，点击<code>speak</code>按钮后浏览器会阅读输入的文字；</li>\n<li>  在浏览器阅读时，点击<code>stop</code>按钮，浏览器会停止阅读；</li>\n<li>  拖动<code>rate</code>和<code>pitch</code>滑块可改变阅读速度和音高。</li>\n</ul>\n<h4 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h4><ul>\n<li><code>SpeechSynthesisUtterance</code>接口<br>  本接口用于设置阅读器阅读的配置参数，包括语言，阅读速度，语调等，实例化<code>SpeechSynthesisUtterance</code>后，可以通过为其属性赋值来完成参数配置，详细信息请直接参考 MDN 中的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance\">SpeechSynthesisUtterance 接口说明</a>。</li>\n<li><code>SpeechSynthesis</code>接口<br>  本接口用于控制阅读器行为，包括获取浏览器支持的朗读语言，文本朗读，暂停，停止等，接口属性中定义有 paused,speaking 等只读属性来表明当前的状态,详细使用方式请参考 MDN 中的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis\">SpeechSynthesis 接口说明</a>。</li>\n</ul>\n<h3 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h3><p><img src=\"/img/%E9%98%85%E8%AF%BB%E5%99%A8.png\" alt=\"BG图片\"></p>\n<h3 id=\"初始代码\"><a href=\"#初始代码\" class=\"headerlink\" title=\"初始代码\"></a>初始代码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Speech Synthesis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;voiceinator&quot;</span>&gt;</span><br><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>The Voiceinator 5000<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;voice&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;voices&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>Select A Voice<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;rate&quot;</span>&gt;</span>Rate:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;rate&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;range&quot;</span> <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;3&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-attr\">step</span>=<span class=\"hljs-string\">&quot;0.1&quot;</span>&gt;</span><br><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;pitch&quot;</span>&gt;</span>Pitch:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;pitch&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;range&quot;</span> <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">step</span>=<span class=\"hljs-string\">&quot;0.1&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>Hello! I love JavaScript 馃憤<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;stop&quot;</span>&gt;</span>Stop!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;speak&quot;</span>&gt;</span>Speak<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Speech Synthesis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;voiceinator&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>听说 5000<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;voice&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;voices&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>Select A Voice<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;rate&quot;</span>&gt;</span>Rate:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;rate&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;range&quot;</span> <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;3&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-attr\">step</span>=<span class=\"hljs-string\">&quot;0.1&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;pitch&quot;</span>&gt;</span>Pitch:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;pitch&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;range&quot;</span> <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">step</span>=<span class=\"hljs-string\">&quot;0.1&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>Hello! I love JavaScript 👍<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;stop&quot;</span>&gt;</span>Stop!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;speak&quot;</span>&gt;</span>Speak<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> synth = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">speechSynthesis</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">let</span> voices = [];</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SpeechSynthesisUtterance</span>();</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> voicesDropdown = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;[name=&quot;voice&quot;]&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> options = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&#x27;[type=&quot;range&quot;], [name=&quot;text&quot;]&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> speakButton = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#speak&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> stopButton = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#stop&#x27;</span>);</span><br><span class=\"language-javascript\">  msg.<span class=\"hljs-property\">text</span> = <span class=\"hljs-string\">&#x27;你能说中文吗&#x27;</span>;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-comment\">//获得浏览器支持的阅读语言并填充至下拉列表</span></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getSupportVoice</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">  voices = synth.<span class=\"hljs-title function_\">getVoices</span>();</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; voices.<span class=\"hljs-property\">length</span> ; i++) &#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> option = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;option&#x27;</span>);</span><br><span class=\"language-javascript\">    option.<span class=\"hljs-property\">textContent</span> = voices[i].<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&#x27; (&#x27;</span> + voices[i].<span class=\"hljs-property\">lang</span> + <span class=\"hljs-string\">&#x27;)&#x27;</span>;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">if</span>(voices[i].<span class=\"hljs-property\">default</span>) &#123;</span><br><span class=\"language-javascript\">      option.<span class=\"hljs-property\">textContent</span> += <span class=\"hljs-string\">&#x27; -- DEFAULT&#x27;</span>;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    option.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-lang&#x27;</span>, voices[i].<span class=\"hljs-property\">lang</span>);</span><br><span class=\"language-javascript\">    option.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-name&#x27;</span>, voices[i].<span class=\"hljs-property\">name</span>);</span><br><span class=\"language-javascript\">    voicesDropdown.<span class=\"hljs-title function_\">appendChild</span>(option);</span><br><span class=\"language-javascript\">  &#125;</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-comment\">//点击speak按钮时阅读文字</span></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(voicesDropdown.<span class=\"hljs-property\">value</span>);</span><br><span class=\"language-javascript\">  synth.<span class=\"hljs-title function_\">speak</span>(msg);</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-comment\">//阅读参数发生变化</span></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">paramChange</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">  msg[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>,<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>);</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-comment\">//停止阅读</span></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">stopSpeak</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">  synth.<span class=\"hljs-title function_\">cancel</span>();</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-comment\">// 事件绑定</span></span><br><span class=\"language-javascript\">options.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">opt</span> =&gt;</span> opt.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;change&#x27;</span>, paramChange));</span><br><span class=\"language-javascript\">synth.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;voiceschanged&#x27;</span>, getSupportVoice);<span class=\"hljs-comment\">//经测试直接执行无效，须由事件触发</span></span><br><span class=\"language-javascript\">speakButton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, speak);</span><br><span class=\"language-javascript\">stopButton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, stopSpeak);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h3><p>输入一段文字，将其播放。</p>\n<ul>\n<li>  使用相应的 WebAPI 接口获得浏览器支持的语言种类列表，并填充至页面的下拉菜单中，选择中文;</li>\n<li>  在文本域中输入对应语言的文字，点击<code>speak</code>按钮后浏览器会阅读输入的文字；</li>\n<li>  在浏览器阅读时，点击<code>stop</code>按钮，浏览器会停止阅读；</li>\n<li>  拖动<code>rate</code>和<code>pitch</code>滑块可改变阅读速度和音高。</li>\n</ul>\n<h4 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h4><ul>\n<li><code>SpeechSynthesisUtterance</code>接口<br>  本接口用于设置阅读器阅读的配置参数，包括语言，阅读速度，语调等，实例化<code>SpeechSynthesisUtterance</code>后，可以通过为其属性赋值来完成参数配置，详细信息请直接参考 MDN 中的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance\">SpeechSynthesisUtterance 接口说明</a>。</li>\n<li><code>SpeechSynthesis</code>接口<br>  本接口用于控制阅读器行为，包括获取浏览器支持的朗读语言，文本朗读，暂停，停止等，接口属性中定义有 paused,speaking 等只读属性来表明当前的状态,详细使用方式请参考 MDN 中的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis\">SpeechSynthesis 接口说明</a>。</li>\n</ul>\n<h3 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h3><p><img src=\"/img/%E9%98%85%E8%AF%BB%E5%99%A8.png\" alt=\"BG图片\"></p>\n<h3 id=\"初始代码\"><a href=\"#初始代码\" class=\"headerlink\" title=\"初始代码\"></a>初始代码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Speech Synthesis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;voiceinator&quot;</span>&gt;</span><br><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>The Voiceinator 5000<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;voice&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;voices&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>Select A Voice<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;rate&quot;</span>&gt;</span>Rate:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;rate&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;range&quot;</span> <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;3&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-attr\">step</span>=<span class=\"hljs-string\">&quot;0.1&quot;</span>&gt;</span><br><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;pitch&quot;</span>&gt;</span>Pitch:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;pitch&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;range&quot;</span> <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">step</span>=<span class=\"hljs-string\">&quot;0.1&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>Hello! I love JavaScript 馃憤<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;stop&quot;</span>&gt;</span>Stop!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;speak&quot;</span>&gt;</span>Speak<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Speech Synthesis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;voiceinator&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>听说 5000<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;voice&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;voices&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>Select A Voice<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;rate&quot;</span>&gt;</span>Rate:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;rate&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;range&quot;</span> <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;3&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-attr\">step</span>=<span class=\"hljs-string\">&quot;0.1&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;pitch&quot;</span>&gt;</span>Pitch:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;pitch&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;range&quot;</span> <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">step</span>=<span class=\"hljs-string\">&quot;0.1&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>Hello! I love JavaScript 👍<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;stop&quot;</span>&gt;</span>Stop!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;speak&quot;</span>&gt;</span>Speak<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> synth = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">speechSynthesis</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">let</span> voices = [];</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SpeechSynthesisUtterance</span>();</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> voicesDropdown = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;[name=&quot;voice&quot;]&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> options = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&#x27;[type=&quot;range&quot;], [name=&quot;text&quot;]&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> speakButton = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#speak&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> stopButton = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#stop&#x27;</span>);</span><br><span class=\"language-javascript\">  msg.<span class=\"hljs-property\">text</span> = <span class=\"hljs-string\">&#x27;你能说中文吗&#x27;</span>;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-comment\">//获得浏览器支持的阅读语言并填充至下拉列表</span></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getSupportVoice</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">  voices = synth.<span class=\"hljs-title function_\">getVoices</span>();</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; voices.<span class=\"hljs-property\">length</span> ; i++) &#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> option = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;option&#x27;</span>);</span><br><span class=\"language-javascript\">    option.<span class=\"hljs-property\">textContent</span> = voices[i].<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&#x27; (&#x27;</span> + voices[i].<span class=\"hljs-property\">lang</span> + <span class=\"hljs-string\">&#x27;)&#x27;</span>;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">if</span>(voices[i].<span class=\"hljs-property\">default</span>) &#123;</span><br><span class=\"language-javascript\">      option.<span class=\"hljs-property\">textContent</span> += <span class=\"hljs-string\">&#x27; -- DEFAULT&#x27;</span>;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    option.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-lang&#x27;</span>, voices[i].<span class=\"hljs-property\">lang</span>);</span><br><span class=\"language-javascript\">    option.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-name&#x27;</span>, voices[i].<span class=\"hljs-property\">name</span>);</span><br><span class=\"language-javascript\">    voicesDropdown.<span class=\"hljs-title function_\">appendChild</span>(option);</span><br><span class=\"language-javascript\">  &#125;</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-comment\">//点击speak按钮时阅读文字</span></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(voicesDropdown.<span class=\"hljs-property\">value</span>);</span><br><span class=\"language-javascript\">  synth.<span class=\"hljs-title function_\">speak</span>(msg);</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-comment\">//阅读参数发生变化</span></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">paramChange</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">  msg[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>,<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>);</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-comment\">//停止阅读</span></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">stopSpeak</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">  synth.<span class=\"hljs-title function_\">cancel</span>();</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-comment\">// 事件绑定</span></span><br><span class=\"language-javascript\">options.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">opt</span> =&gt;</span> opt.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;change&#x27;</span>, paramChange));</span><br><span class=\"language-javascript\">synth.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;voiceschanged&#x27;</span>, getSupportVoice);<span class=\"hljs-comment\">//经测试直接执行无效，须由事件触发</span></span><br><span class=\"language-javascript\">speakButton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, speak);</span><br><span class=\"language-javascript\">stopButton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, stopSpeak);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n"},{"title":"原生js训练1","date":"2021-07-02T13:11:01.000Z","_content":"\n## 实现效果\n\n模拟一个打鼓的页面。用户在键盘上按下 ASDFGHJKL 这几个键时，页面上与字母对应的按钮变大变亮，对应的鼓点声音响起来。\n\n### 在线效果\n\n[点击查看在线效果](http://soyaine.github.io/JavaScript30/01%20-%20JavaScript%20Drum%20Kit/index-SOYAINE.html)\n\n### 实列代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>JS Drum Kit</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n\n\n  <div class=\"keys\">\n    <div data-key=\"65\" class=\"key\">\n      <kbd>A</kbd>\n      <span class=\"sound\">clap</span>\n    </div>\n    <div data-key=\"83\" class=\"key\">\n      <kbd>S</kbd>\n      <span class=\"sound\">hihat</span>\n    </div>\n    <div data-key=\"68\" class=\"key\">\n      <kbd>D</kbd>\n      <span class=\"sound\">kick</span>\n    </div>\n    <div data-key=\"70\" class=\"key\">\n      <kbd>F</kbd>\n      <span class=\"sound\">openhat</span>\n    </div>\n    <div data-key=\"71\" class=\"key\">\n      <kbd>G</kbd>\n      <span class=\"sound\">boom</span>\n    </div>\n    <div data-key=\"72\" class=\"key\">\n      <kbd>H</kbd>\n      <span class=\"sound\">ride</span>\n    </div>\n    <div data-key=\"74\" class=\"key\">\n      <kbd>J</kbd>\n      <span class=\"sound\">snare</span>\n    </div>\n    <div data-key=\"75\" class=\"key\">\n      <kbd>K</kbd>\n      <span class=\"sound\">tom</span>\n    </div>\n    <div data-key=\"76\" class=\"key\">\n      <kbd>L</kbd>\n      <span class=\"sound\">tink</span>\n    </div>\n  </div>\n\n  <audio data-key=\"65\" src=\"sounds/clap.wav\"></audio>\n  <audio data-key=\"83\" src=\"sounds/hihat.wav\"></audio>\n  <audio data-key=\"68\" src=\"sounds/kick.wav\"></audio>\n  <audio data-key=\"70\" src=\"sounds/openhat.wav\"></audio>\n  <audio data-key=\"71\" src=\"sounds/boom.wav\"></audio>\n  <audio data-key=\"72\" src=\"sounds/ride.wav\"></audio>\n  <audio data-key=\"74\" src=\"sounds/snare.wav\"></audio>\n  <audio data-key=\"75\" src=\"sounds/tom.wav\"></audio>\n  <audio data-key=\"76\" src=\"sounds/tink.wav\"></audio>\n\n  <script>\n\n  </script>\n\n</body>\n</html>\n```\n\n## 关键要点\n\n1. 键盘事件\n2. 播放声音\n3. 改变样式\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>JS Drum Kit</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n\n\n  <div class=\"keys\">\n    <div data-key=\"65\" class=\"key\">\n      <kbd>A</kbd>\n      <span class=\"sound\">clap</span>\n    </div>\n    <div data-key=\"83\" class=\"key\">\n      <kbd>S</kbd>\n      <span class=\"sound\">hihat</span>\n    </div>\n    <div data-key=\"68\" class=\"key\">\n      <kbd>D</kbd>\n      <span class=\"sound\">kick</span>\n    </div>\n    <div data-key=\"70\" class=\"key\">\n      <kbd>F</kbd>\n      <span class=\"sound\">openhat</span>\n    </div>\n    <div data-key=\"71\" class=\"key\">\n      <kbd>G</kbd>\n      <span class=\"sound\">boom</span>\n    </div>\n    <div data-key=\"72\" class=\"key\">\n      <kbd>H</kbd>\n      <span class=\"sound\">ride</span>\n    </div>\n    <div data-key=\"74\" class=\"key\">\n      <kbd>J</kbd>\n      <span class=\"sound\">snare</span>\n    </div>\n    <div data-key=\"75\" class=\"key\">\n      <kbd>K</kbd>\n      <span class=\"sound\">tom</span>\n    </div>\n    <div data-key=\"76\" class=\"key\">\n      <kbd>L</kbd>\n      <span class=\"sound\">tink</span>\n    </div>\n  </div>\n\n  <audio data-key=\"65\" src=\"sounds/clap.wav\"></audio>\n  <audio data-key=\"83\" src=\"sounds/hihat.wav\"></audio>\n  <audio data-key=\"68\" src=\"sounds/kick.wav\"></audio>\n  <audio data-key=\"70\" src=\"sounds/openhat.wav\"></audio>\n  <audio data-key=\"71\" src=\"sounds/boom.wav\"></audio>\n  <audio data-key=\"72\" src=\"sounds/ride.wav\"></audio>\n  <audio data-key=\"74\" src=\"sounds/snare.wav\"></audio>\n  <audio data-key=\"75\" src=\"sounds/tom.wav\"></audio>\n  <audio data-key=\"76\" src=\"sounds/tink.wav\"></audio>\n\n  <script>\n    function removeTransition(event) {\n      if (event.propertyName !== 'transform') return; // 过滤其中一种事件\n      event.target.classList.remove('playing'); // 移除高亮的样式\n    }\n\n    function playSound(event) {\n      const audio = document.querySelector(`audio[data-key=\"${event.keyCode}\"]`); // 根据触发按键的键码，获取对应音频\n      const key = document.querySelector(`div[data-key=\"${event.keyCode}\"]`); // 获取页面对应按钮 DIV 元素\n      if (!audio) return; // 处理无效的按键事件\n\n      key.classList.add('playing'); // 改变样式\n      audio.currentTime = 0; // 每次播放之后都使音频播放进度归零\n      audio.play(); // 播放相应音效\n    }\n\n    const keys = Array.from(document.querySelectorAll('.key')); // 获取页面所有按钮元素\n    keys.forEach(key => key.addEventListener('transitionend', removeTransition)); // 添加 transition 事件监听\n    window.addEventListener('keydown', playSound);\n  </script>\n\n</body>\n</html>\n\n```\n","source":"_posts/2021-07/07-02原生1.md","raw":"---\ntitle: 原生js训练1\ndate: 2021-07-02 21:11:01\ntags: 原生\ncategory: JavaScript\n---\n\n## 实现效果\n\n模拟一个打鼓的页面。用户在键盘上按下 ASDFGHJKL 这几个键时，页面上与字母对应的按钮变大变亮，对应的鼓点声音响起来。\n\n### 在线效果\n\n[点击查看在线效果](http://soyaine.github.io/JavaScript30/01%20-%20JavaScript%20Drum%20Kit/index-SOYAINE.html)\n\n### 实列代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>JS Drum Kit</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n\n\n  <div class=\"keys\">\n    <div data-key=\"65\" class=\"key\">\n      <kbd>A</kbd>\n      <span class=\"sound\">clap</span>\n    </div>\n    <div data-key=\"83\" class=\"key\">\n      <kbd>S</kbd>\n      <span class=\"sound\">hihat</span>\n    </div>\n    <div data-key=\"68\" class=\"key\">\n      <kbd>D</kbd>\n      <span class=\"sound\">kick</span>\n    </div>\n    <div data-key=\"70\" class=\"key\">\n      <kbd>F</kbd>\n      <span class=\"sound\">openhat</span>\n    </div>\n    <div data-key=\"71\" class=\"key\">\n      <kbd>G</kbd>\n      <span class=\"sound\">boom</span>\n    </div>\n    <div data-key=\"72\" class=\"key\">\n      <kbd>H</kbd>\n      <span class=\"sound\">ride</span>\n    </div>\n    <div data-key=\"74\" class=\"key\">\n      <kbd>J</kbd>\n      <span class=\"sound\">snare</span>\n    </div>\n    <div data-key=\"75\" class=\"key\">\n      <kbd>K</kbd>\n      <span class=\"sound\">tom</span>\n    </div>\n    <div data-key=\"76\" class=\"key\">\n      <kbd>L</kbd>\n      <span class=\"sound\">tink</span>\n    </div>\n  </div>\n\n  <audio data-key=\"65\" src=\"sounds/clap.wav\"></audio>\n  <audio data-key=\"83\" src=\"sounds/hihat.wav\"></audio>\n  <audio data-key=\"68\" src=\"sounds/kick.wav\"></audio>\n  <audio data-key=\"70\" src=\"sounds/openhat.wav\"></audio>\n  <audio data-key=\"71\" src=\"sounds/boom.wav\"></audio>\n  <audio data-key=\"72\" src=\"sounds/ride.wav\"></audio>\n  <audio data-key=\"74\" src=\"sounds/snare.wav\"></audio>\n  <audio data-key=\"75\" src=\"sounds/tom.wav\"></audio>\n  <audio data-key=\"76\" src=\"sounds/tink.wav\"></audio>\n\n  <script>\n\n  </script>\n\n</body>\n</html>\n```\n\n## 关键要点\n\n1. 键盘事件\n2. 播放声音\n3. 改变样式\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>JS Drum Kit</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n\n\n  <div class=\"keys\">\n    <div data-key=\"65\" class=\"key\">\n      <kbd>A</kbd>\n      <span class=\"sound\">clap</span>\n    </div>\n    <div data-key=\"83\" class=\"key\">\n      <kbd>S</kbd>\n      <span class=\"sound\">hihat</span>\n    </div>\n    <div data-key=\"68\" class=\"key\">\n      <kbd>D</kbd>\n      <span class=\"sound\">kick</span>\n    </div>\n    <div data-key=\"70\" class=\"key\">\n      <kbd>F</kbd>\n      <span class=\"sound\">openhat</span>\n    </div>\n    <div data-key=\"71\" class=\"key\">\n      <kbd>G</kbd>\n      <span class=\"sound\">boom</span>\n    </div>\n    <div data-key=\"72\" class=\"key\">\n      <kbd>H</kbd>\n      <span class=\"sound\">ride</span>\n    </div>\n    <div data-key=\"74\" class=\"key\">\n      <kbd>J</kbd>\n      <span class=\"sound\">snare</span>\n    </div>\n    <div data-key=\"75\" class=\"key\">\n      <kbd>K</kbd>\n      <span class=\"sound\">tom</span>\n    </div>\n    <div data-key=\"76\" class=\"key\">\n      <kbd>L</kbd>\n      <span class=\"sound\">tink</span>\n    </div>\n  </div>\n\n  <audio data-key=\"65\" src=\"sounds/clap.wav\"></audio>\n  <audio data-key=\"83\" src=\"sounds/hihat.wav\"></audio>\n  <audio data-key=\"68\" src=\"sounds/kick.wav\"></audio>\n  <audio data-key=\"70\" src=\"sounds/openhat.wav\"></audio>\n  <audio data-key=\"71\" src=\"sounds/boom.wav\"></audio>\n  <audio data-key=\"72\" src=\"sounds/ride.wav\"></audio>\n  <audio data-key=\"74\" src=\"sounds/snare.wav\"></audio>\n  <audio data-key=\"75\" src=\"sounds/tom.wav\"></audio>\n  <audio data-key=\"76\" src=\"sounds/tink.wav\"></audio>\n\n  <script>\n    function removeTransition(event) {\n      if (event.propertyName !== 'transform') return; // 过滤其中一种事件\n      event.target.classList.remove('playing'); // 移除高亮的样式\n    }\n\n    function playSound(event) {\n      const audio = document.querySelector(`audio[data-key=\"${event.keyCode}\"]`); // 根据触发按键的键码，获取对应音频\n      const key = document.querySelector(`div[data-key=\"${event.keyCode}\"]`); // 获取页面对应按钮 DIV 元素\n      if (!audio) return; // 处理无效的按键事件\n\n      key.classList.add('playing'); // 改变样式\n      audio.currentTime = 0; // 每次播放之后都使音频播放进度归零\n      audio.play(); // 播放相应音效\n    }\n\n    const keys = Array.from(document.querySelectorAll('.key')); // 获取页面所有按钮元素\n    keys.forEach(key => key.addEventListener('transitionend', removeTransition)); // 添加 transition 事件监听\n    window.addEventListener('keydown', playSound);\n  </script>\n\n</body>\n</html>\n\n```\n","slug":"2021-07/07-02原生1","published":1,"updated":"2021-07-31T09:19:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c210s0008f60ccv23e5fk","content":"<h2 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h2><p>模拟一个打鼓的页面。用户在键盘上按下 ASDFGHJKL 这几个键时，页面上与字母对应的按钮变大变亮，对应的鼓点声音响起来。</p>\n<h3 id=\"在线效果\"><a href=\"#在线效果\" class=\"headerlink\" title=\"在线效果\"></a>在线效果</h3><p><a href=\"http://soyaine.github.io/JavaScript30/01%20-%20JavaScript%20Drum%20Kit/index-SOYAINE.html\">点击查看在线效果</a></p>\n<h3 id=\"实列代码\"><a href=\"#实列代码\" class=\"headerlink\" title=\"实列代码\"></a>实列代码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>JS Drum Kit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;keys&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;65&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>clap<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;83&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>S<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>hihat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;68&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>D<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>kick<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;70&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>F<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>openhat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;71&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>G<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>boom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;72&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>H<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>ride<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;74&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>J<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>snare<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;75&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>K<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;76&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>L<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>tink<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;65&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/clap.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;83&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/hihat.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;68&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/kick.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;70&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/openhat.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;71&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/boom.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;72&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/ride.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;74&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/snare.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;75&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/tom.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;76&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/tink.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"关键要点\"><a href=\"#关键要点\" class=\"headerlink\" title=\"关键要点\"></a>关键要点</h2><ol>\n<li>键盘事件</li>\n<li>播放声音</li>\n<li>改变样式</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>JS Drum Kit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;keys&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;65&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>clap<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;83&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>S<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>hihat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;68&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>D<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>kick<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;70&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>F<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>openhat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;71&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>G<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>boom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;72&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>H<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>ride<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;74&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>J<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>snare<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;75&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>K<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;76&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>L<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>tink<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;65&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/clap.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;83&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/hihat.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;68&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/kick.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;70&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/openhat.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;71&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/boom.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;72&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/ride.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;74&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/snare.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;75&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/tom.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;76&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/tink.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">removeTransition</span>(<span class=\"hljs-params\">event</span>) &#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">propertyName</span> !== <span class=\"hljs-string\">&#x27;transform&#x27;</span>) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 过滤其中一种事件</span></span><br><span class=\"language-javascript\">      event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">&#x27;playing&#x27;</span>); <span class=\"hljs-comment\">// 移除高亮的样式</span></span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">playSound</span>(<span class=\"hljs-params\">event</span>) &#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">const</span> audio = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">`audio[data-key=&quot;<span class=\"hljs-subst\">$&#123;event.keyCode&#125;</span>&quot;]`</span>); <span class=\"hljs-comment\">// 根据触发按键的键码，获取对应音频</span></span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">`div[data-key=&quot;<span class=\"hljs-subst\">$&#123;event.keyCode&#125;</span>&quot;]`</span>); <span class=\"hljs-comment\">// 获取页面对应按钮 DIV 元素</span></span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">if</span> (!audio) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 处理无效的按键事件</span></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">      key.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">&#x27;playing&#x27;</span>); <span class=\"hljs-comment\">// 改变样式</span></span><br><span class=\"language-javascript\">      audio.<span class=\"hljs-property\">currentTime</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 每次播放之后都使音频播放进度归零</span></span><br><span class=\"language-javascript\">      audio.<span class=\"hljs-title function_\">play</span>(); <span class=\"hljs-comment\">// 播放相应音效</span></span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">const</span> keys = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&#x27;.key&#x27;</span>)); <span class=\"hljs-comment\">// 获取页面所有按钮元素</span></span><br><span class=\"language-javascript\">    keys.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> key.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;transitionend&#x27;</span>, removeTransition)); <span class=\"hljs-comment\">// 添加 transition 事件监听</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>, playSound);</span><br><span class=\"language-javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h2><p>模拟一个打鼓的页面。用户在键盘上按下 ASDFGHJKL 这几个键时，页面上与字母对应的按钮变大变亮，对应的鼓点声音响起来。</p>\n<h3 id=\"在线效果\"><a href=\"#在线效果\" class=\"headerlink\" title=\"在线效果\"></a>在线效果</h3><p><a href=\"http://soyaine.github.io/JavaScript30/01%20-%20JavaScript%20Drum%20Kit/index-SOYAINE.html\">点击查看在线效果</a></p>\n<h3 id=\"实列代码\"><a href=\"#实列代码\" class=\"headerlink\" title=\"实列代码\"></a>实列代码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>JS Drum Kit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;keys&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;65&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>clap<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;83&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>S<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>hihat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;68&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>D<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>kick<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;70&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>F<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>openhat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;71&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>G<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>boom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;72&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>H<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>ride<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;74&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>J<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>snare<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;75&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>K<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;76&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>L<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>tink<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;65&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/clap.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;83&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/hihat.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;68&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/kick.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;70&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/openhat.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;71&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/boom.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;72&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/ride.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;74&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/snare.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;75&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/tom.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;76&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/tink.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"关键要点\"><a href=\"#关键要点\" class=\"headerlink\" title=\"关键要点\"></a>关键要点</h2><ol>\n<li>键盘事件</li>\n<li>播放声音</li>\n<li>改变样式</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>JS Drum Kit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;keys&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;65&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>clap<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;83&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>S<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>hihat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;68&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>D<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>kick<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;70&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>F<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>openhat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;71&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>G<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>boom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;72&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>H<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>ride<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;74&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>J<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>snare<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;75&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>K<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;76&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;key&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">kbd</span>&gt;</span>L<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">kbd</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;sound&quot;</span>&gt;</span>tink<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;65&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/clap.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;83&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/hihat.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;68&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/kick.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;70&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/openhat.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;71&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/boom.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;72&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/ride.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;74&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/snare.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;75&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/tom.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">data-key</span>=<span class=\"hljs-string\">&quot;76&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sounds/tink.wav&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">removeTransition</span>(<span class=\"hljs-params\">event</span>) &#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">propertyName</span> !== <span class=\"hljs-string\">&#x27;transform&#x27;</span>) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 过滤其中一种事件</span></span><br><span class=\"language-javascript\">      event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">&#x27;playing&#x27;</span>); <span class=\"hljs-comment\">// 移除高亮的样式</span></span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">playSound</span>(<span class=\"hljs-params\">event</span>) &#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">const</span> audio = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">`audio[data-key=&quot;<span class=\"hljs-subst\">$&#123;event.keyCode&#125;</span>&quot;]`</span>); <span class=\"hljs-comment\">// 根据触发按键的键码，获取对应音频</span></span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">`div[data-key=&quot;<span class=\"hljs-subst\">$&#123;event.keyCode&#125;</span>&quot;]`</span>); <span class=\"hljs-comment\">// 获取页面对应按钮 DIV 元素</span></span><br><span class=\"language-javascript\">      <span class=\"hljs-keyword\">if</span> (!audio) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 处理无效的按键事件</span></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">      key.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">&#x27;playing&#x27;</span>); <span class=\"hljs-comment\">// 改变样式</span></span><br><span class=\"language-javascript\">      audio.<span class=\"hljs-property\">currentTime</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 每次播放之后都使音频播放进度归零</span></span><br><span class=\"language-javascript\">      audio.<span class=\"hljs-title function_\">play</span>(); <span class=\"hljs-comment\">// 播放相应音效</span></span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">const</span> keys = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&#x27;.key&#x27;</span>)); <span class=\"hljs-comment\">// 获取页面所有按钮元素</span></span><br><span class=\"language-javascript\">    keys.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> key.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;transitionend&#x27;</span>, removeTransition)); <span class=\"hljs-comment\">// 添加 transition 事件监听</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>, playSound);</span><br><span class=\"language-javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n"},{"title":"WebSocket 基于实现","date":"2021-07-04T13:05:28.000Z","_content":"\n## WebSocket\n\n> [webSocket](https://websocket.org/)是一种在单个 TCP 连接上进行全双工通信的协议,可以使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。是基于 HTML5 的新协议，一个持久化的协议，相对于 HTTP 这种非持久的协议来说。\n\n### 应用场景\n\n应用提供多个用户相互交流，应用是展示服务器端经常变动的数据。涉及，社交订阅、流动数据、股票基金报价、天气更新、多媒体聊天、位置、视频.....\n\n> 主要用于客户端部分（HTML5 是一个很宽广的概念，是对大量新 API 的总称）\n\n### 特点包括\n\n-   建立在 TCP 协议之上，服务器端的实现比较容易。\n-   与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。\n-   数据格式比较轻量，性能开销小，通信高效。\n-   可以发送文本，也可以发送二进制数据。\n-   没有同源限制，客户端可以与任意服务器通信。\n-   协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL。\n\n## 主要\n\n详细参考于阮老师日志，便于细节了解 [阮一峰的网络日志-websocket 教程](https://www.ruanyifeng.com/blog/2017/05/websocket.html)\n\n### 实例代码\n\n```\nlet that = null;\nexport default class WebSocketClient {\n\n    constructor() {\n        this.ws = null;\n        this.url = null;\n        this.from = null;\n        this.to = null;\n        that = this;\n    }\n\n    /**\n     * 获取WebSocket单例\n     * @returns {WebSocketClient}\n     */\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new WebSocketClient();\n        }\n        return this.instance;\n    }\n\n    /**\n     * 初始化WebSocket\n     */\n    initWebSocket(url) {\n        if(!url) return\n        try {\n            //timer为发送心跳的计时器\n            this.timer && clearInterval(this.timer);\n            this.ws = new WebSocket(url);\n            this.initWsEvent();\n\n        } catch (e) {\n            console.log('WebSocket err:', e);\n            //重连\n            this.reconnect();\n        }\n    }\n\n    /**\n     * 初始化WebSocket相关事件\n     */\n    initWsEvent() {\n        //建立WebSocket连接\n        this.ws.onopen = function () {\n\n            console.log('WebSocket:', '连接成功了');\n            // 加载历史消息\n            // that.getMessageHistory(from,to);\n        };\n\n       // 客户端接收服务端数据时触发\n        this.ws.onmessage = function (evt) {\n            // console.log(\"websocket:\",evt);\n            if (evt.data !== 'pong') {\n                //不是心跳消息，消息处理逻辑\n                //接收到消息，处理逻辑...\n                // console.log(\"websocket response:\",evt.data);\n            } else {\n                console.log('WebSocket: response pong msg=', evt.data);\n            }\n        };\n\n        // this.getMessage();\n       //连接错误\n        this.ws.onerror = function (err) {\n            // console.log('WebSocket:', 'connect to server error');\n            //重连\n            that.reconnect();\n        };\n        //连接关闭\n        this.ws.onclose = function () {\n            // console.log('WebSocket:', 'connect close');\n            //重连\n            that.reconnect();\n        };\n\n        //每隔15s向服务器发送一次心跳\n        this.timer = setInterval(() => {\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n                console.log('WebSocket:', 'ping');\n                this.ws.send(\"ping\");\n            }\n        }, 15000);\n    }\n\n    //获取历史消息\n    getMessageHistory(userId,shopId) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            try {\n                let params = {\n                    \"to \":shopId,\n                    \"from \":userId\n                };\n\n                this.ws.send(JSON.stringify(params));\n                console.log(\"发送成功\")\n            } catch (err) {\n                console.warn('ws sendMessage', err.message);\n            }\n        } else {\n            console.log('WebSocket:', 'connect not open to send message');\n        }\n    }\n\n    //发送消息\n    sendMessage(msg,id) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            try {\n                let params = {\n                    \"cmd\":1,\n                    \"msgType\":msgType,//0=文本 1=图片 3=视频 4=语音\n                    \"to\":cusId,\n                    \"from\":id,\n                    \"msg\": msg\n                };\n\n                this.ws.send(JSON.stringify(params));\n            } catch (err) {\n                console.warn('ws sendMessage', err.message);\n            }\n        } else {\n            console.log('WebSocket:', 'connect not open to send message');\n        }\n    }\n\n    //重连\n    reconnect() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        this.timeout = setTimeout(function () {\n            //重新连接WebSocket\n            that.initWebSocket(this.url,this.from,this.to);\n        }, 15000);\n    }\n\n    onClose(){\n       if( this.ws ){\n           this.ws.close();\n       }\n\n    }\n}\n\n```\n","source":"_posts/2021-07/07-04websocket.md","raw":"---\ntitle: WebSocket 基于实现\ndate: 2021-07-04 21:05:28\ntags: webSocket\n---\n\n## WebSocket\n\n> [webSocket](https://websocket.org/)是一种在单个 TCP 连接上进行全双工通信的协议,可以使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。是基于 HTML5 的新协议，一个持久化的协议，相对于 HTTP 这种非持久的协议来说。\n\n### 应用场景\n\n应用提供多个用户相互交流，应用是展示服务器端经常变动的数据。涉及，社交订阅、流动数据、股票基金报价、天气更新、多媒体聊天、位置、视频.....\n\n> 主要用于客户端部分（HTML5 是一个很宽广的概念，是对大量新 API 的总称）\n\n### 特点包括\n\n-   建立在 TCP 协议之上，服务器端的实现比较容易。\n-   与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。\n-   数据格式比较轻量，性能开销小，通信高效。\n-   可以发送文本，也可以发送二进制数据。\n-   没有同源限制，客户端可以与任意服务器通信。\n-   协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL。\n\n## 主要\n\n详细参考于阮老师日志，便于细节了解 [阮一峰的网络日志-websocket 教程](https://www.ruanyifeng.com/blog/2017/05/websocket.html)\n\n### 实例代码\n\n```\nlet that = null;\nexport default class WebSocketClient {\n\n    constructor() {\n        this.ws = null;\n        this.url = null;\n        this.from = null;\n        this.to = null;\n        that = this;\n    }\n\n    /**\n     * 获取WebSocket单例\n     * @returns {WebSocketClient}\n     */\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new WebSocketClient();\n        }\n        return this.instance;\n    }\n\n    /**\n     * 初始化WebSocket\n     */\n    initWebSocket(url) {\n        if(!url) return\n        try {\n            //timer为发送心跳的计时器\n            this.timer && clearInterval(this.timer);\n            this.ws = new WebSocket(url);\n            this.initWsEvent();\n\n        } catch (e) {\n            console.log('WebSocket err:', e);\n            //重连\n            this.reconnect();\n        }\n    }\n\n    /**\n     * 初始化WebSocket相关事件\n     */\n    initWsEvent() {\n        //建立WebSocket连接\n        this.ws.onopen = function () {\n\n            console.log('WebSocket:', '连接成功了');\n            // 加载历史消息\n            // that.getMessageHistory(from,to);\n        };\n\n       // 客户端接收服务端数据时触发\n        this.ws.onmessage = function (evt) {\n            // console.log(\"websocket:\",evt);\n            if (evt.data !== 'pong') {\n                //不是心跳消息，消息处理逻辑\n                //接收到消息，处理逻辑...\n                // console.log(\"websocket response:\",evt.data);\n            } else {\n                console.log('WebSocket: response pong msg=', evt.data);\n            }\n        };\n\n        // this.getMessage();\n       //连接错误\n        this.ws.onerror = function (err) {\n            // console.log('WebSocket:', 'connect to server error');\n            //重连\n            that.reconnect();\n        };\n        //连接关闭\n        this.ws.onclose = function () {\n            // console.log('WebSocket:', 'connect close');\n            //重连\n            that.reconnect();\n        };\n\n        //每隔15s向服务器发送一次心跳\n        this.timer = setInterval(() => {\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n                console.log('WebSocket:', 'ping');\n                this.ws.send(\"ping\");\n            }\n        }, 15000);\n    }\n\n    //获取历史消息\n    getMessageHistory(userId,shopId) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            try {\n                let params = {\n                    \"to \":shopId,\n                    \"from \":userId\n                };\n\n                this.ws.send(JSON.stringify(params));\n                console.log(\"发送成功\")\n            } catch (err) {\n                console.warn('ws sendMessage', err.message);\n            }\n        } else {\n            console.log('WebSocket:', 'connect not open to send message');\n        }\n    }\n\n    //发送消息\n    sendMessage(msg,id) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            try {\n                let params = {\n                    \"cmd\":1,\n                    \"msgType\":msgType,//0=文本 1=图片 3=视频 4=语音\n                    \"to\":cusId,\n                    \"from\":id,\n                    \"msg\": msg\n                };\n\n                this.ws.send(JSON.stringify(params));\n            } catch (err) {\n                console.warn('ws sendMessage', err.message);\n            }\n        } else {\n            console.log('WebSocket:', 'connect not open to send message');\n        }\n    }\n\n    //重连\n    reconnect() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        this.timeout = setTimeout(function () {\n            //重新连接WebSocket\n            that.initWebSocket(this.url,this.from,this.to);\n        }, 15000);\n    }\n\n    onClose(){\n       if( this.ws ){\n           this.ws.close();\n       }\n\n    }\n}\n\n```\n","slug":"2021-07/07-04websocket","published":1,"updated":"2021-07-31T09:22:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c210t0009f60cg70qfmo4","content":"<h2 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h2><blockquote>\n<p><a href=\"https://websocket.org/\">webSocket</a>是一种在单个 TCP 连接上进行全双工通信的协议,可以使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。是基于 HTML5 的新协议，一个持久化的协议，相对于 HTTP 这种非持久的协议来说。</p>\n</blockquote>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>应用提供多个用户相互交流，应用是展示服务器端经常变动的数据。涉及，社交订阅、流动数据、股票基金报价、天气更新、多媒体聊天、位置、视频…..</p>\n<blockquote>\n<p>主要用于客户端部分（HTML5 是一个很宽广的概念，是对大量新 API 的总称）</p>\n</blockquote>\n<h3 id=\"特点包括\"><a href=\"#特点包括\" class=\"headerlink\" title=\"特点包括\"></a>特点包括</h3><ul>\n<li>  建立在 TCP 协议之上，服务器端的实现比较容易。</li>\n<li>  与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li>\n<li>  数据格式比较轻量，性能开销小，通信高效。</li>\n<li>  可以发送文本，也可以发送二进制数据。</li>\n<li>  没有同源限制，客户端可以与任意服务器通信。</li>\n<li>  协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL。</li>\n</ul>\n<h2 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h2><p>详细参考于阮老师日志，便于细节了解 <a href=\"https://www.ruanyifeng.com/blog/2017/05/websocket.html\">阮一峰的网络日志-websocket 教程</a></p>\n<h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">let that = <span class=\"hljs-literal\">null</span>;<br>export default <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebSocketClient</span> &#123;<br><br>    <span class=\"hljs-keyword\">constructor</span>() &#123;<br>        <span class=\"hljs-keyword\">this</span>.ws = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">this</span>.url = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">this</span>.from = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">this</span>.to = <span class=\"hljs-literal\">null</span>;<br>        that = <span class=\"hljs-keyword\">this</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取WebSocket单例</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@returns</span> &#123;WebSocketClient&#125;</span><br><span class=\"hljs-comment\">     */</span><br>    static getInstance() &#123;<br>        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.instance) &#123;<br>            <span class=\"hljs-keyword\">this</span>.instance = new WebSocketClient();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.instance;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 初始化WebSocket</span><br><span class=\"hljs-comment\">     */</span><br>    initWebSocket(url) &#123;<br>        <span class=\"hljs-keyword\">if</span>(!url) <span class=\"hljs-keyword\">return</span><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">//timer为发送心跳的计时器</span><br>            <span class=\"hljs-keyword\">this</span>.timer &amp;&amp; clearInterval(<span class=\"hljs-keyword\">this</span>.timer);<br>            <span class=\"hljs-keyword\">this</span>.ws = new WebSocket(url);<br>            <span class=\"hljs-keyword\">this</span>.initWsEvent();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>            console.log(<span class=\"hljs-string\">&#x27;WebSocket err:&#x27;</span>, e);<br>            <span class=\"hljs-comment\">//重连</span><br>            <span class=\"hljs-keyword\">this</span>.reconnect();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 初始化WebSocket相关事件</span><br><span class=\"hljs-comment\">     */</span><br>    initWsEvent() &#123;<br>        <span class=\"hljs-comment\">//建立WebSocket连接</span><br>        <span class=\"hljs-keyword\">this</span>.ws.onopen = function () &#123;<br><br>            console.log(<span class=\"hljs-string\">&#x27;WebSocket:&#x27;</span>, <span class=\"hljs-string\">&#x27;连接成功了&#x27;</span>);<br>            <span class=\"hljs-comment\">// 加载历史消息</span><br>            <span class=\"hljs-comment\">// that.getMessageHistory(from,to);</span><br>        &#125;;<br><br>       <span class=\"hljs-comment\">// 客户端接收服务端数据时触发</span><br>        <span class=\"hljs-keyword\">this</span>.ws.onmessage = function (evt) &#123;<br>            <span class=\"hljs-comment\">// console.log(&quot;websocket:&quot;,evt);</span><br>            <span class=\"hljs-keyword\">if</span> (evt.<span class=\"hljs-keyword\">data</span> !== <span class=\"hljs-string\">&#x27;pong&#x27;</span>) &#123;<br>                <span class=\"hljs-comment\">//不是心跳消息，消息处理逻辑</span><br>                <span class=\"hljs-comment\">//接收到消息，处理逻辑...</span><br>                <span class=\"hljs-comment\">// console.log(&quot;websocket response:&quot;,evt.data);</span><br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                console.log(<span class=\"hljs-string\">&#x27;WebSocket: response pong msg=&#x27;</span>, evt.<span class=\"hljs-keyword\">data</span>);<br>            &#125;<br>        &#125;;<br><br>        <span class=\"hljs-comment\">// this.getMessage();</span><br>       <span class=\"hljs-comment\">//连接错误</span><br>        <span class=\"hljs-keyword\">this</span>.ws.onerror = function (err) &#123;<br>            <span class=\"hljs-comment\">// console.log(&#x27;WebSocket:&#x27;, &#x27;connect to server error&#x27;);</span><br>            <span class=\"hljs-comment\">//重连</span><br>            that.reconnect();<br>        &#125;;<br>        <span class=\"hljs-comment\">//连接关闭</span><br>        <span class=\"hljs-keyword\">this</span>.ws.onclose = function () &#123;<br>            <span class=\"hljs-comment\">// console.log(&#x27;WebSocket:&#x27;, &#x27;connect close&#x27;);</span><br>            <span class=\"hljs-comment\">//重连</span><br>            that.reconnect();<br>        &#125;;<br><br>        <span class=\"hljs-comment\">//每隔15s向服务器发送一次心跳</span><br>        <span class=\"hljs-keyword\">this</span>.timer = setInterval(() =&gt; &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.ws &amp;&amp; <span class=\"hljs-keyword\">this</span>.ws.readyState === WebSocket.OPEN) &#123;<br>                console.log(<span class=\"hljs-string\">&#x27;WebSocket:&#x27;</span>, <span class=\"hljs-string\">&#x27;ping&#x27;</span>);<br>                <span class=\"hljs-keyword\">this</span>.ws.send(<span class=\"hljs-string\">&quot;ping&quot;</span>);<br>            &#125;<br>        &#125;, <span class=\"hljs-number\">15000</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//获取历史消息</span><br>    getMessageHistory(userId,shopId) &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.ws &amp;&amp; <span class=\"hljs-keyword\">this</span>.ws.readyState === WebSocket.OPEN) &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                let params = &#123;<br>                    <span class=\"hljs-string\">&quot;to &quot;</span>:shopId,<br>                    <span class=\"hljs-string\">&quot;from &quot;</span>:userId<br>                &#125;;<br><br>                <span class=\"hljs-keyword\">this</span>.ws.send(JSON.stringify(params));<br>                console.log(<span class=\"hljs-string\">&quot;发送成功&quot;</span>)<br>            &#125; <span class=\"hljs-keyword\">catch</span> (err) &#123;<br>                console.warn(<span class=\"hljs-string\">&#x27;ws sendMessage&#x27;</span>, err.message);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            console.log(<span class=\"hljs-string\">&#x27;WebSocket:&#x27;</span>, <span class=\"hljs-string\">&#x27;connect not open to send message&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//发送消息</span><br>    sendMessage(msg,id) &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.ws &amp;&amp; <span class=\"hljs-keyword\">this</span>.ws.readyState === WebSocket.OPEN) &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                let params = &#123;<br>                    <span class=\"hljs-string\">&quot;cmd&quot;</span>:<span class=\"hljs-number\">1</span>,<br>                    <span class=\"hljs-string\">&quot;msgType&quot;</span>:msgType,<span class=\"hljs-comment\">//0=文本 1=图片 3=视频 4=语音</span><br>                    <span class=\"hljs-string\">&quot;to&quot;</span>:cusId,<br>                    <span class=\"hljs-string\">&quot;from&quot;</span>:id,<br>                    <span class=\"hljs-string\">&quot;msg&quot;</span>: msg<br>                &#125;;<br><br>                <span class=\"hljs-keyword\">this</span>.ws.send(JSON.stringify(params));<br>            &#125; <span class=\"hljs-keyword\">catch</span> (err) &#123;<br>                console.warn(<span class=\"hljs-string\">&#x27;ws sendMessage&#x27;</span>, err.message);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            console.log(<span class=\"hljs-string\">&#x27;WebSocket:&#x27;</span>, <span class=\"hljs-string\">&#x27;connect not open to send message&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//重连</span><br>    reconnect() &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.timeout) &#123;<br>            clearTimeout(<span class=\"hljs-keyword\">this</span>.timeout);<br>        &#125;<br>        <span class=\"hljs-keyword\">this</span>.timeout = setTimeout(function () &#123;<br>            <span class=\"hljs-comment\">//重新连接WebSocket</span><br>            that.initWebSocket(<span class=\"hljs-keyword\">this</span>.url,<span class=\"hljs-keyword\">this</span>.from,<span class=\"hljs-keyword\">this</span>.to);<br>        &#125;, <span class=\"hljs-number\">15000</span>);<br>    &#125;<br><br>    onClose()&#123;<br>       <span class=\"hljs-keyword\">if</span>( <span class=\"hljs-keyword\">this</span>.ws )&#123;<br>           <span class=\"hljs-keyword\">this</span>.ws.close();<br>       &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h2><blockquote>\n<p><a href=\"https://websocket.org/\">webSocket</a>是一种在单个 TCP 连接上进行全双工通信的协议,可以使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。是基于 HTML5 的新协议，一个持久化的协议，相对于 HTTP 这种非持久的协议来说。</p>\n</blockquote>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>应用提供多个用户相互交流，应用是展示服务器端经常变动的数据。涉及，社交订阅、流动数据、股票基金报价、天气更新、多媒体聊天、位置、视频…..</p>\n<blockquote>\n<p>主要用于客户端部分（HTML5 是一个很宽广的概念，是对大量新 API 的总称）</p>\n</blockquote>\n<h3 id=\"特点包括\"><a href=\"#特点包括\" class=\"headerlink\" title=\"特点包括\"></a>特点包括</h3><ul>\n<li>  建立在 TCP 协议之上，服务器端的实现比较容易。</li>\n<li>  与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li>\n<li>  数据格式比较轻量，性能开销小，通信高效。</li>\n<li>  可以发送文本，也可以发送二进制数据。</li>\n<li>  没有同源限制，客户端可以与任意服务器通信。</li>\n<li>  协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL。</li>\n</ul>\n<h2 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h2><p>详细参考于阮老师日志，便于细节了解 <a href=\"https://www.ruanyifeng.com/blog/2017/05/websocket.html\">阮一峰的网络日志-websocket 教程</a></p>\n<h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">let that = <span class=\"hljs-literal\">null</span>;<br>export default <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebSocketClient</span> &#123;<br><br>    <span class=\"hljs-keyword\">constructor</span>() &#123;<br>        <span class=\"hljs-keyword\">this</span>.ws = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">this</span>.url = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">this</span>.from = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">this</span>.to = <span class=\"hljs-literal\">null</span>;<br>        that = <span class=\"hljs-keyword\">this</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取WebSocket单例</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@returns</span> &#123;WebSocketClient&#125;</span><br><span class=\"hljs-comment\">     */</span><br>    static getInstance() &#123;<br>        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.instance) &#123;<br>            <span class=\"hljs-keyword\">this</span>.instance = new WebSocketClient();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.instance;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 初始化WebSocket</span><br><span class=\"hljs-comment\">     */</span><br>    initWebSocket(url) &#123;<br>        <span class=\"hljs-keyword\">if</span>(!url) <span class=\"hljs-keyword\">return</span><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">//timer为发送心跳的计时器</span><br>            <span class=\"hljs-keyword\">this</span>.timer &amp;&amp; clearInterval(<span class=\"hljs-keyword\">this</span>.timer);<br>            <span class=\"hljs-keyword\">this</span>.ws = new WebSocket(url);<br>            <span class=\"hljs-keyword\">this</span>.initWsEvent();<br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>            console.log(<span class=\"hljs-string\">&#x27;WebSocket err:&#x27;</span>, e);<br>            <span class=\"hljs-comment\">//重连</span><br>            <span class=\"hljs-keyword\">this</span>.reconnect();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 初始化WebSocket相关事件</span><br><span class=\"hljs-comment\">     */</span><br>    initWsEvent() &#123;<br>        <span class=\"hljs-comment\">//建立WebSocket连接</span><br>        <span class=\"hljs-keyword\">this</span>.ws.onopen = function () &#123;<br><br>            console.log(<span class=\"hljs-string\">&#x27;WebSocket:&#x27;</span>, <span class=\"hljs-string\">&#x27;连接成功了&#x27;</span>);<br>            <span class=\"hljs-comment\">// 加载历史消息</span><br>            <span class=\"hljs-comment\">// that.getMessageHistory(from,to);</span><br>        &#125;;<br><br>       <span class=\"hljs-comment\">// 客户端接收服务端数据时触发</span><br>        <span class=\"hljs-keyword\">this</span>.ws.onmessage = function (evt) &#123;<br>            <span class=\"hljs-comment\">// console.log(&quot;websocket:&quot;,evt);</span><br>            <span class=\"hljs-keyword\">if</span> (evt.<span class=\"hljs-keyword\">data</span> !== <span class=\"hljs-string\">&#x27;pong&#x27;</span>) &#123;<br>                <span class=\"hljs-comment\">//不是心跳消息，消息处理逻辑</span><br>                <span class=\"hljs-comment\">//接收到消息，处理逻辑...</span><br>                <span class=\"hljs-comment\">// console.log(&quot;websocket response:&quot;,evt.data);</span><br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                console.log(<span class=\"hljs-string\">&#x27;WebSocket: response pong msg=&#x27;</span>, evt.<span class=\"hljs-keyword\">data</span>);<br>            &#125;<br>        &#125;;<br><br>        <span class=\"hljs-comment\">// this.getMessage();</span><br>       <span class=\"hljs-comment\">//连接错误</span><br>        <span class=\"hljs-keyword\">this</span>.ws.onerror = function (err) &#123;<br>            <span class=\"hljs-comment\">// console.log(&#x27;WebSocket:&#x27;, &#x27;connect to server error&#x27;);</span><br>            <span class=\"hljs-comment\">//重连</span><br>            that.reconnect();<br>        &#125;;<br>        <span class=\"hljs-comment\">//连接关闭</span><br>        <span class=\"hljs-keyword\">this</span>.ws.onclose = function () &#123;<br>            <span class=\"hljs-comment\">// console.log(&#x27;WebSocket:&#x27;, &#x27;connect close&#x27;);</span><br>            <span class=\"hljs-comment\">//重连</span><br>            that.reconnect();<br>        &#125;;<br><br>        <span class=\"hljs-comment\">//每隔15s向服务器发送一次心跳</span><br>        <span class=\"hljs-keyword\">this</span>.timer = setInterval(() =&gt; &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.ws &amp;&amp; <span class=\"hljs-keyword\">this</span>.ws.readyState === WebSocket.OPEN) &#123;<br>                console.log(<span class=\"hljs-string\">&#x27;WebSocket:&#x27;</span>, <span class=\"hljs-string\">&#x27;ping&#x27;</span>);<br>                <span class=\"hljs-keyword\">this</span>.ws.send(<span class=\"hljs-string\">&quot;ping&quot;</span>);<br>            &#125;<br>        &#125;, <span class=\"hljs-number\">15000</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//获取历史消息</span><br>    getMessageHistory(userId,shopId) &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.ws &amp;&amp; <span class=\"hljs-keyword\">this</span>.ws.readyState === WebSocket.OPEN) &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                let params = &#123;<br>                    <span class=\"hljs-string\">&quot;to &quot;</span>:shopId,<br>                    <span class=\"hljs-string\">&quot;from &quot;</span>:userId<br>                &#125;;<br><br>                <span class=\"hljs-keyword\">this</span>.ws.send(JSON.stringify(params));<br>                console.log(<span class=\"hljs-string\">&quot;发送成功&quot;</span>)<br>            &#125; <span class=\"hljs-keyword\">catch</span> (err) &#123;<br>                console.warn(<span class=\"hljs-string\">&#x27;ws sendMessage&#x27;</span>, err.message);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            console.log(<span class=\"hljs-string\">&#x27;WebSocket:&#x27;</span>, <span class=\"hljs-string\">&#x27;connect not open to send message&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//发送消息</span><br>    sendMessage(msg,id) &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.ws &amp;&amp; <span class=\"hljs-keyword\">this</span>.ws.readyState === WebSocket.OPEN) &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                let params = &#123;<br>                    <span class=\"hljs-string\">&quot;cmd&quot;</span>:<span class=\"hljs-number\">1</span>,<br>                    <span class=\"hljs-string\">&quot;msgType&quot;</span>:msgType,<span class=\"hljs-comment\">//0=文本 1=图片 3=视频 4=语音</span><br>                    <span class=\"hljs-string\">&quot;to&quot;</span>:cusId,<br>                    <span class=\"hljs-string\">&quot;from&quot;</span>:id,<br>                    <span class=\"hljs-string\">&quot;msg&quot;</span>: msg<br>                &#125;;<br><br>                <span class=\"hljs-keyword\">this</span>.ws.send(JSON.stringify(params));<br>            &#125; <span class=\"hljs-keyword\">catch</span> (err) &#123;<br>                console.warn(<span class=\"hljs-string\">&#x27;ws sendMessage&#x27;</span>, err.message);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            console.log(<span class=\"hljs-string\">&#x27;WebSocket:&#x27;</span>, <span class=\"hljs-string\">&#x27;connect not open to send message&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//重连</span><br>    reconnect() &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.timeout) &#123;<br>            clearTimeout(<span class=\"hljs-keyword\">this</span>.timeout);<br>        &#125;<br>        <span class=\"hljs-keyword\">this</span>.timeout = setTimeout(function () &#123;<br>            <span class=\"hljs-comment\">//重新连接WebSocket</span><br>            that.initWebSocket(<span class=\"hljs-keyword\">this</span>.url,<span class=\"hljs-keyword\">this</span>.from,<span class=\"hljs-keyword\">this</span>.to);<br>        &#125;, <span class=\"hljs-number\">15000</span>);<br>    &#125;<br><br>    onClose()&#123;<br>       <span class=\"hljs-keyword\">if</span>( <span class=\"hljs-keyword\">this</span>.ws )&#123;<br>           <span class=\"hljs-keyword\">this</span>.ws.close();<br>       &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n"},{"title":"表单校验方式","date":"2021-07-09T13:27:28.000Z","_content":"\n## 实现效果\n\n> 日常总结常规的表单校验方式总结，针对于 element ui 组件库\n\n## 主要\n\n> form 表单内 form-item prop 校验\n\n-   required 必填\n-   trigger 触发条件\n-   message 警示语\n-   type 校验类型\n-   pattern 正则校验\n-   validator 自定义 校验规则\n\n### 实例代码\n\n```\n const validateDate = (rule, value, callback) => {\n      if (value) {\n        let selectTime = new Date(value).valueOf();\n        let activeTime = new Date().valueOf();\n        if (activeTime > selectTime) {\n          callback(new Error(`生效时间不能低于或等于当前时间`));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n\n productTitle: [\n          { required: true, message: \"请输入商品名称\", trigger: \"blur\" },\n          { validator: validateDate, trigger: [\"blur\", \"change\"] },\n          { type: \"number\", message: \"类型应为数字值\", trigger: \"blur\" },\n          {pattern: /^\\+?[1-9][0-9]*$/,message: '推荐顺序应为正整数',trigger: 'blur',},\n        ],\n```\n\n### 有依赖数据校验判断\n\n```\ncomputed: {\n        // 表单校验规则 在计算属性中可将值进行判断\n        rules(){\n            return {\n                product:[{ required: this.form.big ? true : false, message: \"请输入商品名称\", trigger: \"blur\" }]\n            };\n        }\n    },\n```\n\n### 自定义正则方式修改输入内容\n\n```\n <el-form-item v-if=\"showPrice\" prop=\"itemPrice\" label=\"面值\">\n            <el-input\n              v-model=\"addForm.itemPrice\"\n              @keyup.native=\"InputNumber('itemPrice')\"\n              maxlength=\"6\"\n              size=\"blur\"\n            ></el-input>\n </el-form-item>\n\n   // 验证只能输入数字\n    limitInputNumber (val) {\n      if (val) {\n        return String(val).replace(/\\D/g, '')\n      }\n      return val\n    },\n     // 限制只能输入数字(可以输入两位小数)\n    limitInputPointNumber(val, parent, property) {\n      let tmap = ''\n      if (val === 0 || val === '0' || val === '') {\n        tmap = ''\n      } else {\n        let value = null\n        value = String(val).replace(/[^\\d.]/g, '') // 清除“数字”和“.”以外的字符\n        value = value.replace(/^\\./g, '0.') // 第一个. 添加0.\n        value = value.replace(/\\.{2,}/g, '.') // 只保留第一个. 清除多余的\n        value = value\n          .replace('.', '$#$')\n          .replace(/\\./g, '')\n          .replace('$#$', '.')\n        value = value.replace(/^(-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3') // 只能输入两个小数\n        tmap = Number(value)\n      }\n      this[parent][property] = tmap\n    },\n     InputNumber(property) {\n     this.addForm[property] = this.limitInputNumber(this.addForm[property])\n   },\n```\n\n### 嵌套验证(联动验证)\n\n```\n<!-- region是一个对象,国家和城市是它的属性 -->\n  <el-form-item label=\"活动区域\" prop=\"region\">\n    <el-select v-model=\"registData.region.country\" placeholder=\"请选择国家\">\n      <el-option label=\"国家一\" value=\"USA\"></el-option>\n      <el-option label=\"国家二\" value=\"China\"></el-option>\n    </el-select>\n    <el-select v-model=\"registData.region.city\" placeholder=\"请选择城市\">\n      <el-option label=\"城市一\" value=\"shanghai\"></el-option>\n      <el-option label=\"城市二\" value=\"beijing\"></el-option>\n    </el-select>\n  </el-form-item>\n\n  region: [\n    {\n      type: 'object',\n      required: true,\n      // 这里有两种处理,一种是自定义验证,拿到值后自己对属性进行验证,比较麻烦\n      // validator: (rule, value, callback) => {\n      //   console.log(55, value)\n      //   if (!value.country) {\n      //     callback(new Error('请选择国家'))\n      //   } else if (!value.city) {\n      //     callback(new Error('请选择城市'))\n      //   } else {\n      //     callback()\n      //   }\n      // },\n      trigger: 'change',\n      // 官网提供了对象的嵌套验证,只需要把需要验证的属性,放在fields对象里,就会按顺序进行验证\n      fields: {\n        country: {required: true, message: '请选择国家', trigger: 'blur'},\n        city: {required: true, message: '请选择城市', trigger: 'blur'}\n      }\n    }\n  ],\n```\n","source":"_posts/2021-07/07-09element校验.md","raw":"---\ntitle: 表单校验方式\ndate: 2021-07-09 21:27:28\ntags: 校验方式\ncategory: Element UI\n---\n\n## 实现效果\n\n> 日常总结常规的表单校验方式总结，针对于 element ui 组件库\n\n## 主要\n\n> form 表单内 form-item prop 校验\n\n-   required 必填\n-   trigger 触发条件\n-   message 警示语\n-   type 校验类型\n-   pattern 正则校验\n-   validator 自定义 校验规则\n\n### 实例代码\n\n```\n const validateDate = (rule, value, callback) => {\n      if (value) {\n        let selectTime = new Date(value).valueOf();\n        let activeTime = new Date().valueOf();\n        if (activeTime > selectTime) {\n          callback(new Error(`生效时间不能低于或等于当前时间`));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n\n productTitle: [\n          { required: true, message: \"请输入商品名称\", trigger: \"blur\" },\n          { validator: validateDate, trigger: [\"blur\", \"change\"] },\n          { type: \"number\", message: \"类型应为数字值\", trigger: \"blur\" },\n          {pattern: /^\\+?[1-9][0-9]*$/,message: '推荐顺序应为正整数',trigger: 'blur',},\n        ],\n```\n\n### 有依赖数据校验判断\n\n```\ncomputed: {\n        // 表单校验规则 在计算属性中可将值进行判断\n        rules(){\n            return {\n                product:[{ required: this.form.big ? true : false, message: \"请输入商品名称\", trigger: \"blur\" }]\n            };\n        }\n    },\n```\n\n### 自定义正则方式修改输入内容\n\n```\n <el-form-item v-if=\"showPrice\" prop=\"itemPrice\" label=\"面值\">\n            <el-input\n              v-model=\"addForm.itemPrice\"\n              @keyup.native=\"InputNumber('itemPrice')\"\n              maxlength=\"6\"\n              size=\"blur\"\n            ></el-input>\n </el-form-item>\n\n   // 验证只能输入数字\n    limitInputNumber (val) {\n      if (val) {\n        return String(val).replace(/\\D/g, '')\n      }\n      return val\n    },\n     // 限制只能输入数字(可以输入两位小数)\n    limitInputPointNumber(val, parent, property) {\n      let tmap = ''\n      if (val === 0 || val === '0' || val === '') {\n        tmap = ''\n      } else {\n        let value = null\n        value = String(val).replace(/[^\\d.]/g, '') // 清除“数字”和“.”以外的字符\n        value = value.replace(/^\\./g, '0.') // 第一个. 添加0.\n        value = value.replace(/\\.{2,}/g, '.') // 只保留第一个. 清除多余的\n        value = value\n          .replace('.', '$#$')\n          .replace(/\\./g, '')\n          .replace('$#$', '.')\n        value = value.replace(/^(-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3') // 只能输入两个小数\n        tmap = Number(value)\n      }\n      this[parent][property] = tmap\n    },\n     InputNumber(property) {\n     this.addForm[property] = this.limitInputNumber(this.addForm[property])\n   },\n```\n\n### 嵌套验证(联动验证)\n\n```\n<!-- region是一个对象,国家和城市是它的属性 -->\n  <el-form-item label=\"活动区域\" prop=\"region\">\n    <el-select v-model=\"registData.region.country\" placeholder=\"请选择国家\">\n      <el-option label=\"国家一\" value=\"USA\"></el-option>\n      <el-option label=\"国家二\" value=\"China\"></el-option>\n    </el-select>\n    <el-select v-model=\"registData.region.city\" placeholder=\"请选择城市\">\n      <el-option label=\"城市一\" value=\"shanghai\"></el-option>\n      <el-option label=\"城市二\" value=\"beijing\"></el-option>\n    </el-select>\n  </el-form-item>\n\n  region: [\n    {\n      type: 'object',\n      required: true,\n      // 这里有两种处理,一种是自定义验证,拿到值后自己对属性进行验证,比较麻烦\n      // validator: (rule, value, callback) => {\n      //   console.log(55, value)\n      //   if (!value.country) {\n      //     callback(new Error('请选择国家'))\n      //   } else if (!value.city) {\n      //     callback(new Error('请选择城市'))\n      //   } else {\n      //     callback()\n      //   }\n      // },\n      trigger: 'change',\n      // 官网提供了对象的嵌套验证,只需要把需要验证的属性,放在fields对象里,就会按顺序进行验证\n      fields: {\n        country: {required: true, message: '请选择国家', trigger: 'blur'},\n        city: {required: true, message: '请选择城市', trigger: 'blur'}\n      }\n    }\n  ],\n```\n","slug":"2021-07/07-09element校验","published":1,"updated":"2021-08-01T06:55:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c210v000df60c9cpgf2i3","content":"<h2 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h2><blockquote>\n<p>日常总结常规的表单校验方式总结，针对于 element ui 组件库</p>\n</blockquote>\n<h2 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h2><blockquote>\n<p>form 表单内 form-item prop 校验</p>\n</blockquote>\n<ul>\n<li>  required 必填</li>\n<li>  trigger 触发条件</li>\n<li>  message 警示语</li>\n<li>  type 校验类型</li>\n<li>  pattern 正则校验</li>\n<li>  validator 自定义 校验规则</li>\n</ul>\n<h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">validateDate</span> = (<span class=\"hljs-params\">rule, value, callback</span>) =&gt; &#123;<br>      <span class=\"hljs-keyword\">if</span> (value) &#123;<br>        <span class=\"hljs-keyword\">let</span> selectTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(value).<span class=\"hljs-title function_\">valueOf</span>();<br>        <span class=\"hljs-keyword\">let</span> activeTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">valueOf</span>();<br>        <span class=\"hljs-keyword\">if</span> (activeTime &gt; selectTime) &#123;<br>          <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`生效时间不能低于或等于当前时间`</span>));<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>          <span class=\"hljs-title function_\">callback</span>();<br>        &#125;<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-title function_\">callback</span>();<br>      &#125;<br><br><span class=\"hljs-attr\">productTitle</span>: [<br>          &#123; <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&quot;请输入商品名称&quot;</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&quot;blur&quot;</span> &#125;,<br>         &#123; <span class=\"hljs-attr\">validator</span>: validateDate, <span class=\"hljs-attr\">trigger</span>: [<span class=\"hljs-string\">&quot;blur&quot;</span>, <span class=\"hljs-string\">&quot;change&quot;</span>] &#125;,<br>         &#123; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;number&quot;</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&quot;类型应为数字值&quot;</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&quot;blur&quot;</span> &#125;,<br>         &#123;<span class=\"hljs-attr\">pattern</span>: <span class=\"hljs-regexp\">/^\\+?[1-9][0-9]*$/</span>,<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;推荐顺序应为正整数&#x27;</span>,<span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&#x27;blur&#x27;</span>,&#125;,<br>        ],<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"有依赖数据校验判断\"><a href=\"#有依赖数据校验判断\" class=\"headerlink\" title=\"有依赖数据校验判断\"></a>有依赖数据校验判断</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">computed</span>: &#123;<br>        <span class=\"hljs-comment\">// 表单校验规则 在计算属性中可将值进行判断</span><br>        <span class=\"hljs-title function_\">rules</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">product</span>:[&#123; <span class=\"hljs-attr\">required</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">form</span>.<span class=\"hljs-property\">big</span> ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&quot;请输入商品名称&quot;</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&quot;blur&quot;</span> &#125;]<br>            &#125;;<br>        &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"自定义正则方式修改输入内容\"><a href=\"#自定义正则方式修改输入内容\" class=\"headerlink\" title=\"自定义正则方式修改输入内容\"></a>自定义正则方式修改输入内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"> &lt;el-form-item v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">&quot;showPrice&quot;</span> prop=<span class=\"hljs-string\">&quot;itemPrice&quot;</span> label=<span class=\"hljs-string\">&quot;面值&quot;</span>&gt;<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">              <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;addForm.itemPrice&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">              @<span class=\"hljs-attr\">keyup.native</span>=<span class=\"hljs-string\">&quot;InputNumber(&#x27;itemPrice&#x27;)&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">              <span class=\"hljs-attr\">maxlength</span>=<span class=\"hljs-string\">&quot;6&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">              <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;blur&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">            &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span></span><br>&lt;/el-form-item&gt;<br><br>  <span class=\"hljs-comment\">// 验证只能输入数字</span><br>   limitInputNumber (val) &#123;<br>     <span class=\"hljs-keyword\">if</span> (val) &#123;<br>       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">String</span>(val).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\D/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>     &#125;<br>     <span class=\"hljs-keyword\">return</span> val<br>   &#125;,<br>    <span class=\"hljs-comment\">// 限制只能输入数字(可以输入两位小数)</span><br>    <span class=\"hljs-title function_\">limitInputPointNumber</span>(<span class=\"hljs-params\">val, parent, property</span>) &#123;<br>      <span class=\"hljs-keyword\">let</span> tmap = <span class=\"hljs-string\">&#x27;&#x27;</span><br>      <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">0</span> || val === <span class=\"hljs-string\">&#x27;0&#x27;</span> || val === <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123;<br>        tmap = <span class=\"hljs-string\">&#x27;&#x27;</span><br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-literal\">null</span><br>        value = <span class=\"hljs-title class_\">String</span>(val).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/[^\\d.]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-comment\">// 清除“数字”和“.”以外的字符</span><br>        value = value.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/^\\./g</span>, <span class=\"hljs-string\">&#x27;0.&#x27;</span>) <span class=\"hljs-comment\">// 第一个. 添加0.</span><br>        value = value.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\.&#123;2,&#125;/g</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>) <span class=\"hljs-comment\">// 只保留第一个. 清除多余的</span><br>        value = value<br>          .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;$#$&#x27;</span>)<br>          .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\./g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>          .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;$#$&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>)<br>        value = value.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/^(-)*(\\d+)\\.(\\d\\d).*$/</span>, <span class=\"hljs-string\">&#x27;$1$2.$3&#x27;</span>) <span class=\"hljs-comment\">// 只能输入两个小数</span><br>        tmap = <span class=\"hljs-title class_\">Number</span>(value)<br>      &#125;<br>      <span class=\"hljs-variable language_\">this</span>[parent][property] = tmap<br>    &#125;,<br>    <span class=\"hljs-title class_\">InputNumber</span>(property) &#123;<br>     <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">addForm</span>[property] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">limitInputNumber</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">addForm</span>[property])<br>   &#125;,<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套验证-联动验证\"><a href=\"#嵌套验证-联动验证\" class=\"headerlink\" title=\"嵌套验证(联动验证)\"></a>嵌套验证(联动验证)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;!-- region是一个对象,国家和城市是它的属性 --&gt;<br>  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;活动区域&quot;</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">&quot;region&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;registData.region.country&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请选择国家&quot;</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;国家一&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;USA&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;国家二&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;China&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-select</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;registData.region.city&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请选择城市&quot;</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;城市一&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;shanghai&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;城市二&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;beijing&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-select</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span></span><br><br>  <span class=\"hljs-attr\">region</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;object&#x27;</span>,<br>      <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>,<br>      <span class=\"hljs-comment\">// 这里有两种处理,一种是自定义验证,拿到值后自己对属性进行验证,比较麻烦</span><br>      <span class=\"hljs-comment\">// validator: (rule, value, callback) =&gt; &#123;</span><br>      <span class=\"hljs-comment\">//   console.log(55, value)</span><br>      <span class=\"hljs-comment\">//   if (!value.country) &#123;</span><br>      <span class=\"hljs-comment\">//     callback(new Error(&#x27;请选择国家&#x27;))</span><br>      <span class=\"hljs-comment\">//   &#125; else if (!value.city) &#123;</span><br>      <span class=\"hljs-comment\">//     callback(new Error(&#x27;请选择城市&#x27;))</span><br>      <span class=\"hljs-comment\">//   &#125; else &#123;</span><br>      <span class=\"hljs-comment\">//     callback()</span><br>      <span class=\"hljs-comment\">//   &#125;</span><br>      <span class=\"hljs-comment\">// &#125;,</span><br>      <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&#x27;change&#x27;</span>,<br>      <span class=\"hljs-comment\">// 官网提供了对象的嵌套验证,只需要把需要验证的属性,放在fields对象里,就会按顺序进行验证</span><br>      <span class=\"hljs-attr\">fields</span>: &#123;<br>        <span class=\"hljs-attr\">country</span>: &#123;<span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;请选择国家&#x27;</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&#x27;blur&#x27;</span>&#125;,<br>        <span class=\"hljs-attr\">city</span>: &#123;<span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;请选择城市&#x27;</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&#x27;blur&#x27;</span>&#125;<br>      &#125;<br>    &#125;<br>  ],<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h2><blockquote>\n<p>日常总结常规的表单校验方式总结，针对于 element ui 组件库</p>\n</blockquote>\n<h2 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h2><blockquote>\n<p>form 表单内 form-item prop 校验</p>\n</blockquote>\n<ul>\n<li>  required 必填</li>\n<li>  trigger 触发条件</li>\n<li>  message 警示语</li>\n<li>  type 校验类型</li>\n<li>  pattern 正则校验</li>\n<li>  validator 自定义 校验规则</li>\n</ul>\n<h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">validateDate</span> = (<span class=\"hljs-params\">rule, value, callback</span>) =&gt; &#123;<br>      <span class=\"hljs-keyword\">if</span> (value) &#123;<br>        <span class=\"hljs-keyword\">let</span> selectTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(value).<span class=\"hljs-title function_\">valueOf</span>();<br>        <span class=\"hljs-keyword\">let</span> activeTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">valueOf</span>();<br>        <span class=\"hljs-keyword\">if</span> (activeTime &gt; selectTime) &#123;<br>          <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`生效时间不能低于或等于当前时间`</span>));<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>          <span class=\"hljs-title function_\">callback</span>();<br>        &#125;<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-title function_\">callback</span>();<br>      &#125;<br><br><span class=\"hljs-attr\">productTitle</span>: [<br>          &#123; <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&quot;请输入商品名称&quot;</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&quot;blur&quot;</span> &#125;,<br>         &#123; <span class=\"hljs-attr\">validator</span>: validateDate, <span class=\"hljs-attr\">trigger</span>: [<span class=\"hljs-string\">&quot;blur&quot;</span>, <span class=\"hljs-string\">&quot;change&quot;</span>] &#125;,<br>         &#123; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;number&quot;</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&quot;类型应为数字值&quot;</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&quot;blur&quot;</span> &#125;,<br>         &#123;<span class=\"hljs-attr\">pattern</span>: <span class=\"hljs-regexp\">/^\\+?[1-9][0-9]*$/</span>,<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;推荐顺序应为正整数&#x27;</span>,<span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&#x27;blur&#x27;</span>,&#125;,<br>        ],<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"有依赖数据校验判断\"><a href=\"#有依赖数据校验判断\" class=\"headerlink\" title=\"有依赖数据校验判断\"></a>有依赖数据校验判断</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-attr\">computed</span>: &#123;<br>        <span class=\"hljs-comment\">// 表单校验规则 在计算属性中可将值进行判断</span><br>        <span class=\"hljs-title function_\">rules</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> &#123;<br>                <span class=\"hljs-attr\">product</span>:[&#123; <span class=\"hljs-attr\">required</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">form</span>.<span class=\"hljs-property\">big</span> ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&quot;请输入商品名称&quot;</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&quot;blur&quot;</span> &#125;]<br>            &#125;;<br>        &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"自定义正则方式修改输入内容\"><a href=\"#自定义正则方式修改输入内容\" class=\"headerlink\" title=\"自定义正则方式修改输入内容\"></a>自定义正则方式修改输入内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"> &lt;el-form-item v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">&quot;showPrice&quot;</span> prop=<span class=\"hljs-string\">&quot;itemPrice&quot;</span> label=<span class=\"hljs-string\">&quot;面值&quot;</span>&gt;<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">              <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;addForm.itemPrice&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">              @<span class=\"hljs-attr\">keyup.native</span>=<span class=\"hljs-string\">&quot;InputNumber(&#x27;itemPrice&#x27;)&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">              <span class=\"hljs-attr\">maxlength</span>=<span class=\"hljs-string\">&quot;6&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">              <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;blur&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">            &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span></span><br>&lt;/el-form-item&gt;<br><br>  <span class=\"hljs-comment\">// 验证只能输入数字</span><br>   limitInputNumber (val) &#123;<br>     <span class=\"hljs-keyword\">if</span> (val) &#123;<br>       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">String</span>(val).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\D/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>     &#125;<br>     <span class=\"hljs-keyword\">return</span> val<br>   &#125;,<br>    <span class=\"hljs-comment\">// 限制只能输入数字(可以输入两位小数)</span><br>    <span class=\"hljs-title function_\">limitInputPointNumber</span>(<span class=\"hljs-params\">val, parent, property</span>) &#123;<br>      <span class=\"hljs-keyword\">let</span> tmap = <span class=\"hljs-string\">&#x27;&#x27;</span><br>      <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">0</span> || val === <span class=\"hljs-string\">&#x27;0&#x27;</span> || val === <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123;<br>        tmap = <span class=\"hljs-string\">&#x27;&#x27;</span><br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-literal\">null</span><br>        value = <span class=\"hljs-title class_\">String</span>(val).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/[^\\d.]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-comment\">// 清除“数字”和“.”以外的字符</span><br>        value = value.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/^\\./g</span>, <span class=\"hljs-string\">&#x27;0.&#x27;</span>) <span class=\"hljs-comment\">// 第一个. 添加0.</span><br>        value = value.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\.&#123;2,&#125;/g</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>) <span class=\"hljs-comment\">// 只保留第一个. 清除多余的</span><br>        value = value<br>          .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;$#$&#x27;</span>)<br>          .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\./g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>          .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;$#$&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>)<br>        value = value.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/^(-)*(\\d+)\\.(\\d\\d).*$/</span>, <span class=\"hljs-string\">&#x27;$1$2.$3&#x27;</span>) <span class=\"hljs-comment\">// 只能输入两个小数</span><br>        tmap = <span class=\"hljs-title class_\">Number</span>(value)<br>      &#125;<br>      <span class=\"hljs-variable language_\">this</span>[parent][property] = tmap<br>    &#125;,<br>    <span class=\"hljs-title class_\">InputNumber</span>(property) &#123;<br>     <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">addForm</span>[property] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">limitInputNumber</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">addForm</span>[property])<br>   &#125;,<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套验证-联动验证\"><a href=\"#嵌套验证-联动验证\" class=\"headerlink\" title=\"嵌套验证(联动验证)\"></a>嵌套验证(联动验证)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&lt;!-- region是一个对象,国家和城市是它的属性 --&gt;<br>  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-form-item</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;活动区域&quot;</span> <span class=\"hljs-attr\">prop</span>=<span class=\"hljs-string\">&quot;region&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;registData.region.country&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请选择国家&quot;</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;国家一&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;USA&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;国家二&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;China&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-select</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;registData.region.city&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请选择城市&quot;</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;城市一&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;shanghai&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-option</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;城市二&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;beijing&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-option</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-select</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-form-item</span>&gt;</span></span><br><br>  <span class=\"hljs-attr\">region</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;object&#x27;</span>,<br>      <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>,<br>      <span class=\"hljs-comment\">// 这里有两种处理,一种是自定义验证,拿到值后自己对属性进行验证,比较麻烦</span><br>      <span class=\"hljs-comment\">// validator: (rule, value, callback) =&gt; &#123;</span><br>      <span class=\"hljs-comment\">//   console.log(55, value)</span><br>      <span class=\"hljs-comment\">//   if (!value.country) &#123;</span><br>      <span class=\"hljs-comment\">//     callback(new Error(&#x27;请选择国家&#x27;))</span><br>      <span class=\"hljs-comment\">//   &#125; else if (!value.city) &#123;</span><br>      <span class=\"hljs-comment\">//     callback(new Error(&#x27;请选择城市&#x27;))</span><br>      <span class=\"hljs-comment\">//   &#125; else &#123;</span><br>      <span class=\"hljs-comment\">//     callback()</span><br>      <span class=\"hljs-comment\">//   &#125;</span><br>      <span class=\"hljs-comment\">// &#125;,</span><br>      <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&#x27;change&#x27;</span>,<br>      <span class=\"hljs-comment\">// 官网提供了对象的嵌套验证,只需要把需要验证的属性,放在fields对象里,就会按顺序进行验证</span><br>      <span class=\"hljs-attr\">fields</span>: &#123;<br>        <span class=\"hljs-attr\">country</span>: &#123;<span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;请选择国家&#x27;</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&#x27;blur&#x27;</span>&#125;,<br>        <span class=\"hljs-attr\">city</span>: &#123;<span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;请选择城市&#x27;</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">&#x27;blur&#x27;</span>&#125;<br>      &#125;<br>    &#125;<br>  ],<br></code></pre></td></tr></table></figure>\n"},{"title":"图片随屏幕滚动而滑入滑出","date":"2021-07-16T13:27:28.000Z","_content":"\n### 实现效果\n\n浏览文本，当即将浏览到图片时，进行加载动画。\n\n#### 主要\n\n> css 部分\n\n-   scale 控制图片缩放\n-   translateX 来控制左右移动\n\n> js 部分\n\n-   window.scrolly 纵向滚动距离\n-   window.innerHeight viewport 部分高度\n-   el.height 节点的高度\n-   el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口\n\n> `debounce` 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。\n\n### 在线地址\n\n![Scroll 效果演示](https://cl.ly/2k2e2H0b1U0J/Screen%20Recording%202017-07-18%20at%2010.04%20%E4%B8%8A%E5%8D%88.gif)（图片太大，可点击[外链](https://cl.ly/2k2e2H0b1U0J)查看，或查看[在线效果](http://soyaine.cn/JavaScript30/13%20-%20Slide%20in%20on%20Scroll/index-SOYAINE.html)。）\n\n### 初始代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n</head>\n<body>\n\n  <div class=\"site-wrap\">\n\n    <h1>滚动出现图片</h1>\n\n    <p>Consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariaturlores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Adipisicing elit. Tempore tempora rerum..</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n\n    <img src=\"http://unsplash.it/400/400\" class=\"align-left slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptates, deserunt facilis et iste corrupti omnis tenetur est. Iste ut est dicta dolor itaque adipisci, dolorum minima, veritatis earum provident error molestias. Ratione magni illo sint vel velit ut excepturi consectetur suscipit, earum modi accusamus voluptatem nostrum, praesentium numquam, reiciendis voluptas sit id quisquam. Consequatur in quis reprehenderit modi perspiciatis necessitatibus saepe, quidem, suscipit iure natus dignissimos ipsam, eligendi deleniti accusantium, rerum quibusdam fugit perferendis et optio recusandae sed ratione. Culpa, dolorum reprehenderit harum ab voluptas fuga, nisi eligendi natus maiores illum quas quos et aperiam aut doloremque optio maxime fugiat doloribus. Eum dolorum expedita quam, nesciunt</p>\n\n    <img src=\"http://unsplash.it/400/401\" class=\"align-right slide-in\">\n\n    <p> at provident praesentium atque quas rerum optio dignissimos repudiandae ullam illum quibusdam. Vel ad error quibusdam, illo ex totam placeat. Quos excepturi fuga, molestiae ea quisquam minus, ratione dicta consectetur officia omnis, doloribus voluptatibus? Veniam ipsum veritatis architecto, provident quas consequatur doloremque quam quidem earum expedita, ad delectus voluptatum, omnis praesentium nostrum qui aspernatur ea eaque adipisci et cumque ab? Ea voluptatum dolore itaque odio. Eius minima distinctio harum, officia ab nihil exercitationem. Tempora rem nemo nam temporibus molestias facilis minus ipsam quam doloribus consequatur debitis nesciunt tempore officiis aperiam quisquam, molestiae voluptates cum, fuga culpa. Distinctio accusamus quibusdam, tempore perspiciatis dolorum optio facere consequatur quidem ullam beatae architecto, ipsam sequi officiis dignissimos amet impedit natus necessitatibus tenetur repellendus dolor rem! Dicta dolorem, iure, facilis illo ex nihil ipsa amet officia, optio temporibus eum autem odit repellendus nisi. Possimus modi, corrupti error debitis doloribus dicta libero earum, sequi porro ut excepturi nostrum ea voluptatem nihil culpa? Ullam expedita eligendi obcaecati reiciendis velit provident omnis quas qui in corrupti est dolore facere ad hic, animi soluta assumenda consequuntur reprehenderit! Voluptate dolor nihil veniam laborum voluptas nisi pariatur sed optio accusantium quam consectetur, corrupti, sequi et consequuntur, excepturi doloremque. Tempore quis velit corporis neque fugit non sequi eaque rem hic. Facere, inventore, aspernatur. Accusantium modi atque, asperiores qui nobis soluta cumque suscipit excepturi possimus doloremque odit saepe perferendis temporibus molestiae nostrum voluptatum quis id sint quidem nesciunt culpa. Rerum labore dolor beatae blanditiis praesentium explicabo velit optio esse aperiam similique, voluptatem cum, maiores ipsa tempore. Reiciendis sed culpa atque inventore, nam ullam enim expedita consectetur id velit iusto alias vitae explicabo nemo neque odio reprehenderit soluta sint eaque. Aperiam, qui ut tenetur, voluptate doloremque officiis dicta quaerat voluptatem rerum natus magni. Eum amet autem dolor ullam.</p>\n\n    <img src=\"http://unsplash.it/200/500\" class=\"align-left slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet <img src=\"http://unsplash.it/200/200\" class=\"align-right slide-in\"> temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis</p>\n\n\n    <p>laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n\n    <img src=\"http://unsplash.it/400/400\" class=\"align-right slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n  </div>\n  <script>\n  </script>\n  <style>\n    html {\n      box-sizing: border-box;\n      background:#ffc600;\n      font-family:'helvetica neue';\n      font-size: 20px;\n      font-weight: 200;\n    }\n    body {\n      margin: 0;\n    }\n    *, *:before, *:after {\n      box-sizing: inherit;\n    }\n\n    h1 {\n      margin-top: 0;\n    }\n\n    .site-wrap {\n      max-width: 700px;\n      margin: 100px auto;\n      background:white;\n      padding:40px;\n      text-align: justify;\n    }\n\n    .align-left {\n      float:left;\n      margin-right:20px;\n    }\n\n    .align-right {\n      float:right;\n      margin-left:20px;\n    }\n\n    .slide-in {\n      opacity:0;\n      transition:all .5s;\n    }\n\n    .align-left.slide-in {\n      transform:translateX(-30%) scale(0.95);\n    }\n    .align-right.slide-in {\n      transform:translateX(30%) scale(0.95);\n    }\n\n    .slide-in.active {\n      opacity:1;\n      transform:translateX(0%) scale(1);\n    }\n\n  </style>\n\n</body>\n</html>\n\n```\n\n### 实例代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n</head>\n<body>\n\n  <div class=\"site-wrap\">\n\n    <h1>Slide in on Scroll</h1>\n\n    <p>滑动查看图片效果</p>\n\n    <p>Consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariaturlores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Adipisicing elit. Tempore tempora rerum..</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n\n    <img src=\"http://unsplash.it/400/402\" class=\"align-left slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptates, deserunt facilis et iste corrupti omnis tenetur est. Iste ut est dicta dolor itaque adipisci, dolorum minima, veritatis earum provident error molestias. Ratione magni illo sint vel velit ut excepturi consectetur suscipit, earum modi accusamus voluptatem nostrum, praesentium numquam, reiciendis voluptas sit id quisquam. Consequatur in quis reprehenderit modi perspiciatis necessitatibus saepe, quidem, suscipit iure natus dignissimos ipsam, eligendi deleniti accusantium, rerum quibusdam fugit perferendis et optio recusandae sed ratione. Culpa, dolorum reprehenderit harum ab voluptas fuga, nisi eligendi natus maiores illum quas quos et aperiam aut doloremque optio maxime fugiat doloribus. Eum dolorum expedita quam, nesciunt</p>\n\n    <img src=\"http://unsplash.it/400/401\" class=\"align-right slide-in\">\n\n    <p> at provident praesentium atque quas rerum optio dignissimos repudiandae ullam illum quibusdam. Vel ad error quibusdam, illo ex totam placeat. Quos excepturi fuga, molestiae ea quisquam minus, ratione dicta consectetur officia omnis, doloribus voluptatibus? Veniam ipsum veritatis architecto, provident quas consequatur doloremque quam quidem earum expedita, ad delectus voluptatum, omnis praesentium nostrum qui aspernatur ea eaque adipisci et cumque ab? Ea voluptatum dolore itaque odio. Eius minima distinctio harum, officia ab nihil exercitationem. Tempora rem nemo nam temporibus molestias facilis minus ipsam quam doloribus consequatur debitis nesciunt tempore officiis aperiam quisquam, molestiae voluptates cum, fuga culpa. Distinctio accusamus quibusdam, tempore perspiciatis dolorum optio facere consequatur quidem ullam beatae architecto, ipsam sequi officiis dignissimos amet impedit natus necessitatibus tenetur repellendus dolor rem! Dicta dolorem, iure, facilis illo ex nihil ipsa amet officia, optio temporibus eum autem odit repellendus nisi. Possimus modi, corrupti error debitis doloribus dicta libero earum, sequi porro ut excepturi nostrum ea voluptatem nihil culpa? Ullam expedita eligendi obcaecati reiciendis velit provident omnis quas qui in corrupti est dolore facere ad hic, animi soluta assumenda consequuntur reprehenderit! Voluptate dolor nihil veniam laborum voluptas nisi pariatur sed optio accusantium quam consectetur, corrupti, sequi et consequuntur, excepturi doloremque. Tempore quis velit corporis neque fugit non sequi eaque rem hic. Facere, inventore, aspernatur. Accusantium modi atque, asperiores qui nobis soluta cumque suscipit excepturi possimus doloremque odit saepe perferendis temporibus molestiae nostrum voluptatum quis id sint quidem nesciunt culpa. Rerum labore dolor beatae blanditiis praesentium explicabo velit optio esse aperiam similique, voluptatem cum, maiores ipsa tempore. Reiciendis sed culpa atque inventore, nam ullam enim expedita consectetur id velit iusto alias vitae explicabo nemo neque odio reprehenderit soluta sint eaque. Aperiam, qui ut tenetur, voluptate doloremque officiis dicta quaerat voluptatem rerum natus magni. Eum amet autem dolor ullam.</p>\n\n    <img src=\"http://unsplash.it/200/500\" class=\"align-left slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet <img src=\"http://unsplash.it/200/200\" class=\"align-right slide-in\"> temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis</p>\n\n\n    <p>laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n\n    <img src=\"http://unsplash.it/400/400\" class=\"align-right slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n  </div>\n\n  <script>\n    // 减少功能消耗\n    function debounce(func, wait = 20, immediate = true) {\n      var timeout;\n      return function() {\n        var context = this, args = arguments;\n        var later = function() {\n          timeout = null;\n          if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n      };\n    }\n    // 获取图片节点\n    const slideImages = document.querySelectorAll('.slide-in');\n    // 定义处理事件\n    function checkSlide(e) {\n        slideImages.forEach(img => {\n            const slideInAt = (window.scrollY + window.innerHeight) - img.height / 2;\n            // 图片底部\n            const imgBottom = img.offsetTop + img.height;\n            // 已滑过了图片的一半\n            const isHalfShow = slideInAt > img.offsetTop;\n            // 未完全滑过图片\n            const isNotScrollPast = window.scrollY < imgBottom;\n            if (isHalfShow && isNotScrollPast) {\n                img.classList.add('active');\n            } else {\n                img.classList.remove('active');\n            }\n     });\n    }\n    注册scroll事件 进行监听\n    window.addEventListener('scroll', debounce(checkSlide));\n\n  </script>\n\n  <style>\n    html {\n      box-sizing: border-box;\n      background:#ffc600;\n      font-family:'helvetica neue';\n      font-size: 20px;\n      font-weight: 200;\n    }\n    body {\n      margin: 0;\n    }\n    *, *:before, *:after {\n      box-sizing: inherit;\n    }\n\n    h1 {\n      margin-top: 0;\n    }\n\n    .site-wrap {\n      max-width: 700px;\n      margin: 100px auto;\n      background:white;\n      padding:40px;\n      text-align: justify;\n    }\n\n    .align-left {\n      float:left;\n      margin-right:20px;\n    }\n\n    .align-right {\n      float:right;\n      margin-left:20px;\n    }\n\n    .slide-in {\n      opacity:0;\n      transition:all .5s;\n    }\n\n    .align-left.slide-in {\n      transform:translateX(-30%) scale(0.95);\n    }\n    .align-right.slide-in {\n      transform:translateX(30%) scale(0.95);\n    }\n\n    .slide-in.active {\n      opacity:1;\n      transform:translateX(0%) scale(1);\n    }\n\n  </style>\n\n</body>\n</html>\n\n```\n","source":"_posts/2021-07/07-16滚动产生图片.md","raw":"---\ntitle: 图片随屏幕滚动而滑入滑出\ndate: 2021-07-16 21:27:28\ntags: 原生\ncategory: JavaScript\n---\n\n### 实现效果\n\n浏览文本，当即将浏览到图片时，进行加载动画。\n\n#### 主要\n\n> css 部分\n\n-   scale 控制图片缩放\n-   translateX 来控制左右移动\n\n> js 部分\n\n-   window.scrolly 纵向滚动距离\n-   window.innerHeight viewport 部分高度\n-   el.height 节点的高度\n-   el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口\n\n> `debounce` 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。\n\n### 在线地址\n\n![Scroll 效果演示](https://cl.ly/2k2e2H0b1U0J/Screen%20Recording%202017-07-18%20at%2010.04%20%E4%B8%8A%E5%8D%88.gif)（图片太大，可点击[外链](https://cl.ly/2k2e2H0b1U0J)查看，或查看[在线效果](http://soyaine.cn/JavaScript30/13%20-%20Slide%20in%20on%20Scroll/index-SOYAINE.html)。）\n\n### 初始代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n</head>\n<body>\n\n  <div class=\"site-wrap\">\n\n    <h1>滚动出现图片</h1>\n\n    <p>Consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariaturlores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Adipisicing elit. Tempore tempora rerum..</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n\n    <img src=\"http://unsplash.it/400/400\" class=\"align-left slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptates, deserunt facilis et iste corrupti omnis tenetur est. Iste ut est dicta dolor itaque adipisci, dolorum minima, veritatis earum provident error molestias. Ratione magni illo sint vel velit ut excepturi consectetur suscipit, earum modi accusamus voluptatem nostrum, praesentium numquam, reiciendis voluptas sit id quisquam. Consequatur in quis reprehenderit modi perspiciatis necessitatibus saepe, quidem, suscipit iure natus dignissimos ipsam, eligendi deleniti accusantium, rerum quibusdam fugit perferendis et optio recusandae sed ratione. Culpa, dolorum reprehenderit harum ab voluptas fuga, nisi eligendi natus maiores illum quas quos et aperiam aut doloremque optio maxime fugiat doloribus. Eum dolorum expedita quam, nesciunt</p>\n\n    <img src=\"http://unsplash.it/400/401\" class=\"align-right slide-in\">\n\n    <p> at provident praesentium atque quas rerum optio dignissimos repudiandae ullam illum quibusdam. Vel ad error quibusdam, illo ex totam placeat. Quos excepturi fuga, molestiae ea quisquam minus, ratione dicta consectetur officia omnis, doloribus voluptatibus? Veniam ipsum veritatis architecto, provident quas consequatur doloremque quam quidem earum expedita, ad delectus voluptatum, omnis praesentium nostrum qui aspernatur ea eaque adipisci et cumque ab? Ea voluptatum dolore itaque odio. Eius minima distinctio harum, officia ab nihil exercitationem. Tempora rem nemo nam temporibus molestias facilis minus ipsam quam doloribus consequatur debitis nesciunt tempore officiis aperiam quisquam, molestiae voluptates cum, fuga culpa. Distinctio accusamus quibusdam, tempore perspiciatis dolorum optio facere consequatur quidem ullam beatae architecto, ipsam sequi officiis dignissimos amet impedit natus necessitatibus tenetur repellendus dolor rem! Dicta dolorem, iure, facilis illo ex nihil ipsa amet officia, optio temporibus eum autem odit repellendus nisi. Possimus modi, corrupti error debitis doloribus dicta libero earum, sequi porro ut excepturi nostrum ea voluptatem nihil culpa? Ullam expedita eligendi obcaecati reiciendis velit provident omnis quas qui in corrupti est dolore facere ad hic, animi soluta assumenda consequuntur reprehenderit! Voluptate dolor nihil veniam laborum voluptas nisi pariatur sed optio accusantium quam consectetur, corrupti, sequi et consequuntur, excepturi doloremque. Tempore quis velit corporis neque fugit non sequi eaque rem hic. Facere, inventore, aspernatur. Accusantium modi atque, asperiores qui nobis soluta cumque suscipit excepturi possimus doloremque odit saepe perferendis temporibus molestiae nostrum voluptatum quis id sint quidem nesciunt culpa. Rerum labore dolor beatae blanditiis praesentium explicabo velit optio esse aperiam similique, voluptatem cum, maiores ipsa tempore. Reiciendis sed culpa atque inventore, nam ullam enim expedita consectetur id velit iusto alias vitae explicabo nemo neque odio reprehenderit soluta sint eaque. Aperiam, qui ut tenetur, voluptate doloremque officiis dicta quaerat voluptatem rerum natus magni. Eum amet autem dolor ullam.</p>\n\n    <img src=\"http://unsplash.it/200/500\" class=\"align-left slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet <img src=\"http://unsplash.it/200/200\" class=\"align-right slide-in\"> temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis</p>\n\n\n    <p>laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n\n    <img src=\"http://unsplash.it/400/400\" class=\"align-right slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n  </div>\n  <script>\n  </script>\n  <style>\n    html {\n      box-sizing: border-box;\n      background:#ffc600;\n      font-family:'helvetica neue';\n      font-size: 20px;\n      font-weight: 200;\n    }\n    body {\n      margin: 0;\n    }\n    *, *:before, *:after {\n      box-sizing: inherit;\n    }\n\n    h1 {\n      margin-top: 0;\n    }\n\n    .site-wrap {\n      max-width: 700px;\n      margin: 100px auto;\n      background:white;\n      padding:40px;\n      text-align: justify;\n    }\n\n    .align-left {\n      float:left;\n      margin-right:20px;\n    }\n\n    .align-right {\n      float:right;\n      margin-left:20px;\n    }\n\n    .slide-in {\n      opacity:0;\n      transition:all .5s;\n    }\n\n    .align-left.slide-in {\n      transform:translateX(-30%) scale(0.95);\n    }\n    .align-right.slide-in {\n      transform:translateX(30%) scale(0.95);\n    }\n\n    .slide-in.active {\n      opacity:1;\n      transform:translateX(0%) scale(1);\n    }\n\n  </style>\n\n</body>\n</html>\n\n```\n\n### 实例代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n</head>\n<body>\n\n  <div class=\"site-wrap\">\n\n    <h1>Slide in on Scroll</h1>\n\n    <p>滑动查看图片效果</p>\n\n    <p>Consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariaturlores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Adipisicing elit. Tempore tempora rerum..</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.</p>\n\n    <img src=\"http://unsplash.it/400/402\" class=\"align-left slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptates, deserunt facilis et iste corrupti omnis tenetur est. Iste ut est dicta dolor itaque adipisci, dolorum minima, veritatis earum provident error molestias. Ratione magni illo sint vel velit ut excepturi consectetur suscipit, earum modi accusamus voluptatem nostrum, praesentium numquam, reiciendis voluptas sit id quisquam. Consequatur in quis reprehenderit modi perspiciatis necessitatibus saepe, quidem, suscipit iure natus dignissimos ipsam, eligendi deleniti accusantium, rerum quibusdam fugit perferendis et optio recusandae sed ratione. Culpa, dolorum reprehenderit harum ab voluptas fuga, nisi eligendi natus maiores illum quas quos et aperiam aut doloremque optio maxime fugiat doloribus. Eum dolorum expedita quam, nesciunt</p>\n\n    <img src=\"http://unsplash.it/400/401\" class=\"align-right slide-in\">\n\n    <p> at provident praesentium atque quas rerum optio dignissimos repudiandae ullam illum quibusdam. Vel ad error quibusdam, illo ex totam placeat. Quos excepturi fuga, molestiae ea quisquam minus, ratione dicta consectetur officia omnis, doloribus voluptatibus? Veniam ipsum veritatis architecto, provident quas consequatur doloremque quam quidem earum expedita, ad delectus voluptatum, omnis praesentium nostrum qui aspernatur ea eaque adipisci et cumque ab? Ea voluptatum dolore itaque odio. Eius minima distinctio harum, officia ab nihil exercitationem. Tempora rem nemo nam temporibus molestias facilis minus ipsam quam doloribus consequatur debitis nesciunt tempore officiis aperiam quisquam, molestiae voluptates cum, fuga culpa. Distinctio accusamus quibusdam, tempore perspiciatis dolorum optio facere consequatur quidem ullam beatae architecto, ipsam sequi officiis dignissimos amet impedit natus necessitatibus tenetur repellendus dolor rem! Dicta dolorem, iure, facilis illo ex nihil ipsa amet officia, optio temporibus eum autem odit repellendus nisi. Possimus modi, corrupti error debitis doloribus dicta libero earum, sequi porro ut excepturi nostrum ea voluptatem nihil culpa? Ullam expedita eligendi obcaecati reiciendis velit provident omnis quas qui in corrupti est dolore facere ad hic, animi soluta assumenda consequuntur reprehenderit! Voluptate dolor nihil veniam laborum voluptas nisi pariatur sed optio accusantium quam consectetur, corrupti, sequi et consequuntur, excepturi doloremque. Tempore quis velit corporis neque fugit non sequi eaque rem hic. Facere, inventore, aspernatur. Accusantium modi atque, asperiores qui nobis soluta cumque suscipit excepturi possimus doloremque odit saepe perferendis temporibus molestiae nostrum voluptatum quis id sint quidem nesciunt culpa. Rerum labore dolor beatae blanditiis praesentium explicabo velit optio esse aperiam similique, voluptatem cum, maiores ipsa tempore. Reiciendis sed culpa atque inventore, nam ullam enim expedita consectetur id velit iusto alias vitae explicabo nemo neque odio reprehenderit soluta sint eaque. Aperiam, qui ut tenetur, voluptate doloremque officiis dicta quaerat voluptatem rerum natus magni. Eum amet autem dolor ullam.</p>\n\n    <img src=\"http://unsplash.it/200/500\" class=\"align-left slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet <img src=\"http://unsplash.it/200/200\" class=\"align-right slide-in\"> temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis</p>\n\n\n    <p>laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n\n    <img src=\"http://unsplash.it/400/400\" class=\"align-right slide-in\">\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.</p>\n  </div>\n\n  <script>\n    // 减少功能消耗\n    function debounce(func, wait = 20, immediate = true) {\n      var timeout;\n      return function() {\n        var context = this, args = arguments;\n        var later = function() {\n          timeout = null;\n          if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n      };\n    }\n    // 获取图片节点\n    const slideImages = document.querySelectorAll('.slide-in');\n    // 定义处理事件\n    function checkSlide(e) {\n        slideImages.forEach(img => {\n            const slideInAt = (window.scrollY + window.innerHeight) - img.height / 2;\n            // 图片底部\n            const imgBottom = img.offsetTop + img.height;\n            // 已滑过了图片的一半\n            const isHalfShow = slideInAt > img.offsetTop;\n            // 未完全滑过图片\n            const isNotScrollPast = window.scrollY < imgBottom;\n            if (isHalfShow && isNotScrollPast) {\n                img.classList.add('active');\n            } else {\n                img.classList.remove('active');\n            }\n     });\n    }\n    注册scroll事件 进行监听\n    window.addEventListener('scroll', debounce(checkSlide));\n\n  </script>\n\n  <style>\n    html {\n      box-sizing: border-box;\n      background:#ffc600;\n      font-family:'helvetica neue';\n      font-size: 20px;\n      font-weight: 200;\n    }\n    body {\n      margin: 0;\n    }\n    *, *:before, *:after {\n      box-sizing: inherit;\n    }\n\n    h1 {\n      margin-top: 0;\n    }\n\n    .site-wrap {\n      max-width: 700px;\n      margin: 100px auto;\n      background:white;\n      padding:40px;\n      text-align: justify;\n    }\n\n    .align-left {\n      float:left;\n      margin-right:20px;\n    }\n\n    .align-right {\n      float:right;\n      margin-left:20px;\n    }\n\n    .slide-in {\n      opacity:0;\n      transition:all .5s;\n    }\n\n    .align-left.slide-in {\n      transform:translateX(-30%) scale(0.95);\n    }\n    .align-right.slide-in {\n      transform:translateX(30%) scale(0.95);\n    }\n\n    .slide-in.active {\n      opacity:1;\n      transform:translateX(0%) scale(1);\n    }\n\n  </style>\n\n</body>\n</html>\n\n```\n","slug":"2021-07/07-16滚动产生图片","published":1,"updated":"2021-08-01T06:55:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c210w000ef60c6o02cado","content":"<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h3><p>浏览文本，当即将浏览到图片时，进行加载动画。</p>\n<h4 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h4><blockquote>\n<p>css 部分</p>\n</blockquote>\n<ul>\n<li>  scale 控制图片缩放</li>\n<li>  translateX 来控制左右移动</li>\n</ul>\n<blockquote>\n<p>js 部分</p>\n</blockquote>\n<ul>\n<li>  window.scrolly 纵向滚动距离</li>\n<li>  window.innerHeight viewport 部分高度</li>\n<li>  el.height 节点的高度</li>\n<li>  el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口</li>\n</ul>\n<blockquote>\n<p><code>debounce</code> 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。</p>\n</blockquote>\n<h3 id=\"在线地址\"><a href=\"#在线地址\" class=\"headerlink\" title=\"在线地址\"></a>在线地址</h3><p><img src=\"https://cl.ly/2k2e2H0b1U0J/Screen%20Recording%202017-07-18%20at%2010.04%20%E4%B8%8A%E5%8D%88.gif\" alt=\"Scroll 效果演示\">（图片太大，可点击<a href=\"https://cl.ly/2k2e2H0b1U0J\">外链</a>查看，或查看<a href=\"http://soyaine.cn/JavaScript30/13%20-%20Slide%20in%20on%20Scroll/index-SOYAINE.html\">在线效果</a>。）</p>\n<h3 id=\"初始代码\"><a href=\"#初始代码\" class=\"headerlink\" title=\"初始代码\"></a>初始代码</h3><figure class=\"highlight tp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tp\">&lt;<span class=\"hljs-comment\">!DOCTYPE html&gt;</span><br><span class=\"hljs-comment\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"hljs-comment\">&lt;head&gt;</span><br><span class=\"hljs-comment\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"hljs-comment\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"hljs-comment\">&lt;/head&gt;</span><br><span class=\"hljs-comment\">&lt;body&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">  &lt;div class=&quot;site-wrap&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;h1&gt;滚动出现图片&lt;/h1&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariaturlores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Adipisicing elit. Tempore tempora rerum..&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/400&quot; class=&quot;align-left slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptates, deserunt facilis et iste corrupti omnis tenetur est. Iste ut est dicta dolor itaque adipisci, dolorum minima, veritatis earum provident error molestias. Ratione magni illo sint vel velit ut excepturi consectetur suscipit, earum modi accusamus voluptatem nostrum, praesentium numquam, reiciendis voluptas sit id quisquam. Consequatur in quis reprehenderit modi perspiciatis necessitatibus saepe, quidem, suscipit iure natus dignissimos ipsam, eligendi deleniti accusantium, rerum quibusdam fugit perferendis et optio recusandae sed ratione. Culpa, dolorum reprehenderit harum ab voluptas fuga, nisi eligendi natus maiores illum quas quos et aperiam aut doloremque optio maxime fugiat doloribus. Eum dolorum expedita quam, nesciunt&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/401&quot; class=&quot;align-right slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt; at provident praesentium atque quas rerum optio dignissimos repudiandae ullam illum quibusdam. Vel ad error quibusdam, illo ex totam placeat. Quos excepturi fuga, molestiae ea quisquam minus, ratione dicta consectetur officia omnis, doloribus voluptatibus? Veniam ipsum veritatis architecto, provident quas consequatur doloremque quam quidem earum expedita, ad delectus voluptatum, omnis praesentium nostrum qui aspernatur ea eaque adipisci et cumque ab? Ea voluptatum dolore itaque odio. Eius minima distinctio harum, officia ab nihil exercitationem. Tempora rem nemo nam temporibus molestias facilis minus ipsam quam doloribus consequatur debitis nesciunt tempore officiis aperiam quisquam, molestiae voluptates cum, fuga culpa. Distinctio accusamus quibusdam, tempore perspiciatis dolorum optio facere consequatur quidem ullam beatae architecto, ipsam sequi officiis dignissimos amet impedit natus necessitatibus tenetur repellendus dolor rem! Dicta dolorem, iure, facilis illo ex nihil ipsa amet officia, optio temporibus eum autem odit repellendus nisi. Possimus modi, corrupti error debitis doloribus dicta libero earum, sequi porro ut excepturi nostrum ea voluptatem nihil culpa? Ullam expedita eligendi obcaecati reiciendis velit provident omnis quas qui in corrupti est dolore facere ad hic, animi soluta assumenda consequuntur reprehenderit! Voluptate dolor nihil veniam laborum voluptas nisi pariatur sed optio accusantium quam consectetur, corrupti, sequi et consequuntur, excepturi doloremque. Tempore quis velit corporis neque fugit non sequi eaque rem hic. Facere, inventore, aspernatur. Accusantium modi atque, asperiores qui nobis soluta cumque suscipit excepturi possimus doloremque odit saepe perferendis temporibus molestiae nostrum voluptatum quis id sint quidem nesciunt culpa. Rerum labore dolor beatae blanditiis praesentium explicabo velit optio esse aperiam similique, voluptatem cum, maiores ipsa tempore. Reiciendis sed culpa atque inventore, nam ullam enim expedita consectetur id velit iusto alias vitae explicabo nemo neque odio reprehenderit soluta sint eaque. Aperiam, qui ut tenetur, voluptate doloremque officiis dicta quaerat voluptatem rerum natus magni. Eum amet autem dolor ullam.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/200/500&quot; class=&quot;align-left slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet &lt;img src=&quot;http://unsplash.it/200/200&quot; class=&quot;align-right slide-in&quot;&gt; temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/400&quot; class=&quot;align-right slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\">  &lt;/div&gt;</span><br><span class=\"hljs-comment\">  &lt;script&gt;</span><br><span class=\"hljs-comment\">  &lt;/script&gt;</span><br><span class=\"hljs-comment\">  &lt;style&gt;</span><br><span class=\"hljs-comment\">    html &#123;</span><br><span class=\"hljs-comment\">      box-sizing: border-box;</span><br>      background:#ffc<span class=\"hljs-number\">600</span>;<br>      font-family:<span class=\"hljs-string\">&#x27;helvetica neue&#x27;</span>;<br>      font-size: <span class=\"hljs-number\">20</span>px;<br>      font-weight: <span class=\"hljs-number\">200</span>;<br>    &#125;<br>    body &#123;<br>      margin: <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    *, *:before, *:after &#123;<br>      box-sizing: inherit;<br>    &#125;<br><br>    h<span class=\"hljs-number\">1</span> &#123;<br>      margin-top: <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    .site-wrap &#123;<br>      max-width: <span class=\"hljs-number\">700</span>px;<br>      margin: <span class=\"hljs-number\">100</span>px auto;<br>      background:white;<br>      padding:<span class=\"hljs-number\">40</span>px;<br>      text-align: justify;<br>    &#125;<br><br>    .align-left &#123;<br>      float:left;<br>      margin-right:<span class=\"hljs-number\">20</span>px;<br>    &#125;<br><br>    .align-right &#123;<br>      float:right;<br>      margin-left:<span class=\"hljs-number\">20</span>px;<br>    &#125;<br><br>    .slide-in &#123;<br>      opacity:<span class=\"hljs-number\">0</span>;<br>      transition:all <span class=\"hljs-number\">.5</span>s;<br>    &#125;<br><br>    .align-left.slide-in &#123;<br>      transform:translateX(<span class=\"hljs-number\">-30</span>%) scale(<span class=\"hljs-number\">0</span><span class=\"hljs-number\">.95</span>);<br>    &#125;<br>    .align-right.slide-in &#123;<br>      transform:translateX(<span class=\"hljs-number\">30</span>%) scale(<span class=\"hljs-number\">0</span><span class=\"hljs-number\">.95</span>);<br>    &#125;<br><br>    .slide-in.active &#123;<br>      opacity:<span class=\"hljs-number\">1</span>;<br>      transform:translateX(<span class=\"hljs-number\">0</span>%) scale(<span class=\"hljs-number\">1</span>);<br>    &#125;<br><br>  &lt;/style&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><figure class=\"highlight tp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tp\">&lt;<span class=\"hljs-comment\">!DOCTYPE html&gt;</span><br><span class=\"hljs-comment\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"hljs-comment\">&lt;head&gt;</span><br><span class=\"hljs-comment\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"hljs-comment\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"hljs-comment\">&lt;/head&gt;</span><br><span class=\"hljs-comment\">&lt;body&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">  &lt;div class=&quot;site-wrap&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;h1&gt;Slide in on Scroll&lt;/h1&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;滑动查看图片效果&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariaturlores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Adipisicing elit. Tempore tempora rerum..&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/402&quot; class=&quot;align-left slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptates, deserunt facilis et iste corrupti omnis tenetur est. Iste ut est dicta dolor itaque adipisci, dolorum minima, veritatis earum provident error molestias. Ratione magni illo sint vel velit ut excepturi consectetur suscipit, earum modi accusamus voluptatem nostrum, praesentium numquam, reiciendis voluptas sit id quisquam. Consequatur in quis reprehenderit modi perspiciatis necessitatibus saepe, quidem, suscipit iure natus dignissimos ipsam, eligendi deleniti accusantium, rerum quibusdam fugit perferendis et optio recusandae sed ratione. Culpa, dolorum reprehenderit harum ab voluptas fuga, nisi eligendi natus maiores illum quas quos et aperiam aut doloremque optio maxime fugiat doloribus. Eum dolorum expedita quam, nesciunt&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/401&quot; class=&quot;align-right slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt; at provident praesentium atque quas rerum optio dignissimos repudiandae ullam illum quibusdam. Vel ad error quibusdam, illo ex totam placeat. Quos excepturi fuga, molestiae ea quisquam minus, ratione dicta consectetur officia omnis, doloribus voluptatibus? Veniam ipsum veritatis architecto, provident quas consequatur doloremque quam quidem earum expedita, ad delectus voluptatum, omnis praesentium nostrum qui aspernatur ea eaque adipisci et cumque ab? Ea voluptatum dolore itaque odio. Eius minima distinctio harum, officia ab nihil exercitationem. Tempora rem nemo nam temporibus molestias facilis minus ipsam quam doloribus consequatur debitis nesciunt tempore officiis aperiam quisquam, molestiae voluptates cum, fuga culpa. Distinctio accusamus quibusdam, tempore perspiciatis dolorum optio facere consequatur quidem ullam beatae architecto, ipsam sequi officiis dignissimos amet impedit natus necessitatibus tenetur repellendus dolor rem! Dicta dolorem, iure, facilis illo ex nihil ipsa amet officia, optio temporibus eum autem odit repellendus nisi. Possimus modi, corrupti error debitis doloribus dicta libero earum, sequi porro ut excepturi nostrum ea voluptatem nihil culpa? Ullam expedita eligendi obcaecati reiciendis velit provident omnis quas qui in corrupti est dolore facere ad hic, animi soluta assumenda consequuntur reprehenderit! Voluptate dolor nihil veniam laborum voluptas nisi pariatur sed optio accusantium quam consectetur, corrupti, sequi et consequuntur, excepturi doloremque. Tempore quis velit corporis neque fugit non sequi eaque rem hic. Facere, inventore, aspernatur. Accusantium modi atque, asperiores qui nobis soluta cumque suscipit excepturi possimus doloremque odit saepe perferendis temporibus molestiae nostrum voluptatum quis id sint quidem nesciunt culpa. Rerum labore dolor beatae blanditiis praesentium explicabo velit optio esse aperiam similique, voluptatem cum, maiores ipsa tempore. Reiciendis sed culpa atque inventore, nam ullam enim expedita consectetur id velit iusto alias vitae explicabo nemo neque odio reprehenderit soluta sint eaque. Aperiam, qui ut tenetur, voluptate doloremque officiis dicta quaerat voluptatem rerum natus magni. Eum amet autem dolor ullam.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/200/500&quot; class=&quot;align-left slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet &lt;img src=&quot;http://unsplash.it/200/200&quot; class=&quot;align-right slide-in&quot;&gt; temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/400&quot; class=&quot;align-right slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\">  &lt;/div&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">  &lt;script&gt;</span><br><span class=\"hljs-comment\">    // 减少功能消耗</span><br><span class=\"hljs-comment\">    function debounce(func, wait = 20, immediate = true) &#123;</span><br><span class=\"hljs-comment\">      var timeout;</span><br>      return function() &#123;<br>        var context = this, args = arguments;<br>        var later = function() &#123;<br>          timeout = null;<br>          if (<span class=\"hljs-comment\">!immediate) func.apply(context, args);</span><br>        &#125;;<br>        var callNow = immediate &amp;&amp; <span class=\"hljs-comment\">!timeout;</span><br>        clearTimeout(timeout);<br>        timeout = setTimeout(later, wait);<br>        if (callNow) func.apply(context, args);<br>      &#125;;<br>    &#125;<br>    <span class=\"hljs-comment\">// 获取图片节点</span><br><span class=\"hljs-comment\">    const slideImages = document.querySelectorAll(&#x27;.slide-in&#x27;);</span><br>    <span class=\"hljs-comment\">// 定义处理事件</span><br><span class=\"hljs-comment\">    function checkSlide(e) &#123;</span><br><span class=\"hljs-comment\">        slideImages.forEach(img =&gt; &#123;</span><br><span class=\"hljs-comment\">            const slideInAt = (window.scrollY + window.innerHeight) - img.height / 2;</span><br>            <span class=\"hljs-comment\">// 图片底部</span><br><span class=\"hljs-comment\">            const imgBottom = img.offsetTop + img.height;</span><br>            <span class=\"hljs-comment\">// 已滑过了图片的一半</span><br><span class=\"hljs-comment\">            const isHalfShow = slideInAt &gt; img.offsetTop;</span><br>            <span class=\"hljs-comment\">// 未完全滑过图片</span><br><span class=\"hljs-comment\">            const isNotScrollPast = window.scrollY &lt; imgBottom;</span><br>            if (isHalfShow &amp;&amp; isNotScrollPast) &#123;<br>                img.classList.add(<span class=\"hljs-string\">&#x27;active&#x27;</span>);<br>            &#125; else &#123;<br>                img.classList.remove(<span class=\"hljs-string\">&#x27;active&#x27;</span>);<br>            &#125;<br>     &#125;);<br>    &#125;<br>    注册scroll事件 进行监听<br>    window.addEventListener(<span class=\"hljs-string\">&#x27;scroll&#x27;</span>, debounce(checkSlide));<br><br>  &lt;/script&gt;<br><br>  &lt;style&gt;<br>    html &#123;<br>      box-sizing: border-box;<br>      background:#ffc<span class=\"hljs-number\">600</span>;<br>      font-family:<span class=\"hljs-string\">&#x27;helvetica neue&#x27;</span>;<br>      font-size: <span class=\"hljs-number\">20</span>px;<br>      font-weight: <span class=\"hljs-number\">200</span>;<br>    &#125;<br>    body &#123;<br>      margin: <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    *, *:before, *:after &#123;<br>      box-sizing: inherit;<br>    &#125;<br><br>    h<span class=\"hljs-number\">1</span> &#123;<br>      margin-top: <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    .site-wrap &#123;<br>      max-width: <span class=\"hljs-number\">700</span>px;<br>      margin: <span class=\"hljs-number\">100</span>px auto;<br>      background:white;<br>      padding:<span class=\"hljs-number\">40</span>px;<br>      text-align: justify;<br>    &#125;<br><br>    .align-left &#123;<br>      float:left;<br>      margin-right:<span class=\"hljs-number\">20</span>px;<br>    &#125;<br><br>    .align-right &#123;<br>      float:right;<br>      margin-left:<span class=\"hljs-number\">20</span>px;<br>    &#125;<br><br>    .slide-in &#123;<br>      opacity:<span class=\"hljs-number\">0</span>;<br>      transition:all <span class=\"hljs-number\">.5</span>s;<br>    &#125;<br><br>    .align-left.slide-in &#123;<br>      transform:translateX(<span class=\"hljs-number\">-30</span>%) scale(<span class=\"hljs-number\">0</span><span class=\"hljs-number\">.95</span>);<br>    &#125;<br>    .align-right.slide-in &#123;<br>      transform:translateX(<span class=\"hljs-number\">30</span>%) scale(<span class=\"hljs-number\">0</span><span class=\"hljs-number\">.95</span>);<br>    &#125;<br><br>    .slide-in.active &#123;<br>      opacity:<span class=\"hljs-number\">1</span>;<br>      transform:translateX(<span class=\"hljs-number\">0</span>%) scale(<span class=\"hljs-number\">1</span>);<br>    &#125;<br><br>  &lt;/style&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h3><p>浏览文本，当即将浏览到图片时，进行加载动画。</p>\n<h4 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h4><blockquote>\n<p>css 部分</p>\n</blockquote>\n<ul>\n<li>  scale 控制图片缩放</li>\n<li>  translateX 来控制左右移动</li>\n</ul>\n<blockquote>\n<p>js 部分</p>\n</blockquote>\n<ul>\n<li>  window.scrolly 纵向滚动距离</li>\n<li>  window.innerHeight viewport 部分高度</li>\n<li>  el.height 节点的高度</li>\n<li>  el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口</li>\n</ul>\n<blockquote>\n<p><code>debounce</code> 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。</p>\n</blockquote>\n<h3 id=\"在线地址\"><a href=\"#在线地址\" class=\"headerlink\" title=\"在线地址\"></a>在线地址</h3><p><img src=\"https://cl.ly/2k2e2H0b1U0J/Screen%20Recording%202017-07-18%20at%2010.04%20%E4%B8%8A%E5%8D%88.gif\" alt=\"Scroll 效果演示\">（图片太大，可点击<a href=\"https://cl.ly/2k2e2H0b1U0J\">外链</a>查看，或查看<a href=\"http://soyaine.cn/JavaScript30/13%20-%20Slide%20in%20on%20Scroll/index-SOYAINE.html\">在线效果</a>。）</p>\n<h3 id=\"初始代码\"><a href=\"#初始代码\" class=\"headerlink\" title=\"初始代码\"></a>初始代码</h3><figure class=\"highlight tp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tp\">&lt;<span class=\"hljs-comment\">!DOCTYPE html&gt;</span><br><span class=\"hljs-comment\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"hljs-comment\">&lt;head&gt;</span><br><span class=\"hljs-comment\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"hljs-comment\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"hljs-comment\">&lt;/head&gt;</span><br><span class=\"hljs-comment\">&lt;body&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">  &lt;div class=&quot;site-wrap&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;h1&gt;滚动出现图片&lt;/h1&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariaturlores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Adipisicing elit. Tempore tempora rerum..&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/400&quot; class=&quot;align-left slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptates, deserunt facilis et iste corrupti omnis tenetur est. Iste ut est dicta dolor itaque adipisci, dolorum minima, veritatis earum provident error molestias. Ratione magni illo sint vel velit ut excepturi consectetur suscipit, earum modi accusamus voluptatem nostrum, praesentium numquam, reiciendis voluptas sit id quisquam. Consequatur in quis reprehenderit modi perspiciatis necessitatibus saepe, quidem, suscipit iure natus dignissimos ipsam, eligendi deleniti accusantium, rerum quibusdam fugit perferendis et optio recusandae sed ratione. Culpa, dolorum reprehenderit harum ab voluptas fuga, nisi eligendi natus maiores illum quas quos et aperiam aut doloremque optio maxime fugiat doloribus. Eum dolorum expedita quam, nesciunt&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/401&quot; class=&quot;align-right slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt; at provident praesentium atque quas rerum optio dignissimos repudiandae ullam illum quibusdam. Vel ad error quibusdam, illo ex totam placeat. Quos excepturi fuga, molestiae ea quisquam minus, ratione dicta consectetur officia omnis, doloribus voluptatibus? Veniam ipsum veritatis architecto, provident quas consequatur doloremque quam quidem earum expedita, ad delectus voluptatum, omnis praesentium nostrum qui aspernatur ea eaque adipisci et cumque ab? Ea voluptatum dolore itaque odio. Eius minima distinctio harum, officia ab nihil exercitationem. Tempora rem nemo nam temporibus molestias facilis minus ipsam quam doloribus consequatur debitis nesciunt tempore officiis aperiam quisquam, molestiae voluptates cum, fuga culpa. Distinctio accusamus quibusdam, tempore perspiciatis dolorum optio facere consequatur quidem ullam beatae architecto, ipsam sequi officiis dignissimos amet impedit natus necessitatibus tenetur repellendus dolor rem! Dicta dolorem, iure, facilis illo ex nihil ipsa amet officia, optio temporibus eum autem odit repellendus nisi. Possimus modi, corrupti error debitis doloribus dicta libero earum, sequi porro ut excepturi nostrum ea voluptatem nihil culpa? Ullam expedita eligendi obcaecati reiciendis velit provident omnis quas qui in corrupti est dolore facere ad hic, animi soluta assumenda consequuntur reprehenderit! Voluptate dolor nihil veniam laborum voluptas nisi pariatur sed optio accusantium quam consectetur, corrupti, sequi et consequuntur, excepturi doloremque. Tempore quis velit corporis neque fugit non sequi eaque rem hic. Facere, inventore, aspernatur. Accusantium modi atque, asperiores qui nobis soluta cumque suscipit excepturi possimus doloremque odit saepe perferendis temporibus molestiae nostrum voluptatum quis id sint quidem nesciunt culpa. Rerum labore dolor beatae blanditiis praesentium explicabo velit optio esse aperiam similique, voluptatem cum, maiores ipsa tempore. Reiciendis sed culpa atque inventore, nam ullam enim expedita consectetur id velit iusto alias vitae explicabo nemo neque odio reprehenderit soluta sint eaque. Aperiam, qui ut tenetur, voluptate doloremque officiis dicta quaerat voluptatem rerum natus magni. Eum amet autem dolor ullam.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/200/500&quot; class=&quot;align-left slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet &lt;img src=&quot;http://unsplash.it/200/200&quot; class=&quot;align-right slide-in&quot;&gt; temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/400&quot; class=&quot;align-right slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\">  &lt;/div&gt;</span><br><span class=\"hljs-comment\">  &lt;script&gt;</span><br><span class=\"hljs-comment\">  &lt;/script&gt;</span><br><span class=\"hljs-comment\">  &lt;style&gt;</span><br><span class=\"hljs-comment\">    html &#123;</span><br><span class=\"hljs-comment\">      box-sizing: border-box;</span><br>      background:#ffc<span class=\"hljs-number\">600</span>;<br>      font-family:<span class=\"hljs-string\">&#x27;helvetica neue&#x27;</span>;<br>      font-size: <span class=\"hljs-number\">20</span>px;<br>      font-weight: <span class=\"hljs-number\">200</span>;<br>    &#125;<br>    body &#123;<br>      margin: <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    *, *:before, *:after &#123;<br>      box-sizing: inherit;<br>    &#125;<br><br>    h<span class=\"hljs-number\">1</span> &#123;<br>      margin-top: <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    .site-wrap &#123;<br>      max-width: <span class=\"hljs-number\">700</span>px;<br>      margin: <span class=\"hljs-number\">100</span>px auto;<br>      background:white;<br>      padding:<span class=\"hljs-number\">40</span>px;<br>      text-align: justify;<br>    &#125;<br><br>    .align-left &#123;<br>      float:left;<br>      margin-right:<span class=\"hljs-number\">20</span>px;<br>    &#125;<br><br>    .align-right &#123;<br>      float:right;<br>      margin-left:<span class=\"hljs-number\">20</span>px;<br>    &#125;<br><br>    .slide-in &#123;<br>      opacity:<span class=\"hljs-number\">0</span>;<br>      transition:all <span class=\"hljs-number\">.5</span>s;<br>    &#125;<br><br>    .align-left.slide-in &#123;<br>      transform:translateX(<span class=\"hljs-number\">-30</span>%) scale(<span class=\"hljs-number\">0</span><span class=\"hljs-number\">.95</span>);<br>    &#125;<br>    .align-right.slide-in &#123;<br>      transform:translateX(<span class=\"hljs-number\">30</span>%) scale(<span class=\"hljs-number\">0</span><span class=\"hljs-number\">.95</span>);<br>    &#125;<br><br>    .slide-in.active &#123;<br>      opacity:<span class=\"hljs-number\">1</span>;<br>      transform:translateX(<span class=\"hljs-number\">0</span>%) scale(<span class=\"hljs-number\">1</span>);<br>    &#125;<br><br>  &lt;/style&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><figure class=\"highlight tp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tp\">&lt;<span class=\"hljs-comment\">!DOCTYPE html&gt;</span><br><span class=\"hljs-comment\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"hljs-comment\">&lt;head&gt;</span><br><span class=\"hljs-comment\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"hljs-comment\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"hljs-comment\">&lt;/head&gt;</span><br><span class=\"hljs-comment\">&lt;body&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">  &lt;div class=&quot;site-wrap&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;h1&gt;Slide in on Scroll&lt;/h1&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;滑动查看图片效果&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariaturlores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Adipisicing elit. Tempore tempora rerum..&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore tempora rerum, est autem cupiditate, corporis a qui libero ipsum delectus quidem dolor at nulla, adipisci veniam in reiciendis aut asperiores omnis blanditiis quod quas laborum nam! Fuga ad tempora in aspernatur pariatur fugit quibusdam dolores sunt esse magni, ut, dignissimos.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/402&quot; class=&quot;align-left slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptates, deserunt facilis et iste corrupti omnis tenetur est. Iste ut est dicta dolor itaque adipisci, dolorum minima, veritatis earum provident error molestias. Ratione magni illo sint vel velit ut excepturi consectetur suscipit, earum modi accusamus voluptatem nostrum, praesentium numquam, reiciendis voluptas sit id quisquam. Consequatur in quis reprehenderit modi perspiciatis necessitatibus saepe, quidem, suscipit iure natus dignissimos ipsam, eligendi deleniti accusantium, rerum quibusdam fugit perferendis et optio recusandae sed ratione. Culpa, dolorum reprehenderit harum ab voluptas fuga, nisi eligendi natus maiores illum quas quos et aperiam aut doloremque optio maxime fugiat doloribus. Eum dolorum expedita quam, nesciunt&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/401&quot; class=&quot;align-right slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt; at provident praesentium atque quas rerum optio dignissimos repudiandae ullam illum quibusdam. Vel ad error quibusdam, illo ex totam placeat. Quos excepturi fuga, molestiae ea quisquam minus, ratione dicta consectetur officia omnis, doloribus voluptatibus? Veniam ipsum veritatis architecto, provident quas consequatur doloremque quam quidem earum expedita, ad delectus voluptatum, omnis praesentium nostrum qui aspernatur ea eaque adipisci et cumque ab? Ea voluptatum dolore itaque odio. Eius minima distinctio harum, officia ab nihil exercitationem. Tempora rem nemo nam temporibus molestias facilis minus ipsam quam doloribus consequatur debitis nesciunt tempore officiis aperiam quisquam, molestiae voluptates cum, fuga culpa. Distinctio accusamus quibusdam, tempore perspiciatis dolorum optio facere consequatur quidem ullam beatae architecto, ipsam sequi officiis dignissimos amet impedit natus necessitatibus tenetur repellendus dolor rem! Dicta dolorem, iure, facilis illo ex nihil ipsa amet officia, optio temporibus eum autem odit repellendus nisi. Possimus modi, corrupti error debitis doloribus dicta libero earum, sequi porro ut excepturi nostrum ea voluptatem nihil culpa? Ullam expedita eligendi obcaecati reiciendis velit provident omnis quas qui in corrupti est dolore facere ad hic, animi soluta assumenda consequuntur reprehenderit! Voluptate dolor nihil veniam laborum voluptas nisi pariatur sed optio accusantium quam consectetur, corrupti, sequi et consequuntur, excepturi doloremque. Tempore quis velit corporis neque fugit non sequi eaque rem hic. Facere, inventore, aspernatur. Accusantium modi atque, asperiores qui nobis soluta cumque suscipit excepturi possimus doloremque odit saepe perferendis temporibus molestiae nostrum voluptatum quis id sint quidem nesciunt culpa. Rerum labore dolor beatae blanditiis praesentium explicabo velit optio esse aperiam similique, voluptatem cum, maiores ipsa tempore. Reiciendis sed culpa atque inventore, nam ullam enim expedita consectetur id velit iusto alias vitae explicabo nemo neque odio reprehenderit soluta sint eaque. Aperiam, qui ut tenetur, voluptate doloremque officiis dicta quaerat voluptatem rerum natus magni. Eum amet autem dolor ullam.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/200/500&quot; class=&quot;align-left slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet &lt;img src=&quot;http://unsplash.it/200/200&quot; class=&quot;align-right slide-in&quot;&gt; temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;img src=&quot;http://unsplash.it/400/400&quot; class=&quot;align-right slide-in&quot;&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\">    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio maiores adipisci quibusdam repudiandae dolor vero placeat esse sit! Quibusdam saepe aperiam explicabo placeat optio, consequuntur nihil voluptatibus expedita quia vero perferendis, deserunt et incidunt eveniet temporibus doloremque possimus facilis. Possimus labore, officia dolore! Eaque ratione saepe, alias harum laboriosam deserunt laudantium blanditiis eum explicabo placeat reiciendis labore iste sint. Consectetur expedita dignissimos, non quos distinctio, eos rerum facilis eligendi. Asperiores laudantium, rerum ratione consequatur, culpa consectetur possimus atque ab tempore illum non dolor nesciunt. Neque, rerum. A vel non incidunt, quod doloremque dignissimos necessitatibus aliquid laboriosam architecto at cupiditate commodi expedita in, quae blanditiis. Deserunt labore sequi, repellat laboriosam est, doloremque culpa reiciendis tempore excepturi. Enim nostrum fugit itaque vel corporis ullam sed tenetur ipsa qui rem quam error sint, libero. Laboriosam rem, ratione. Autem blanditiis laborum neque repudiandae quam, cumque, voluptate veritatis itaque, placeat veniam ad nisi. Expedita, laborum reprehenderit ratione soluta velit natus, odit mollitia. Corporis rerum minima fugiat in nostrum. Assumenda natus cupiditate hic quidem ex, quas, amet ipsum esse dolore facilis beatae maxime qui inventore, iste? Maiores dignissimos dolore culpa debitis voluptatem harum, excepturi enim reiciendis, tempora ab ipsam illum aspernatur quasi qui porro saepe iure sunt eligendi tenetur quaerat ducimus quas sequi omnis aperiam suscipit! Molestiae obcaecati officiis quo, ratione eveniet, provident pariatur. Veniam quasi expedita distinctio, itaque molestiae sequi, dolorum nisi repellendus quia facilis iusto dignissimos nam? Tenetur fugit quos autem nihil, perspiciatis expedita enim tempore, alias ab maiores quis necessitatibus distinctio molestias eum, quidem. Delectus impedit quidem laborum, fugit vel neque quo, ipsam, quasi aspernatur quas odio nihil? Veniam amet reiciendis blanditiis quis reprehenderit repudiandae neque, ab ducimus, odit excepturi voluptate saepe ipsam. Voluptatem eum error voluptas porro officiis, amet! Molestias, fugit, ut! Tempore non magnam, amet, facere ducimus accusantium eos veritatis neque.&lt;/p&gt;</span><br><span class=\"hljs-comment\">  &lt;/div&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">  &lt;script&gt;</span><br><span class=\"hljs-comment\">    // 减少功能消耗</span><br><span class=\"hljs-comment\">    function debounce(func, wait = 20, immediate = true) &#123;</span><br><span class=\"hljs-comment\">      var timeout;</span><br>      return function() &#123;<br>        var context = this, args = arguments;<br>        var later = function() &#123;<br>          timeout = null;<br>          if (<span class=\"hljs-comment\">!immediate) func.apply(context, args);</span><br>        &#125;;<br>        var callNow = immediate &amp;&amp; <span class=\"hljs-comment\">!timeout;</span><br>        clearTimeout(timeout);<br>        timeout = setTimeout(later, wait);<br>        if (callNow) func.apply(context, args);<br>      &#125;;<br>    &#125;<br>    <span class=\"hljs-comment\">// 获取图片节点</span><br><span class=\"hljs-comment\">    const slideImages = document.querySelectorAll(&#x27;.slide-in&#x27;);</span><br>    <span class=\"hljs-comment\">// 定义处理事件</span><br><span class=\"hljs-comment\">    function checkSlide(e) &#123;</span><br><span class=\"hljs-comment\">        slideImages.forEach(img =&gt; &#123;</span><br><span class=\"hljs-comment\">            const slideInAt = (window.scrollY + window.innerHeight) - img.height / 2;</span><br>            <span class=\"hljs-comment\">// 图片底部</span><br><span class=\"hljs-comment\">            const imgBottom = img.offsetTop + img.height;</span><br>            <span class=\"hljs-comment\">// 已滑过了图片的一半</span><br><span class=\"hljs-comment\">            const isHalfShow = slideInAt &gt; img.offsetTop;</span><br>            <span class=\"hljs-comment\">// 未完全滑过图片</span><br><span class=\"hljs-comment\">            const isNotScrollPast = window.scrollY &lt; imgBottom;</span><br>            if (isHalfShow &amp;&amp; isNotScrollPast) &#123;<br>                img.classList.add(<span class=\"hljs-string\">&#x27;active&#x27;</span>);<br>            &#125; else &#123;<br>                img.classList.remove(<span class=\"hljs-string\">&#x27;active&#x27;</span>);<br>            &#125;<br>     &#125;);<br>    &#125;<br>    注册scroll事件 进行监听<br>    window.addEventListener(<span class=\"hljs-string\">&#x27;scroll&#x27;</span>, debounce(checkSlide));<br><br>  &lt;/script&gt;<br><br>  &lt;style&gt;<br>    html &#123;<br>      box-sizing: border-box;<br>      background:#ffc<span class=\"hljs-number\">600</span>;<br>      font-family:<span class=\"hljs-string\">&#x27;helvetica neue&#x27;</span>;<br>      font-size: <span class=\"hljs-number\">20</span>px;<br>      font-weight: <span class=\"hljs-number\">200</span>;<br>    &#125;<br>    body &#123;<br>      margin: <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    *, *:before, *:after &#123;<br>      box-sizing: inherit;<br>    &#125;<br><br>    h<span class=\"hljs-number\">1</span> &#123;<br>      margin-top: <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    .site-wrap &#123;<br>      max-width: <span class=\"hljs-number\">700</span>px;<br>      margin: <span class=\"hljs-number\">100</span>px auto;<br>      background:white;<br>      padding:<span class=\"hljs-number\">40</span>px;<br>      text-align: justify;<br>    &#125;<br><br>    .align-left &#123;<br>      float:left;<br>      margin-right:<span class=\"hljs-number\">20</span>px;<br>    &#125;<br><br>    .align-right &#123;<br>      float:right;<br>      margin-left:<span class=\"hljs-number\">20</span>px;<br>    &#125;<br><br>    .slide-in &#123;<br>      opacity:<span class=\"hljs-number\">0</span>;<br>      transition:all <span class=\"hljs-number\">.5</span>s;<br>    &#125;<br><br>    .align-left.slide-in &#123;<br>      transform:translateX(<span class=\"hljs-number\">-30</span>%) scale(<span class=\"hljs-number\">0</span><span class=\"hljs-number\">.95</span>);<br>    &#125;<br>    .align-right.slide-in &#123;<br>      transform:translateX(<span class=\"hljs-number\">30</span>%) scale(<span class=\"hljs-number\">0</span><span class=\"hljs-number\">.95</span>);<br>    &#125;<br><br>    .slide-in.active &#123;<br>      opacity:<span class=\"hljs-number\">1</span>;<br>      transform:translateX(<span class=\"hljs-number\">0</span>%) scale(<span class=\"hljs-number\">1</span>);<br>    &#125;<br><br>  &lt;/style&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure>\n"},{"title":"混入mixins","date":"2021-07-13T13:22:28.000Z","_content":"\n### [混入（mixins）](https://cn.vuejs.org/v2/guide/mixins.html)\n\n-   官网指出： 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。\n-   当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。\n-   同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。\n\n## 主要\n\n> 定义看不懂\n\n#### 定义混入组件\n\n```\nexport default {\n    data() {\n        return {\n            num : 0\n        }\n    },\n    methods: {\n        handleclick(){\n            this.num = this.num ++\n        }\n    }\n}\n\n\n```\n\n#### 混入引用到组件（局部）\n\n总的说是混入到这里面就是和所有的重合到一起，这样可以获取到混入组件的相关内容了\n\n```\n   <template>\n  <div>\n      <h1>{{num}}</h1>\n      <button @click=\"handleclick\">点击每次加1</button>\n  </div>\n</template>\n\n<script>\nimport minin from './minxin/minxin'\nexport default {\n  mixins: [minin],\n  data(){\n    return {\n    }\n  },\n  methods: {\n  }\n}\n</script>\n```\n\n## 全局混入\n\n> 定义全局混入,main.js 中引入。在需要的使用的页面直接使用，不需要再引入（使用方法同局部混入）\n\n```\nVue.mixin({\n    data () {\n        rerutn {\n\n        }\n    },\n    create () {},\n    methods: {\n        clgFn(){\n            console.log('混入的mixin方法')\n        },\n    },\n})\n\n```\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-07/07-13Vue-mixins.md","raw":"---\ntitle: 混入mixins\ndate: 2021-07-13 21:22:28\ntags: Vue\ncategory: Vue\n---\n\n### [混入（mixins）](https://cn.vuejs.org/v2/guide/mixins.html)\n\n-   官网指出： 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。\n-   当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。\n-   同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。\n\n## 主要\n\n> 定义看不懂\n\n#### 定义混入组件\n\n```\nexport default {\n    data() {\n        return {\n            num : 0\n        }\n    },\n    methods: {\n        handleclick(){\n            this.num = this.num ++\n        }\n    }\n}\n\n\n```\n\n#### 混入引用到组件（局部）\n\n总的说是混入到这里面就是和所有的重合到一起，这样可以获取到混入组件的相关内容了\n\n```\n   <template>\n  <div>\n      <h1>{{num}}</h1>\n      <button @click=\"handleclick\">点击每次加1</button>\n  </div>\n</template>\n\n<script>\nimport minin from './minxin/minxin'\nexport default {\n  mixins: [minin],\n  data(){\n    return {\n    }\n  },\n  methods: {\n  }\n}\n</script>\n```\n\n## 全局混入\n\n> 定义全局混入,main.js 中引入。在需要的使用的页面直接使用，不需要再引入（使用方法同局部混入）\n\n```\nVue.mixin({\n    data () {\n        rerutn {\n\n        }\n    },\n    create () {},\n    methods: {\n        clgFn(){\n            console.log('混入的mixin方法')\n        },\n    },\n})\n\n```\n\n![BG图片](/img/1.jpg)\n","slug":"2021-07/07-13Vue-mixins","published":1,"updated":"2021-08-05T15:16:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c210y000if60c2mww59ep","content":"<h3 id=\"混入（mixins）\"><a href=\"#混入（mixins）\" class=\"headerlink\" title=\"混入（mixins）\"></a><a href=\"https://cn.vuejs.org/v2/guide/mixins.html\">混入（mixins）</a></h3><ul>\n<li>  官网指出： 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</li>\n<li>  当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</li>\n<li>  同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。</li>\n</ul>\n<h2 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h2><blockquote>\n<p>定义看不懂</p>\n</blockquote>\n<h4 id=\"定义混入组件\"><a href=\"#定义混入组件\" class=\"headerlink\" title=\"定义混入组件\"></a>定义混入组件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>    <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            num : <span class=\"hljs-number\">0</span><br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">methods</span>: &#123;<br>        <span class=\"hljs-title function_\">handleclick</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">num</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">num</span> ++<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"混入引用到组件（局部）\"><a href=\"#混入引用到组件（局部）\" class=\"headerlink\" title=\"混入引用到组件（局部）\"></a>混入引用到组件（局部）</h4><p>总的说是混入到这里面就是和所有的重合到一起，这样可以获取到混入组件的相关内容了</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\">   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">num</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleclick&quot;</span>&gt;</span>点击每次加1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> minin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./minxin/minxin&#x27;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-attr\">mixins</span>: [minin],</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>)&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"hljs-keyword\">return</span> &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-attr\">methods</span>: &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"全局混入\"><a href=\"#全局混入\" class=\"headerlink\" title=\"全局混入\"></a>全局混入</h2><blockquote>\n<p>定义全局混入,main.js 中引入。在需要的使用的页面直接使用，不需要再引入（使用方法同局部混入）</p>\n</blockquote>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">Vue.<span class=\"hljs-keyword\">mixin</span>(&#123;<br>    data () &#123;<br>        rerutn &#123;<br><br>        &#125;<br>    &#125;,<br>    create () &#123;&#125;,<br>    methods: &#123;<br>        clgFn()&#123;<br>            console.log(<span class=\"hljs-string\">&#x27;混入的mixin方法&#x27;</span>)<br>        &#125;,<br>    &#125;,<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"混入（mixins）\"><a href=\"#混入（mixins）\" class=\"headerlink\" title=\"混入（mixins）\"></a><a href=\"https://cn.vuejs.org/v2/guide/mixins.html\">混入（mixins）</a></h3><ul>\n<li>  官网指出： 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</li>\n<li>  当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</li>\n<li>  同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。</li>\n</ul>\n<h2 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h2><blockquote>\n<p>定义看不懂</p>\n</blockquote>\n<h4 id=\"定义混入组件\"><a href=\"#定义混入组件\" class=\"headerlink\" title=\"定义混入组件\"></a>定义混入组件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>    <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            num : <span class=\"hljs-number\">0</span><br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">methods</span>: &#123;<br>        <span class=\"hljs-title function_\">handleclick</span>(<span class=\"hljs-params\"></span>)&#123;<br>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">num</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">num</span> ++<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"混入引用到组件（局部）\"><a href=\"#混入引用到组件（局部）\" class=\"headerlink\" title=\"混入引用到组件（局部）\"></a>混入引用到组件（局部）</h4><p>总的说是混入到这里面就是和所有的重合到一起，这样可以获取到混入组件的相关内容了</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\">   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">num</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleclick&quot;</span>&gt;</span>点击每次加1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">import</span> minin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./minxin/minxin&#x27;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-attr\">mixins</span>: [minin],</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>)&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"hljs-keyword\">return</span> &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-attr\">methods</span>: &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"全局混入\"><a href=\"#全局混入\" class=\"headerlink\" title=\"全局混入\"></a>全局混入</h2><blockquote>\n<p>定义全局混入,main.js 中引入。在需要的使用的页面直接使用，不需要再引入（使用方法同局部混入）</p>\n</blockquote>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">Vue.<span class=\"hljs-keyword\">mixin</span>(&#123;<br>    data () &#123;<br>        rerutn &#123;<br><br>        &#125;<br>    &#125;,<br>    create () &#123;&#125;,<br>    methods: &#123;<br>        clgFn()&#123;<br>            console.log(<span class=\"hljs-string\">&#x27;混入的mixin方法&#x27;</span>)<br>        &#125;,<br>    &#125;,<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"过滤器filter","date":"2021-07-19T12:10:11.000Z","_content":"\n### [过滤器](https://cn.vuejs.org/v2/guide/filters.html)\n\n## 全局过滤器\n\n我们可以直接在 vue 对象上使用 filter 方法注册过滤器，这种全局注册的过滤器在任何一个组件内都可以使用。\n\n```\nVue.filter('formatTime', function (value) {\n  const date = new Date(val);\n  const hour = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  return `${hour} : ${minutes} : ${seconds}`;\n})\n```\n\n#### 使用方式\n\n```\n<template>\n  <div>\n      <h2>vue过滤器</h2>\n      <p>{{ new Date() | formatTime}}</p>\n      <p>{{ 1627742058904 | formatTime}}</p>\n  </div>\n</template>\n```\n\n> 可以串联使用 `{{ value | filterA | filterB }} `\n> 可以传递参数`接收参数 {{ value | filterA('arg1') }}`\n\n## 局部注册\n\n注册组件内部过滤器则只能在当前组件内使用\n\n```\nexport default{\n    data () {\n        return {}\n    },\n    filters: {\n        formatTime(val,type){\n            if(type){\n              return  new Date(val).formDate(type)\n            }\n          return new Date(val).formDate('yyyy-MM-DD hh:mm:ss')\n        }\n    }\n}\n```\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-07/07-19Vue过滤器.md","raw":"---\ntitle: 过滤器filter\ndate: 2021-07-19 20:10:11\ntags: 原生\ncategory: JavaScript\n---\n\n### [过滤器](https://cn.vuejs.org/v2/guide/filters.html)\n\n## 全局过滤器\n\n我们可以直接在 vue 对象上使用 filter 方法注册过滤器，这种全局注册的过滤器在任何一个组件内都可以使用。\n\n```\nVue.filter('formatTime', function (value) {\n  const date = new Date(val);\n  const hour = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  return `${hour} : ${minutes} : ${seconds}`;\n})\n```\n\n#### 使用方式\n\n```\n<template>\n  <div>\n      <h2>vue过滤器</h2>\n      <p>{{ new Date() | formatTime}}</p>\n      <p>{{ 1627742058904 | formatTime}}</p>\n  </div>\n</template>\n```\n\n> 可以串联使用 `{{ value | filterA | filterB }} `\n> 可以传递参数`接收参数 {{ value | filterA('arg1') }}`\n\n## 局部注册\n\n注册组件内部过滤器则只能在当前组件内使用\n\n```\nexport default{\n    data () {\n        return {}\n    },\n    filters: {\n        formatTime(val,type){\n            if(type){\n              return  new Date(val).formDate(type)\n            }\n          return new Date(val).formDate('yyyy-MM-DD hh:mm:ss')\n        }\n    }\n}\n```\n\n![BG图片](/img/1.jpg)\n","slug":"2021-07/07-19Vue过滤器","published":1,"updated":"2021-08-01T06:56:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c210z000lf60cbyyz9dbp","content":"<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a><a href=\"https://cn.vuejs.org/v2/guide/filters.html\">过滤器</a></h3><h2 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h2><p>我们可以直接在 vue 对象上使用 filter 方法注册过滤器，这种全局注册的过滤器在任何一个组件内都可以使用。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\">Vue.filter(<span class=\"hljs-string\">&#x27;formatTime&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">date</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(val);<br>  <span class=\"hljs-keyword\">const</span> hour = <span class=\"hljs-built_in\">date</span>.getHours();<br>  <span class=\"hljs-keyword\">const</span> minutes = <span class=\"hljs-built_in\">date</span>.getMinutes();<br>  <span class=\"hljs-keyword\">const</span> seconds = <span class=\"hljs-built_in\">date</span>.getSeconds();<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;hour&#125;</span> : <span class=\"hljs-subst\">$&#123;minutes&#125;</span> : <span class=\"hljs-subst\">$&#123;seconds&#125;</span>`</span>;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h4><figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>vue过滤器<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">new</span> Date() | formatTime&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">1627742058904</span> | formatTime&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以串联使用 <code>&#123;&#123; value | filterA | filterB &#125;&#125; </code><br>可以传递参数<code>接收参数 &#123;&#123; value | filterA('arg1') &#125;&#125;</code></p>\n</blockquote>\n<h2 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h2><p>注册组件内部过滤器则只能在当前组件内使用</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">export default&#123;<br>    data <span class=\"hljs-literal\">()</span> &#123;<br>        return &#123;&#125;<br>    &#125;,<br>    filters: &#123;<br>        format<span class=\"hljs-constructor\">Time(<span class=\"hljs-params\">val</span>,<span class=\"hljs-params\">type</span>)</span>&#123;<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">type</span>)&#123;<br>              return  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date(<span class=\"hljs-params\">val</span>)</span>.form<span class=\"hljs-constructor\">Date(<span class=\"hljs-params\">type</span>)</span><br>            &#125;<br>          return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date(<span class=\"hljs-params\">val</span>)</span>.form<span class=\"hljs-constructor\">Date(&#x27;<span class=\"hljs-params\">yyyy</span>-MM-DD <span class=\"hljs-params\">hh</span>:<span class=\"hljs-params\">mm</span>:<span class=\"hljs-params\">ss</span>&#x27;)</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a><a href=\"https://cn.vuejs.org/v2/guide/filters.html\">过滤器</a></h3><h2 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h2><p>我们可以直接在 vue 对象上使用 filter 方法注册过滤器，这种全局注册的过滤器在任何一个组件内都可以使用。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\">Vue.filter(<span class=\"hljs-string\">&#x27;formatTime&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">date</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(val);<br>  <span class=\"hljs-keyword\">const</span> hour = <span class=\"hljs-built_in\">date</span>.getHours();<br>  <span class=\"hljs-keyword\">const</span> minutes = <span class=\"hljs-built_in\">date</span>.getMinutes();<br>  <span class=\"hljs-keyword\">const</span> seconds = <span class=\"hljs-built_in\">date</span>.getSeconds();<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;hour&#125;</span> : <span class=\"hljs-subst\">$&#123;minutes&#125;</span> : <span class=\"hljs-subst\">$&#123;seconds&#125;</span>`</span>;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h4><figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>vue过滤器<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">new</span> Date() | formatTime&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">1627742058904</span> | formatTime&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以串联使用 <code>&#123;&#123; value | filterA | filterB &#125;&#125; </code><br>可以传递参数<code>接收参数 &#123;&#123; value | filterA('arg1') &#125;&#125;</code></p>\n</blockquote>\n<h2 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h2><p>注册组件内部过滤器则只能在当前组件内使用</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">export default&#123;<br>    data <span class=\"hljs-literal\">()</span> &#123;<br>        return &#123;&#125;<br>    &#125;,<br>    filters: &#123;<br>        format<span class=\"hljs-constructor\">Time(<span class=\"hljs-params\">val</span>,<span class=\"hljs-params\">type</span>)</span>&#123;<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">type</span>)&#123;<br>              return  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date(<span class=\"hljs-params\">val</span>)</span>.form<span class=\"hljs-constructor\">Date(<span class=\"hljs-params\">type</span>)</span><br>            &#125;<br>          return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date(<span class=\"hljs-params\">val</span>)</span>.form<span class=\"hljs-constructor\">Date(&#x27;<span class=\"hljs-params\">yyyy</span>-MM-DD <span class=\"hljs-params\">hh</span>:<span class=\"hljs-params\">mm</span>:<span class=\"hljs-params\">ss</span>&#x27;)</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"Vue指令学习","date":"2021-07-22T12:37:18.000Z","_content":"\n### 定义\n\n在 vue 中提供了一些对于页面 + 数据的更为方便的输出,这些操作就叫做指令, 以 v-xxx 表示\n\n### vue 中常用的 v-指令\n\n-   v-text 其实就是给元素的 innerText 赋值，只能用在双标签中 相当于插值表达试 `{{}}`\n-   v-html 就是给元素的 innerHTML 赋值\n-   v-if 判断是否插入这个元素\n-   v-else-if 判断是否插入这个元素\n-   v-else 判断是否插入这个元素\n-   v-show 隐藏元素 如果确定要隐藏, 会给元素的 style 加上 display:none\n    > v-if 家族都是对元素进行插入和移除的操作 v-show 是显示与否的问题。 v-if 家族使用必须是相同嵌套层相邻的 兄弟元素\n-   v-model 双向数据绑定,针对的 js 内存对象,写在那个元素上，就对哪个元素操作\n-   v-bind 可以给已经存在的属性赋值 input value 简写方式 v-bind:xx=\"x\" => :xx=\"x\"\n    > v-bind 和 v-model 的区别，在于，双向数据绑定 页面对于 input 的 value 改变，能影响内存中 name 变量，内存 js 改变 name 的值，会影响页面重新渲染最新值。bind,单向数据绑定 内存改变影响页面改变\n-   v-on 处理自定义原生事件的,给按钮添加 click 并让使用变量的样式改变 简写： v-on:fn=\"表达式||函数名\" => @fn=\"表达式||函数名\"\n-   v-for 循环遍历数据 v-for=\"(item,index) in arr\" v-for=\"(value,key,index) in Obj\"\n    > key 值， 都会说要拿一个唯一识别做渲染。由于 Vue 和 React 的虚拟 DOM diff 算法大致相同，我们需要使用 key 来给每个节点做一个唯一标识，Diff 算法就可以正确的识别此节点，找到正确的位置区插入新的节点，节约性能，更高效的更新 virtual DOM [key 值运用](https://cn.vuejs.org/v2/api/#key)\n\n### 不常用\n\n-   v-pre 主要用来跳过这个元素和它的子元素编译过程\n-   v-cloak 这个指令是用来保持在元素上直到关联实例结束时进行编译。\n-   v-once 关联的实例，只会渲染一次。之后的重新渲染，实例极其所有的子节点将被视为静态内容跳过，这可以用于优化更新性能。\n\n### 修饰符\n\n#### v-on / @ 事件修饰符\n\n-   .stop 阻止事件继续传播冒泡\n-   .prevent 事件不再重载\n-   .capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理\n-   .self 只当在 event.target 是当前元素自身时触发处理函数\n-   .once 事件将只会触发一次\n-   .passive 告诉浏览器你不想阻止事件的默认行为\n\n#### v-model 修饰符\n\n-   .lazy 默认情况下，v-model 同步输入框的值和数据。可以通过这个修饰符，转变为在 change 事件再同步。\n-   .number 自动将用户的输入值转化为数值类型。 会转换成 NAN\n-   .trim 自动过滤用户输入的首尾空格，string 格式\n\n#### 自定义事件修饰符\n\n-   .sync 只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器。当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定。如果我们不用.sync，我们想做上面的那个弹窗功能，我们也可以 props 传初始值，然后事件监听，实现起来也不算复杂。\n\n> 修饰符可以串联使用，但要注意顺序。例如： 用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-07/07-22Vue指令学习.md","raw":"---\ntitle: Vue指令学习\ndate: 2021-07-22 20:37:18\ntags: Vue\ncategory: Vue\n---\n\n### 定义\n\n在 vue 中提供了一些对于页面 + 数据的更为方便的输出,这些操作就叫做指令, 以 v-xxx 表示\n\n### vue 中常用的 v-指令\n\n-   v-text 其实就是给元素的 innerText 赋值，只能用在双标签中 相当于插值表达试 `{{}}`\n-   v-html 就是给元素的 innerHTML 赋值\n-   v-if 判断是否插入这个元素\n-   v-else-if 判断是否插入这个元素\n-   v-else 判断是否插入这个元素\n-   v-show 隐藏元素 如果确定要隐藏, 会给元素的 style 加上 display:none\n    > v-if 家族都是对元素进行插入和移除的操作 v-show 是显示与否的问题。 v-if 家族使用必须是相同嵌套层相邻的 兄弟元素\n-   v-model 双向数据绑定,针对的 js 内存对象,写在那个元素上，就对哪个元素操作\n-   v-bind 可以给已经存在的属性赋值 input value 简写方式 v-bind:xx=\"x\" => :xx=\"x\"\n    > v-bind 和 v-model 的区别，在于，双向数据绑定 页面对于 input 的 value 改变，能影响内存中 name 变量，内存 js 改变 name 的值，会影响页面重新渲染最新值。bind,单向数据绑定 内存改变影响页面改变\n-   v-on 处理自定义原生事件的,给按钮添加 click 并让使用变量的样式改变 简写： v-on:fn=\"表达式||函数名\" => @fn=\"表达式||函数名\"\n-   v-for 循环遍历数据 v-for=\"(item,index) in arr\" v-for=\"(value,key,index) in Obj\"\n    > key 值， 都会说要拿一个唯一识别做渲染。由于 Vue 和 React 的虚拟 DOM diff 算法大致相同，我们需要使用 key 来给每个节点做一个唯一标识，Diff 算法就可以正确的识别此节点，找到正确的位置区插入新的节点，节约性能，更高效的更新 virtual DOM [key 值运用](https://cn.vuejs.org/v2/api/#key)\n\n### 不常用\n\n-   v-pre 主要用来跳过这个元素和它的子元素编译过程\n-   v-cloak 这个指令是用来保持在元素上直到关联实例结束时进行编译。\n-   v-once 关联的实例，只会渲染一次。之后的重新渲染，实例极其所有的子节点将被视为静态内容跳过，这可以用于优化更新性能。\n\n### 修饰符\n\n#### v-on / @ 事件修饰符\n\n-   .stop 阻止事件继续传播冒泡\n-   .prevent 事件不再重载\n-   .capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理\n-   .self 只当在 event.target 是当前元素自身时触发处理函数\n-   .once 事件将只会触发一次\n-   .passive 告诉浏览器你不想阻止事件的默认行为\n\n#### v-model 修饰符\n\n-   .lazy 默认情况下，v-model 同步输入框的值和数据。可以通过这个修饰符，转变为在 change 事件再同步。\n-   .number 自动将用户的输入值转化为数值类型。 会转换成 NAN\n-   .trim 自动过滤用户输入的首尾空格，string 格式\n\n#### 自定义事件修饰符\n\n-   .sync 只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器。当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定。如果我们不用.sync，我们想做上面的那个弹窗功能，我们也可以 props 传初始值，然后事件监听，实现起来也不算复杂。\n\n> 修饰符可以串联使用，但要注意顺序。例如： 用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。\n\n![BG图片](/img/1.jpg)\n","slug":"2021-07/07-22Vue指令学习","published":1,"updated":"2021-08-01T06:57:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c2111000pf60ce41640a9","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>在 vue 中提供了一些对于页面 + 数据的更为方便的输出,这些操作就叫做指令, 以 v-xxx 表示</p>\n<h3 id=\"vue-中常用的-v-指令\"><a href=\"#vue-中常用的-v-指令\" class=\"headerlink\" title=\"vue 中常用的 v-指令\"></a>vue 中常用的 v-指令</h3><ul>\n<li>  v-text 其实就是给元素的 innerText 赋值，只能用在双标签中 相当于插值表达试 <code>&#123;&#123;&#125;&#125;</code></li>\n<li>  v-html 就是给元素的 innerHTML 赋值</li>\n<li>  v-if 判断是否插入这个元素</li>\n<li>  v-else-if 判断是否插入这个元素</li>\n<li>  v-else 判断是否插入这个元素</li>\n<li>v-show 隐藏元素 如果确定要隐藏, 会给元素的 style 加上 display:none<blockquote>\n<p>v-if 家族都是对元素进行插入和移除的操作 v-show 是显示与否的问题。 v-if 家族使用必须是相同嵌套层相邻的 兄弟元素</p>\n</blockquote>\n</li>\n<li>  v-model 双向数据绑定,针对的 js 内存对象,写在那个元素上，就对哪个元素操作</li>\n<li>v-bind 可以给已经存在的属性赋值 input value 简写方式 v-bind:xx=”x” =&gt; :xx=”x”<blockquote>\n<p>v-bind 和 v-model 的区别，在于，双向数据绑定 页面对于 input 的 value 改变，能影响内存中 name 变量，内存 js 改变 name 的值，会影响页面重新渲染最新值。bind,单向数据绑定 内存改变影响页面改变</p>\n</blockquote>\n</li>\n<li>  v-on 处理自定义原生事件的,给按钮添加 click 并让使用变量的样式改变 简写： v-on:fn=”表达式||函数名” =&gt; @fn=”表达式||函数名”</li>\n<li>v-for 循环遍历数据 v-for=”(item,index) in arr” v-for=”(value,key,index) in Obj”<blockquote>\n<p>key 值， 都会说要拿一个唯一识别做渲染。由于 Vue 和 React 的虚拟 DOM diff 算法大致相同，我们需要使用 key 来给每个节点做一个唯一标识，Diff 算法就可以正确的识别此节点，找到正确的位置区插入新的节点，节约性能，更高效的更新 virtual DOM <a href=\"https://cn.vuejs.org/v2/api/#key\">key 值运用</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"不常用\"><a href=\"#不常用\" class=\"headerlink\" title=\"不常用\"></a>不常用</h3><ul>\n<li>  v-pre 主要用来跳过这个元素和它的子元素编译过程</li>\n<li>  v-cloak 这个指令是用来保持在元素上直到关联实例结束时进行编译。</li>\n<li>  v-once 关联的实例，只会渲染一次。之后的重新渲染，实例极其所有的子节点将被视为静态内容跳过，这可以用于优化更新性能。</li>\n</ul>\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><h4 id=\"v-on-事件修饰符\"><a href=\"#v-on-事件修饰符\" class=\"headerlink\" title=\"v-on / @ 事件修饰符\"></a>v-on / @ 事件修饰符</h4><ul>\n<li>  .stop 阻止事件继续传播冒泡</li>\n<li>  .prevent 事件不再重载</li>\n<li>  .capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理</li>\n<li>  .self 只当在 event.target 是当前元素自身时触发处理函数</li>\n<li>  .once 事件将只会触发一次</li>\n<li>  .passive 告诉浏览器你不想阻止事件的默认行为</li>\n</ul>\n<h4 id=\"v-model-修饰符\"><a href=\"#v-model-修饰符\" class=\"headerlink\" title=\"v-model 修饰符\"></a>v-model 修饰符</h4><ul>\n<li>  .lazy 默认情况下，v-model 同步输入框的值和数据。可以通过这个修饰符，转变为在 change 事件再同步。</li>\n<li>  .number 自动将用户的输入值转化为数值类型。 会转换成 NAN</li>\n<li>  .trim 自动过滤用户输入的首尾空格，string 格式</li>\n</ul>\n<h4 id=\"自定义事件修饰符\"><a href=\"#自定义事件修饰符\" class=\"headerlink\" title=\"自定义事件修饰符\"></a>自定义事件修饰符</h4><ul>\n<li>  .sync 只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器。当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定。如果我们不用.sync，我们想做上面的那个弹窗功能，我们也可以 props 传初始值，然后事件监听，实现起来也不算复杂。</li>\n</ul>\n<blockquote>\n<p>修饰符可以串联使用，但要注意顺序。例如： 用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</p>\n</blockquote>\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>在 vue 中提供了一些对于页面 + 数据的更为方便的输出,这些操作就叫做指令, 以 v-xxx 表示</p>\n<h3 id=\"vue-中常用的-v-指令\"><a href=\"#vue-中常用的-v-指令\" class=\"headerlink\" title=\"vue 中常用的 v-指令\"></a>vue 中常用的 v-指令</h3><ul>\n<li>  v-text 其实就是给元素的 innerText 赋值，只能用在双标签中 相当于插值表达试 <code>&#123;&#123;&#125;&#125;</code></li>\n<li>  v-html 就是给元素的 innerHTML 赋值</li>\n<li>  v-if 判断是否插入这个元素</li>\n<li>  v-else-if 判断是否插入这个元素</li>\n<li>  v-else 判断是否插入这个元素</li>\n<li>v-show 隐藏元素 如果确定要隐藏, 会给元素的 style 加上 display:none<blockquote>\n<p>v-if 家族都是对元素进行插入和移除的操作 v-show 是显示与否的问题。 v-if 家族使用必须是相同嵌套层相邻的 兄弟元素</p>\n</blockquote>\n</li>\n<li>  v-model 双向数据绑定,针对的 js 内存对象,写在那个元素上，就对哪个元素操作</li>\n<li>v-bind 可以给已经存在的属性赋值 input value 简写方式 v-bind:xx=”x” =&gt; :xx=”x”<blockquote>\n<p>v-bind 和 v-model 的区别，在于，双向数据绑定 页面对于 input 的 value 改变，能影响内存中 name 变量，内存 js 改变 name 的值，会影响页面重新渲染最新值。bind,单向数据绑定 内存改变影响页面改变</p>\n</blockquote>\n</li>\n<li>  v-on 处理自定义原生事件的,给按钮添加 click 并让使用变量的样式改变 简写： v-on:fn=”表达式||函数名” =&gt; @fn=”表达式||函数名”</li>\n<li>v-for 循环遍历数据 v-for=”(item,index) in arr” v-for=”(value,key,index) in Obj”<blockquote>\n<p>key 值， 都会说要拿一个唯一识别做渲染。由于 Vue 和 React 的虚拟 DOM diff 算法大致相同，我们需要使用 key 来给每个节点做一个唯一标识，Diff 算法就可以正确的识别此节点，找到正确的位置区插入新的节点，节约性能，更高效的更新 virtual DOM <a href=\"https://cn.vuejs.org/v2/api/#key\">key 值运用</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"不常用\"><a href=\"#不常用\" class=\"headerlink\" title=\"不常用\"></a>不常用</h3><ul>\n<li>  v-pre 主要用来跳过这个元素和它的子元素编译过程</li>\n<li>  v-cloak 这个指令是用来保持在元素上直到关联实例结束时进行编译。</li>\n<li>  v-once 关联的实例，只会渲染一次。之后的重新渲染，实例极其所有的子节点将被视为静态内容跳过，这可以用于优化更新性能。</li>\n</ul>\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><h4 id=\"v-on-事件修饰符\"><a href=\"#v-on-事件修饰符\" class=\"headerlink\" title=\"v-on / @ 事件修饰符\"></a>v-on / @ 事件修饰符</h4><ul>\n<li>  .stop 阻止事件继续传播冒泡</li>\n<li>  .prevent 事件不再重载</li>\n<li>  .capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理</li>\n<li>  .self 只当在 event.target 是当前元素自身时触发处理函数</li>\n<li>  .once 事件将只会触发一次</li>\n<li>  .passive 告诉浏览器你不想阻止事件的默认行为</li>\n</ul>\n<h4 id=\"v-model-修饰符\"><a href=\"#v-model-修饰符\" class=\"headerlink\" title=\"v-model 修饰符\"></a>v-model 修饰符</h4><ul>\n<li>  .lazy 默认情况下，v-model 同步输入框的值和数据。可以通过这个修饰符，转变为在 change 事件再同步。</li>\n<li>  .number 自动将用户的输入值转化为数值类型。 会转换成 NAN</li>\n<li>  .trim 自动过滤用户输入的首尾空格，string 格式</li>\n</ul>\n<h4 id=\"自定义事件修饰符\"><a href=\"#自定义事件修饰符\" class=\"headerlink\" title=\"自定义事件修饰符\"></a>自定义事件修饰符</h4><ul>\n<li>  .sync 只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器。当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定。如果我们不用.sync，我们想做上面的那个弹窗功能，我们也可以 props 传初始值，然后事件监听，实现起来也不算复杂。</li>\n</ul>\n<blockquote>\n<p>修饰符可以串联使用，但要注意顺序。例如： 用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</p>\n</blockquote>\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"Vue自定义指令学习总结","date":"2021-07-24T13:40:21.000Z","_content":"\n## 实现效果\n\n封装常规业务的自定义指令，理解自定义指令各钩子函数意义。[vue 官网-自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html)\n\n## 主要\n\n-   `bind`: 只调用一次，指令第一次绑定到元素时调用，可以定义一个在绑定时执行一次的初始化动作。\n-   `inserted`: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中)。\n-   `update`: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值。\n-   `componentUpdated`: 被绑定元素所在模板完成一次更新周期时调用。\n-   `unbind`: 只调用一次， 指令与元素解绑时调用。\n\n## 实例代码\n\n### v-copy\n\n```\nconst copy = {\n bind(el, { value }) {\n   el.$value = value\n   el.handler = () => {\n     if (!el.$value) {\n       // 值为空的时候，给出提示。可根据项目UI仔细设计\n       console.log('无复制内容')\n       return\n     }\n     // 动态创建 textarea 标签\n     const textarea = document.createElement('textarea')\n     // 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域\n     textarea.readOnly ='readonly'\n     textarea.style.position ='absolute'\n     textarea.style.left ='-9999px'\n     // 将要 copy 的值赋给 textarea 标签的 value 属性\n     textarea.value = el.$value\n     // 将 textarea 插入到 body 中\n     document.body.appendChild(textarea)\n     // 选中值并复制\n     textarea.select()\n     const result = document.execCommand('Copy')\n     if (result) {\n       console.log('复制成功')// 可根据项目UI仔细设计\n     }\n     document.body.removeChild(textarea)\n   }\n   // 绑定点击事件，就是所谓的一键 copy 啦\n   el.addEventListener('click', el.handler)\n },\n // 当传进来的值更新的时候触发\n componentUpdated(el, { value }) {\n   el.$value = value\n },\n // 指令与元素解绑的时候，移除事件绑定\n unbind(el) {\n   el.removeEventListener('click', el.handler)\n },\n}\n\nexport default copy\n\n// 使用方式\n<template>\n <button v-copy=\"copyText\">复制</button>\n</template>\n\n<script>export default {\n   data() {\n     return {\n       copyText:'a copy directives',\n     }\n   },\n } </script>\n\n```\n\n### v-int（正整数） v-Float（两位小数）\n\n```\nimport Vue from 'vue'\n// 针对 input做的限制，只能输入正整数\nVue.directive('Int', {\n    bind: function(el, binding, vnode) {\n        // 针对 el-input做的限制，只能输入正整数\n        // if (binding.expression == \"el\") {\n        //   input = el.getElementsByTagName('input')[0]\n        // } else {\n        //   input = el\n        // }\n        const input = el.getElementsByTagName('input')[0]\n        input.onkeyup = function(e) {\n            if (input.value.length === 1) {\n                input.value = input.value.replace(/[^0-9]/g, '')\n            } else {\n                input.value = input.value.replace(/[^\\d]/g, '')\n                input.value = input.value.replace(/\\b(0+)/gi, \"\")\n            }\n            trigger(input, 'input')\n        }\n        input.onblur = function(e) {\n            if (input.value.length === 1) {\n                input.value = input.value.replace(/[^0-9]/g, '')\n            } else {\n                input.value = input.value.replace(/[^\\d]/g, '')\n                input.value = input.value.replace(/\\b(0+)/gi, \"\")\n            }\n            trigger(input, 'input')\n        }\n    }\n})\n\n// 针对 input做的限制，能输入2位小数\nVue.directive('Float', {\n    bind: function(el, binding, vnode) {\n        // let input = undefined\n        // 针对 el-input做的限制，只能输入正整数\n        // if (binding.expression == \"el\") {\n        //   input = el.getElementsByTagName('input')[0]\n        // } else {\n        //   input = el\n        // }\n        const input = el.getElementsByTagName('input')[0]\n        input.onkeyup = function(e) {\n            input.value = input.value.replace(/[^\\d.]/g, '');\n            input.value = input.value.replace(/\\.{2,}/g, '.');\n            input.value = input.value.replace(/^\\./g, '0.');\n            input.value = input.value.replace(/^\\d*\\.\\d*\\./g, input.value.substring(0, input.value.length - 1));\n            input.value = input.value.replace(/^0[^\\.]+/g, '0')\n            input.value = input.value.replace(/^(\\d+)\\.(\\d\\d).*$/, '$1.$2')\n            trigger(input, 'input')\n        }\n        input.onblur = function(e) {\n            input.value = input.value.replace(/[^\\d.]/g, '');\n            input.value = input.value.replace(/\\.{2,}/g, '.');\n            input.value = input.value.replace(/^\\./g, '0.');\n            input.value = input.value.replace(/^\\d*\\.\\d*\\./g, input.value.substring(0, input.value.length - 1));\n            input.value = input.value.replace(/^0[^\\.]+/g, '0')\n            input.value = input.value.replace(/^(\\d+)\\.(\\d\\d).*$/, '$1.$2')\n            trigger(input, 'input')\n        }\n    }\n})\nconst trigger = (el, type) => {\n    const e = document.createEvent('HTMLEvents')\n    e.initEvent(type, true, true)\n    el.dispatchEvent(e)\n}\n```\n\n### v-debounce\n\n```\n// 防止按钮在短时间内被多次点击，使用防抖函数限制规定时间内只能点击一次。\nconst debounce = {\n  inserted:function (el, binding) {\n    let timer\n    el.addEventListener('keyup', () => {\n      if (timer) {\n        clearTimeout(timer)\n      }\n      timer = setTimeout(() => {\n        binding.value()\n      }, 1000)\n    })\n  },\n}\n\nexport default debounce\n```\n\n### v-emoji\n\n```\n// 根据正则表达式，设计自定义处理表单输入规则的指令，下面以禁止输入表情和特殊字符为例。\nlet findEle = (parent, type) => {\n  return parent.tagName.toLowerCase() === type ? parent : parent.querySelector(type)\n}\n\nconst trigger = (el, type) => {\n  const e = document.createEvent('HTMLEvents')\n  e.initEvent(type,true,true)\n  el.dispatchEvent(e)\n}\n\nconst emoji = {\n  bind:function (el, binding, vnode) {\n    // 正则规则可根据需求自定义\n    var regRule = /[^u4E00-u9FA5|d|a-zA-Z|rns,.?!，。？！…—&$=()-+/*{}[]]|s/g\n    let $inp = findEle(el,'input')\n    el.$inp = $inp\n    $inp.handle =function () {\n      let val = $inp.value\n      $inp.value = val.replace(regRule,'')\n\n      trigger($inp,'input')\n    }\n    $inp.addEventListener('keyup', $inp.handle)\n  },\n  unbind:function (el) {\n    el.$inp.removeEventListener('keyup', el.$inp.handle)\n  },\n}\n\nexport default emoji\n\n//使用\n<template>\n  <input type=\"text\" v-model=\"note\" v-emoji />\n</template>\n```\n\n### v-LazyLoad\n\n> 实现一个图片懒加载指令，只加载浏览器可见区域的图片。\n\n思路：\n图片懒加载的原理主要是判断当前图片是否到了可视区域这一核心逻辑实现的\n拿到所有的图片 Dom ，遍历每个图片判断当前图片是否到了可视区范围内\n如果到了就设置图片的 src 属性，否则显示默认图片\n\n> 图片懒加载有两种方式可以实现，一是绑定 srcoll 事件进行监听，二是使用 IntersectionObserver 判断图片是否到了可视区域，但是有浏览器兼容性问题。\n\n下面封装一个懒加载指令兼容两种方法，判断浏览器是否支持 IntersectionObserver API，如果支持就使用 IntersectionObserver 实现懒加载，否则则使用 srcoll 事件监听 + 节流的方法实现。\n\n```\nconst LazyLoad = {\n  // install方法\n  install(Vue, options) {\n    const defaultSrc = options.default\n    Vue.directive('lazy', {\n      bind(el, binding) {\n        LazyLoad.init(el, binding.value, defaultSrc)\n      },\n      inserted(el) {\n        if (IntersectionObserver) {\n          LazyLoad.observe(el)\n        }else {\n          LazyLoad.listenerScroll(el)\n        }\n      },\n    })\n  },\n  // 初始化\n  init(el, val, def) {\n    el.setAttribute('data-src', val)\n    el.setAttribute('src', def)\n  },\n  // 利用IntersectionObserver监听el\n  observe(el) {\n    var io =new IntersectionObserver((entries) => {\n      const realSrc = el.dataset.src\n      if (entries[0].isIntersecting) {\n        if (realSrc) {\n          el.src = realSrc\n          el.removeAttribute('data-src')\n        }\n      }\n    })\n    io.observe(el)\n  },\n  // 监听scroll事件\n  listenerScroll(el) {\n    const handler = LazyLoad.throttle(LazyLoad.load, 300)\n    LazyLoad.load(el)\n    window.addEventListener('scroll', () => {\n      handler(el)\n    })\n  },\n  // 加载真实图片\n  load(el) {\n    const windowHeight = document.documentElement.clientHeight\n    const elTop = el.getBoundingClientRect().top\n    const elBtm = el.getBoundingClientRect().bottom\n    const realSrc = el.dataset.src\n    if (elTop - windowHeight < 0 && elBtm > 0) {\n      if (realSrc) {\n        el.src = realSrc\n        el.removeAttribute('data-src')\n      }\n    }\n  },\n  // 节流\n  throttle(fn, delay) {\n    let timer\n    let prevTime\n    return function (...args) {\n      const currTime = Date.now()\n      const context =this\n      if (!prevTime) prevTime = currTime\n      clearTimeout(timer)\n\n      if (currTime - prevTime > delay) {\n        prevTime = currTime\n        fn.apply(context, args)\n        clearTimeout(timer)\n        return\n      }\n\n      timer = setTimeout(function () {\n        prevTime = Date.now()\n        timer =null\n        fn.apply(context, args)\n      }, delay)\n    }\n  },\n}\n\nexport default LazyLoad\n\n// 使用\n<img v-LazyLoad=\"xxx.jpg\" />\n```\n\n### 批量注册\n\n```\nimport copy from'./copy'\nimport debounce from'./debounce'\n// 自定义指令\nconst directives = {\n  copy,\n  debounce,\n}\n\nexport default {\n  install(Vue) {\n    Object.keys(directives).forEach((key) => {\n      Vue.directive(key, directives[key])\n    })\n  },\n}\n\n//在 main.js 引入并调用\nimport Vue from'vue'\nimport Directives from'./JS/directives'\nVue.use(Directives)\n```\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-07/07-24Vue指令扩展学习.md","raw":"---\ntitle: Vue自定义指令学习总结\ndate: 2021-07-24 21:40:21\ntags: vue\ncategory: Vue\n---\n\n## 实现效果\n\n封装常规业务的自定义指令，理解自定义指令各钩子函数意义。[vue 官网-自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html)\n\n## 主要\n\n-   `bind`: 只调用一次，指令第一次绑定到元素时调用，可以定义一个在绑定时执行一次的初始化动作。\n-   `inserted`: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中)。\n-   `update`: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值。\n-   `componentUpdated`: 被绑定元素所在模板完成一次更新周期时调用。\n-   `unbind`: 只调用一次， 指令与元素解绑时调用。\n\n## 实例代码\n\n### v-copy\n\n```\nconst copy = {\n bind(el, { value }) {\n   el.$value = value\n   el.handler = () => {\n     if (!el.$value) {\n       // 值为空的时候，给出提示。可根据项目UI仔细设计\n       console.log('无复制内容')\n       return\n     }\n     // 动态创建 textarea 标签\n     const textarea = document.createElement('textarea')\n     // 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域\n     textarea.readOnly ='readonly'\n     textarea.style.position ='absolute'\n     textarea.style.left ='-9999px'\n     // 将要 copy 的值赋给 textarea 标签的 value 属性\n     textarea.value = el.$value\n     // 将 textarea 插入到 body 中\n     document.body.appendChild(textarea)\n     // 选中值并复制\n     textarea.select()\n     const result = document.execCommand('Copy')\n     if (result) {\n       console.log('复制成功')// 可根据项目UI仔细设计\n     }\n     document.body.removeChild(textarea)\n   }\n   // 绑定点击事件，就是所谓的一键 copy 啦\n   el.addEventListener('click', el.handler)\n },\n // 当传进来的值更新的时候触发\n componentUpdated(el, { value }) {\n   el.$value = value\n },\n // 指令与元素解绑的时候，移除事件绑定\n unbind(el) {\n   el.removeEventListener('click', el.handler)\n },\n}\n\nexport default copy\n\n// 使用方式\n<template>\n <button v-copy=\"copyText\">复制</button>\n</template>\n\n<script>export default {\n   data() {\n     return {\n       copyText:'a copy directives',\n     }\n   },\n } </script>\n\n```\n\n### v-int（正整数） v-Float（两位小数）\n\n```\nimport Vue from 'vue'\n// 针对 input做的限制，只能输入正整数\nVue.directive('Int', {\n    bind: function(el, binding, vnode) {\n        // 针对 el-input做的限制，只能输入正整数\n        // if (binding.expression == \"el\") {\n        //   input = el.getElementsByTagName('input')[0]\n        // } else {\n        //   input = el\n        // }\n        const input = el.getElementsByTagName('input')[0]\n        input.onkeyup = function(e) {\n            if (input.value.length === 1) {\n                input.value = input.value.replace(/[^0-9]/g, '')\n            } else {\n                input.value = input.value.replace(/[^\\d]/g, '')\n                input.value = input.value.replace(/\\b(0+)/gi, \"\")\n            }\n            trigger(input, 'input')\n        }\n        input.onblur = function(e) {\n            if (input.value.length === 1) {\n                input.value = input.value.replace(/[^0-9]/g, '')\n            } else {\n                input.value = input.value.replace(/[^\\d]/g, '')\n                input.value = input.value.replace(/\\b(0+)/gi, \"\")\n            }\n            trigger(input, 'input')\n        }\n    }\n})\n\n// 针对 input做的限制，能输入2位小数\nVue.directive('Float', {\n    bind: function(el, binding, vnode) {\n        // let input = undefined\n        // 针对 el-input做的限制，只能输入正整数\n        // if (binding.expression == \"el\") {\n        //   input = el.getElementsByTagName('input')[0]\n        // } else {\n        //   input = el\n        // }\n        const input = el.getElementsByTagName('input')[0]\n        input.onkeyup = function(e) {\n            input.value = input.value.replace(/[^\\d.]/g, '');\n            input.value = input.value.replace(/\\.{2,}/g, '.');\n            input.value = input.value.replace(/^\\./g, '0.');\n            input.value = input.value.replace(/^\\d*\\.\\d*\\./g, input.value.substring(0, input.value.length - 1));\n            input.value = input.value.replace(/^0[^\\.]+/g, '0')\n            input.value = input.value.replace(/^(\\d+)\\.(\\d\\d).*$/, '$1.$2')\n            trigger(input, 'input')\n        }\n        input.onblur = function(e) {\n            input.value = input.value.replace(/[^\\d.]/g, '');\n            input.value = input.value.replace(/\\.{2,}/g, '.');\n            input.value = input.value.replace(/^\\./g, '0.');\n            input.value = input.value.replace(/^\\d*\\.\\d*\\./g, input.value.substring(0, input.value.length - 1));\n            input.value = input.value.replace(/^0[^\\.]+/g, '0')\n            input.value = input.value.replace(/^(\\d+)\\.(\\d\\d).*$/, '$1.$2')\n            trigger(input, 'input')\n        }\n    }\n})\nconst trigger = (el, type) => {\n    const e = document.createEvent('HTMLEvents')\n    e.initEvent(type, true, true)\n    el.dispatchEvent(e)\n}\n```\n\n### v-debounce\n\n```\n// 防止按钮在短时间内被多次点击，使用防抖函数限制规定时间内只能点击一次。\nconst debounce = {\n  inserted:function (el, binding) {\n    let timer\n    el.addEventListener('keyup', () => {\n      if (timer) {\n        clearTimeout(timer)\n      }\n      timer = setTimeout(() => {\n        binding.value()\n      }, 1000)\n    })\n  },\n}\n\nexport default debounce\n```\n\n### v-emoji\n\n```\n// 根据正则表达式，设计自定义处理表单输入规则的指令，下面以禁止输入表情和特殊字符为例。\nlet findEle = (parent, type) => {\n  return parent.tagName.toLowerCase() === type ? parent : parent.querySelector(type)\n}\n\nconst trigger = (el, type) => {\n  const e = document.createEvent('HTMLEvents')\n  e.initEvent(type,true,true)\n  el.dispatchEvent(e)\n}\n\nconst emoji = {\n  bind:function (el, binding, vnode) {\n    // 正则规则可根据需求自定义\n    var regRule = /[^u4E00-u9FA5|d|a-zA-Z|rns,.?!，。？！…—&$=()-+/*{}[]]|s/g\n    let $inp = findEle(el,'input')\n    el.$inp = $inp\n    $inp.handle =function () {\n      let val = $inp.value\n      $inp.value = val.replace(regRule,'')\n\n      trigger($inp,'input')\n    }\n    $inp.addEventListener('keyup', $inp.handle)\n  },\n  unbind:function (el) {\n    el.$inp.removeEventListener('keyup', el.$inp.handle)\n  },\n}\n\nexport default emoji\n\n//使用\n<template>\n  <input type=\"text\" v-model=\"note\" v-emoji />\n</template>\n```\n\n### v-LazyLoad\n\n> 实现一个图片懒加载指令，只加载浏览器可见区域的图片。\n\n思路：\n图片懒加载的原理主要是判断当前图片是否到了可视区域这一核心逻辑实现的\n拿到所有的图片 Dom ，遍历每个图片判断当前图片是否到了可视区范围内\n如果到了就设置图片的 src 属性，否则显示默认图片\n\n> 图片懒加载有两种方式可以实现，一是绑定 srcoll 事件进行监听，二是使用 IntersectionObserver 判断图片是否到了可视区域，但是有浏览器兼容性问题。\n\n下面封装一个懒加载指令兼容两种方法，判断浏览器是否支持 IntersectionObserver API，如果支持就使用 IntersectionObserver 实现懒加载，否则则使用 srcoll 事件监听 + 节流的方法实现。\n\n```\nconst LazyLoad = {\n  // install方法\n  install(Vue, options) {\n    const defaultSrc = options.default\n    Vue.directive('lazy', {\n      bind(el, binding) {\n        LazyLoad.init(el, binding.value, defaultSrc)\n      },\n      inserted(el) {\n        if (IntersectionObserver) {\n          LazyLoad.observe(el)\n        }else {\n          LazyLoad.listenerScroll(el)\n        }\n      },\n    })\n  },\n  // 初始化\n  init(el, val, def) {\n    el.setAttribute('data-src', val)\n    el.setAttribute('src', def)\n  },\n  // 利用IntersectionObserver监听el\n  observe(el) {\n    var io =new IntersectionObserver((entries) => {\n      const realSrc = el.dataset.src\n      if (entries[0].isIntersecting) {\n        if (realSrc) {\n          el.src = realSrc\n          el.removeAttribute('data-src')\n        }\n      }\n    })\n    io.observe(el)\n  },\n  // 监听scroll事件\n  listenerScroll(el) {\n    const handler = LazyLoad.throttle(LazyLoad.load, 300)\n    LazyLoad.load(el)\n    window.addEventListener('scroll', () => {\n      handler(el)\n    })\n  },\n  // 加载真实图片\n  load(el) {\n    const windowHeight = document.documentElement.clientHeight\n    const elTop = el.getBoundingClientRect().top\n    const elBtm = el.getBoundingClientRect().bottom\n    const realSrc = el.dataset.src\n    if (elTop - windowHeight < 0 && elBtm > 0) {\n      if (realSrc) {\n        el.src = realSrc\n        el.removeAttribute('data-src')\n      }\n    }\n  },\n  // 节流\n  throttle(fn, delay) {\n    let timer\n    let prevTime\n    return function (...args) {\n      const currTime = Date.now()\n      const context =this\n      if (!prevTime) prevTime = currTime\n      clearTimeout(timer)\n\n      if (currTime - prevTime > delay) {\n        prevTime = currTime\n        fn.apply(context, args)\n        clearTimeout(timer)\n        return\n      }\n\n      timer = setTimeout(function () {\n        prevTime = Date.now()\n        timer =null\n        fn.apply(context, args)\n      }, delay)\n    }\n  },\n}\n\nexport default LazyLoad\n\n// 使用\n<img v-LazyLoad=\"xxx.jpg\" />\n```\n\n### 批量注册\n\n```\nimport copy from'./copy'\nimport debounce from'./debounce'\n// 自定义指令\nconst directives = {\n  copy,\n  debounce,\n}\n\nexport default {\n  install(Vue) {\n    Object.keys(directives).forEach((key) => {\n      Vue.directive(key, directives[key])\n    })\n  },\n}\n\n//在 main.js 引入并调用\nimport Vue from'vue'\nimport Directives from'./JS/directives'\nVue.use(Directives)\n```\n\n![BG图片](/img/1.jpg)\n","slug":"2021-07/07-24Vue指令扩展学习","published":1,"updated":"2021-08-01T06:57:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c2113000sf60c4za12lza","content":"<h2 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h2><p>封装常规业务的自定义指令，理解自定义指令各钩子函数意义。<a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">vue 官网-自定义指令</a></p>\n<h2 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h2><ul>\n<li>  <code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，可以定义一个在绑定时执行一次的初始化动作。</li>\n<li>  <code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中)。</li>\n<li>  <code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值。</li>\n<li>  <code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li>\n<li>  <code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li>\n</ul>\n<h2 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h2><h3 id=\"v-copy\"><a href=\"#v-copy\" class=\"headerlink\" title=\"v-copy\"></a>v-copy</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">const copy = &#123;<br> <span class=\"hljs-built_in\">bind</span>(el, &#123; value &#125;) &#123;<br>   el.<span class=\"hljs-variable\">$value</span> = value<br>   el<span class=\"hljs-selector-class\">.handler</span> = () =&gt; &#123;<br>     <span class=\"hljs-keyword\">if</span> (!el.<span class=\"hljs-variable\">$value</span>) &#123;<br>       <span class=\"hljs-comment\">// 值为空的时候，给出提示。可根据项目UI仔细设计</span><br>       console<span class=\"hljs-selector-class\">.log</span>(<span class=\"hljs-string\">&#x27;无复制内容&#x27;</span>)<br>       return<br>     &#125;<br>     <span class=\"hljs-comment\">// 动态创建 textarea 标签</span><br>     const <span class=\"hljs-selector-tag\">textarea</span> = document<span class=\"hljs-selector-class\">.createElement</span>(<span class=\"hljs-string\">&#x27;textarea&#x27;</span>)<br>     <span class=\"hljs-comment\">// 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span><br>     <span class=\"hljs-selector-tag\">textarea</span><span class=\"hljs-selector-class\">.readOnly</span> =<span class=\"hljs-string\">&#x27;readonly&#x27;</span><br>     <span class=\"hljs-selector-tag\">textarea</span><span class=\"hljs-selector-class\">.style</span><span class=\"hljs-selector-class\">.position</span> =<span class=\"hljs-string\">&#x27;absolute&#x27;</span><br>     <span class=\"hljs-selector-tag\">textarea</span><span class=\"hljs-selector-class\">.style</span><span class=\"hljs-selector-class\">.left</span> =<span class=\"hljs-string\">&#x27;-9999px&#x27;</span><br>     <span class=\"hljs-comment\">// 将要 copy 的值赋给 textarea 标签的 value 属性</span><br>     <span class=\"hljs-selector-tag\">textarea</span><span class=\"hljs-selector-class\">.value</span> = el.<span class=\"hljs-variable\">$value</span><br>     <span class=\"hljs-comment\">// 将 textarea 插入到 body 中</span><br>     document<span class=\"hljs-selector-class\">.body</span><span class=\"hljs-selector-class\">.appendChild</span>(textarea)<br>     <span class=\"hljs-comment\">// 选中值并复制</span><br>     <span class=\"hljs-selector-tag\">textarea</span><span class=\"hljs-selector-class\">.select</span>()<br>     const result = document<span class=\"hljs-selector-class\">.execCommand</span>(<span class=\"hljs-string\">&#x27;Copy&#x27;</span>)<br>     <span class=\"hljs-keyword\">if</span> (result) &#123;<br>       console<span class=\"hljs-selector-class\">.log</span>(<span class=\"hljs-string\">&#x27;复制成功&#x27;</span>)<span class=\"hljs-comment\">// 可根据项目UI仔细设计</span><br>     &#125;<br>     document<span class=\"hljs-selector-class\">.body</span><span class=\"hljs-selector-class\">.removeChild</span>(textarea)<br>   &#125;<br>   <span class=\"hljs-comment\">// 绑定点击事件，就是所谓的一键 copy 啦</span><br>   el<span class=\"hljs-selector-class\">.addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, el.handler)<br> &#125;,<br> <span class=\"hljs-comment\">// 当传进来的值更新的时候触发</span><br> <span class=\"hljs-built_in\">componentUpdated</span>(el, &#123; value &#125;) &#123;<br>   el.<span class=\"hljs-variable\">$value</span> = value<br> &#125;,<br> <span class=\"hljs-comment\">// 指令与元素解绑的时候，移除事件绑定</span><br> <span class=\"hljs-built_in\">unbind</span>(el) &#123;<br>   el<span class=\"hljs-selector-class\">.removeEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, el.handler)<br> &#125;,<br>&#125;<br><br>export default copy<br><br><span class=\"hljs-comment\">// 使用方式</span><br>&lt;template&gt;<br> &lt;<span class=\"hljs-selector-tag\">button</span> v-copy=<span class=\"hljs-string\">&quot;copyText&quot;</span>&gt;复制&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;export default &#123;<br>   <span class=\"hljs-built_in\">data</span>() &#123;<br>     return &#123;<br>       copyText:<span class=\"hljs-string\">&#x27;a copy directives&#x27;</span>,<br>     &#125;<br>   &#125;,<br> &#125; &lt;/script&gt;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-int（正整数）-v-Float（两位小数）\"><a href=\"#v-int（正整数）-v-Float（两位小数）\" class=\"headerlink\" title=\"v-int（正整数） v-Float（两位小数）\"></a>v-int（正整数） v-Float（两位小数）</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">import Vue from <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-comment\">// 针对 input做的限制，只能输入正整数</span><br>Vue.directive(<span class=\"hljs-string\">&#x27;Int&#x27;</span>, &#123;<br>    <span class=\"hljs-attr\">bind</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el, binding, vnode</span>) &#123;<br>        <span class=\"hljs-comment\">// 针对 el-input做的限制，只能输入正整数</span><br>        <span class=\"hljs-comment\">// if (binding.expression == &quot;el&quot;) &#123;</span><br>        <span class=\"hljs-comment\">//   input = el.getElementsByTagName(&#x27;input&#x27;)[0]</span><br>        <span class=\"hljs-comment\">// &#125; else &#123;</span><br>        <span class=\"hljs-comment\">//   input = el</span><br>        <span class=\"hljs-comment\">// &#125;</span><br>        const input = el.getElementsByTagName(<span class=\"hljs-string\">&#x27;input&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br>        input.onkeyup = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> (input.value.<span class=\"hljs-built_in\">length</span> === <span class=\"hljs-number\">1</span>) &#123;<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^0-9]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^\\d]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/\\b(0+)/gi</span>, <span class=\"hljs-string\">&quot;&quot;</span>)<br>            &#125;<br>            trigger(input, <span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>        &#125;<br>        input.onblur = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> (input.value.<span class=\"hljs-built_in\">length</span> === <span class=\"hljs-number\">1</span>) &#123;<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^0-9]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^\\d]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/\\b(0+)/gi</span>, <span class=\"hljs-string\">&quot;&quot;</span>)<br>            &#125;<br>            trigger(input, <span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class=\"hljs-comment\">// 针对 input做的限制，能输入2位小数</span><br>Vue.directive(<span class=\"hljs-string\">&#x27;Float&#x27;</span>, &#123;<br>    <span class=\"hljs-attr\">bind</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el, binding, vnode</span>) &#123;<br>        <span class=\"hljs-comment\">// let input = undefined</span><br>        <span class=\"hljs-comment\">// 针对 el-input做的限制，只能输入正整数</span><br>        <span class=\"hljs-comment\">// if (binding.expression == &quot;el&quot;) &#123;</span><br>        <span class=\"hljs-comment\">//   input = el.getElementsByTagName(&#x27;input&#x27;)[0]</span><br>        <span class=\"hljs-comment\">// &#125; else &#123;</span><br>        <span class=\"hljs-comment\">//   input = el</span><br>        <span class=\"hljs-comment\">// &#125;</span><br>        const input = el.getElementsByTagName(<span class=\"hljs-string\">&#x27;input&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br>        input.onkeyup = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) &#123;<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^\\d.]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/\\.&#123;2,&#125;/g</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^\\./g</span>, <span class=\"hljs-string\">&#x27;0.&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^\\d*\\.\\d*\\./g</span>, input.value.substring(<span class=\"hljs-number\">0</span>, input.value.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>));<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^0[^\\.]+/g</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>)<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^(\\d+)\\.(\\d\\d).*$/</span>, <span class=\"hljs-string\">&#x27;$1.$2&#x27;</span>)<br>            trigger(input, <span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>        &#125;<br>        input.onblur = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) &#123;<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^\\d.]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/\\.&#123;2,&#125;/g</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^\\./g</span>, <span class=\"hljs-string\">&#x27;0.&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^\\d*\\.\\d*\\./g</span>, input.value.substring(<span class=\"hljs-number\">0</span>, input.value.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>));<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^0[^\\.]+/g</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>)<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^(\\d+)\\.(\\d\\d).*$/</span>, <span class=\"hljs-string\">&#x27;$1.$2&#x27;</span>)<br>            trigger(input, <span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br>const trigger = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, type</span>) =&gt;</span> &#123;<br>    const e = document.createEvent(<span class=\"hljs-string\">&#x27;HTMLEvents&#x27;</span>)<br>    e.initEvent(type, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>)<br>    el.dispatchEvent(e)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-debounce\"><a href=\"#v-debounce\" class=\"headerlink\" title=\"v-debounce\"></a>v-debounce</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 防止按钮在短时间内被多次点击，使用防抖函数限制规定时间内只能点击一次。</span><br><span class=\"hljs-keyword\">const</span> debounce = &#123;<br>  <span class=\"hljs-attr\">inserted</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, binding</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> timer<br>    el.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;keyup&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (timer) &#123;<br>        <span class=\"hljs-built_in\">clearTimeout</span>(timer)<br>      &#125;<br>      timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        binding.<span class=\"hljs-title function_\">value</span>()<br>      &#125;, <span class=\"hljs-number\">1000</span>)<br>    &#125;)<br>  &#125;,<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> debounce<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-emoji\"><a href=\"#v-emoji\" class=\"headerlink\" title=\"v-emoji\"></a>v-emoji</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">// 根据正则表达式，设计自定义处理表单输入规则的指令，下面以禁止输入表情和特殊字符为例。</span><br>let findEle = <span class=\"hljs-function\">(<span class=\"hljs-params\">parent, type</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">return</span> parent.tagName.toLowerCase() === type ? parent : parent.querySelector(type)<br>&#125;<br><br>const trigger = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, type</span>) =&gt;</span> &#123;<br>  const e = document.createEvent(<span class=\"hljs-string\">&#x27;HTMLEvents&#x27;</span>)<br>  e.initEvent(type,<span class=\"hljs-literal\">true</span>,<span class=\"hljs-literal\">true</span>)<br>  el.dispatchEvent(e)<br>&#125;<br><br>const emoji = &#123;<br>  <span class=\"hljs-attr\">bind</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, binding, vnode</span>) &#123;<br>    <span class=\"hljs-comment\">// 正则规则可根据需求自定义</span><br>    <span class=\"hljs-keyword\">var</span> regRule = <span class=\"hljs-regexp\">/[^u4E00-u9FA5|d|a-zA-Z|rns,.?!，。？！…—&amp;$=()-+/*&#123;&#125;[]]|s/g</span><br>    let <span class=\"hljs-symbol\">$i</span>np = findEle(el,<span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>    el.<span class=\"hljs-symbol\">$i</span>np = <span class=\"hljs-symbol\">$i</span>np<br>    <span class=\"hljs-symbol\">$i</span>np.handle =<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>      let val = <span class=\"hljs-symbol\">$i</span>np.value<br>      <span class=\"hljs-symbol\">$i</span>np.value = val.<span class=\"hljs-built_in\">replace</span>(regRule,<span class=\"hljs-string\">&#x27;&#x27;</span>)<br><br>      trigger(<span class=\"hljs-symbol\">$i</span>np,<span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>    &#125;<br>    <span class=\"hljs-symbol\">$i</span>np.addEventListener(<span class=\"hljs-string\">&#x27;keyup&#x27;</span>, <span class=\"hljs-symbol\">$i</span>np.handle)<br>  &#125;,<br>  <span class=\"hljs-attr\">unbind</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el</span>) &#123;<br>    el.<span class=\"hljs-symbol\">$i</span>np.removeEventListener(<span class=\"hljs-string\">&#x27;keyup&#x27;</span>, el.<span class=\"hljs-symbol\">$i</span>np.handle)<br>  &#125;,<br>&#125;<br><br>export default emoji<br><br><span class=\"hljs-comment\">//使用</span><br>&lt;template&gt;<br>  &lt;input type=<span class=\"hljs-string\">&quot;text&quot;</span> v-model=<span class=\"hljs-string\">&quot;note&quot;</span> v-emoji /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-LazyLoad\"><a href=\"#v-LazyLoad\" class=\"headerlink\" title=\"v-LazyLoad\"></a>v-LazyLoad</h3><blockquote>\n<p>实现一个图片懒加载指令，只加载浏览器可见区域的图片。</p>\n</blockquote>\n<p>思路：<br>图片懒加载的原理主要是判断当前图片是否到了可视区域这一核心逻辑实现的<br>拿到所有的图片 Dom ，遍历每个图片判断当前图片是否到了可视区范围内<br>如果到了就设置图片的 src 属性，否则显示默认图片</p>\n<blockquote>\n<p>图片懒加载有两种方式可以实现，一是绑定 srcoll 事件进行监听，二是使用 IntersectionObserver 判断图片是否到了可视区域，但是有浏览器兼容性问题。</p>\n</blockquote>\n<p>下面封装一个懒加载指令兼容两种方法，判断浏览器是否支持 IntersectionObserver API，如果支持就使用 IntersectionObserver 实现懒加载，否则则使用 srcoll 事件监听 + 节流的方法实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">LazyLoad</span> = &#123;<br>  <span class=\"hljs-comment\">// install方法</span><br>  <span class=\"hljs-title function_\">install</span>(<span class=\"hljs-params\">Vue, options</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> defaultSrc = options.<span class=\"hljs-property\">default</span><br>    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">directive</span>(<span class=\"hljs-string\">&#x27;lazy&#x27;</span>, &#123;<br>      <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">el, binding</span>) &#123;<br>        <span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-title function_\">init</span>(el, binding.<span class=\"hljs-property\">value</span>, defaultSrc)<br>      &#125;,<br>      <span class=\"hljs-title function_\">inserted</span>(<span class=\"hljs-params\">el</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">IntersectionObserver</span>) &#123;<br>          <span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-title function_\">observe</span>(el)<br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>          <span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-title function_\">listenerScroll</span>(el)<br>        &#125;<br>      &#125;,<br>    &#125;)<br>  &#125;,<br>  <span class=\"hljs-comment\">// 初始化</span><br>  <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\">el, val, def</span>) &#123;<br>    el.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-src&#x27;</span>, val)<br>    el.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;src&#x27;</span>, def)<br>  &#125;,<br>  <span class=\"hljs-comment\">// 利用IntersectionObserver监听el</span><br>  <span class=\"hljs-title function_\">observe</span>(<span class=\"hljs-params\">el</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> io =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IntersectionObserver</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">entries</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">const</span> realSrc = el.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">src</span><br>      <span class=\"hljs-keyword\">if</span> (entries[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">isIntersecting</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (realSrc) &#123;<br>          el.<span class=\"hljs-property\">src</span> = realSrc<br>          el.<span class=\"hljs-title function_\">removeAttribute</span>(<span class=\"hljs-string\">&#x27;data-src&#x27;</span>)<br>        &#125;<br>      &#125;<br>    &#125;)<br>    io.<span class=\"hljs-title function_\">observe</span>(el)<br>  &#125;,<br>  <span class=\"hljs-comment\">// 监听scroll事件</span><br>  <span class=\"hljs-title function_\">listenerScroll</span>(<span class=\"hljs-params\">el</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> handler = <span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-property\">load</span>, <span class=\"hljs-number\">300</span>)<br>    <span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-title function_\">load</span>(el)<br>    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;scroll&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">handler</span>(el)<br>    &#125;)<br>  &#125;,<br>  <span class=\"hljs-comment\">// 加载真实图片</span><br>  <span class=\"hljs-title function_\">load</span>(<span class=\"hljs-params\">el</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> windowHeight = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-property\">clientHeight</span><br>    <span class=\"hljs-keyword\">const</span> elTop = el.<span class=\"hljs-title function_\">getBoundingClientRect</span>().<span class=\"hljs-property\">top</span><br>    <span class=\"hljs-keyword\">const</span> elBtm = el.<span class=\"hljs-title function_\">getBoundingClientRect</span>().<span class=\"hljs-property\">bottom</span><br>    <span class=\"hljs-keyword\">const</span> realSrc = el.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">src</span><br>    <span class=\"hljs-keyword\">if</span> (elTop - windowHeight &lt; <span class=\"hljs-number\">0</span> &amp;&amp; elBtm &gt; <span class=\"hljs-number\">0</span>) &#123;<br>      <span class=\"hljs-keyword\">if</span> (realSrc) &#123;<br>        el.<span class=\"hljs-property\">src</span> = realSrc<br>        el.<span class=\"hljs-title function_\">removeAttribute</span>(<span class=\"hljs-string\">&#x27;data-src&#x27;</span>)<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-comment\">// 节流</span><br>  <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> timer<br>    <span class=\"hljs-keyword\">let</span> prevTime<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...args</span>) &#123;<br>      <span class=\"hljs-keyword\">const</span> currTime = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>()<br>      <span class=\"hljs-keyword\">const</span> context =<span class=\"hljs-variable language_\">this</span><br>      <span class=\"hljs-keyword\">if</span> (!prevTime) prevTime = currTime<br>      <span class=\"hljs-built_in\">clearTimeout</span>(timer)<br><br>      <span class=\"hljs-keyword\">if</span> (currTime - prevTime &gt; delay) &#123;<br>        prevTime = currTime<br>        fn.<span class=\"hljs-title function_\">apply</span>(context, args)<br>        <span class=\"hljs-built_in\">clearTimeout</span>(timer)<br>        <span class=\"hljs-keyword\">return</span><br>      &#125;<br><br>      timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        prevTime = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>()<br>        timer =<span class=\"hljs-literal\">null</span><br>        fn.<span class=\"hljs-title function_\">apply</span>(context, args)<br>      &#125;, delay)<br>    &#125;<br>  &#125;,<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">LazyLoad</span><br><br><span class=\"hljs-comment\">// 使用</span><br>&lt;img v-<span class=\"hljs-title class_\">LazyLoad</span>=<span class=\"hljs-string\">&quot;xxx.jpg&quot;</span> /&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"批量注册\"><a href=\"#批量注册\" class=\"headerlink\" title=\"批量注册\"></a>批量注册</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> copy <span class=\"hljs-keyword\">from</span><span class=\"hljs-string\">&#x27;./copy&#x27;</span><br><span class=\"hljs-keyword\">import</span> debounce <span class=\"hljs-keyword\">from</span><span class=\"hljs-string\">&#x27;./debounce&#x27;</span><br><span class=\"hljs-comment\">// 自定义指令</span><br><span class=\"hljs-keyword\">const</span> directives = &#123;<br>  copy,<br>  debounce,<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">install</span>(<span class=\"hljs-params\">Vue</span>) &#123;<br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(directives).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">key</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">directive</span>(key, directives[key])<br>    &#125;)<br>  &#125;,<br>&#125;<br><br><span class=\"hljs-comment\">//在 main.js 引入并调用</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vue</span> <span class=\"hljs-keyword\">from</span><span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Directives</span> <span class=\"hljs-keyword\">from</span><span class=\"hljs-string\">&#x27;./JS/directives&#x27;</span><br><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title class_\">Directives</span>)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h2><p>封装常规业务的自定义指令，理解自定义指令各钩子函数意义。<a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">vue 官网-自定义指令</a></p>\n<h2 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h2><ul>\n<li>  <code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，可以定义一个在绑定时执行一次的初始化动作。</li>\n<li>  <code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中)。</li>\n<li>  <code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值。</li>\n<li>  <code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li>\n<li>  <code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li>\n</ul>\n<h2 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h2><h3 id=\"v-copy\"><a href=\"#v-copy\" class=\"headerlink\" title=\"v-copy\"></a>v-copy</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">const copy = &#123;<br> <span class=\"hljs-built_in\">bind</span>(el, &#123; value &#125;) &#123;<br>   el.<span class=\"hljs-variable\">$value</span> = value<br>   el<span class=\"hljs-selector-class\">.handler</span> = () =&gt; &#123;<br>     <span class=\"hljs-keyword\">if</span> (!el.<span class=\"hljs-variable\">$value</span>) &#123;<br>       <span class=\"hljs-comment\">// 值为空的时候，给出提示。可根据项目UI仔细设计</span><br>       console<span class=\"hljs-selector-class\">.log</span>(<span class=\"hljs-string\">&#x27;无复制内容&#x27;</span>)<br>       return<br>     &#125;<br>     <span class=\"hljs-comment\">// 动态创建 textarea 标签</span><br>     const <span class=\"hljs-selector-tag\">textarea</span> = document<span class=\"hljs-selector-class\">.createElement</span>(<span class=\"hljs-string\">&#x27;textarea&#x27;</span>)<br>     <span class=\"hljs-comment\">// 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span><br>     <span class=\"hljs-selector-tag\">textarea</span><span class=\"hljs-selector-class\">.readOnly</span> =<span class=\"hljs-string\">&#x27;readonly&#x27;</span><br>     <span class=\"hljs-selector-tag\">textarea</span><span class=\"hljs-selector-class\">.style</span><span class=\"hljs-selector-class\">.position</span> =<span class=\"hljs-string\">&#x27;absolute&#x27;</span><br>     <span class=\"hljs-selector-tag\">textarea</span><span class=\"hljs-selector-class\">.style</span><span class=\"hljs-selector-class\">.left</span> =<span class=\"hljs-string\">&#x27;-9999px&#x27;</span><br>     <span class=\"hljs-comment\">// 将要 copy 的值赋给 textarea 标签的 value 属性</span><br>     <span class=\"hljs-selector-tag\">textarea</span><span class=\"hljs-selector-class\">.value</span> = el.<span class=\"hljs-variable\">$value</span><br>     <span class=\"hljs-comment\">// 将 textarea 插入到 body 中</span><br>     document<span class=\"hljs-selector-class\">.body</span><span class=\"hljs-selector-class\">.appendChild</span>(textarea)<br>     <span class=\"hljs-comment\">// 选中值并复制</span><br>     <span class=\"hljs-selector-tag\">textarea</span><span class=\"hljs-selector-class\">.select</span>()<br>     const result = document<span class=\"hljs-selector-class\">.execCommand</span>(<span class=\"hljs-string\">&#x27;Copy&#x27;</span>)<br>     <span class=\"hljs-keyword\">if</span> (result) &#123;<br>       console<span class=\"hljs-selector-class\">.log</span>(<span class=\"hljs-string\">&#x27;复制成功&#x27;</span>)<span class=\"hljs-comment\">// 可根据项目UI仔细设计</span><br>     &#125;<br>     document<span class=\"hljs-selector-class\">.body</span><span class=\"hljs-selector-class\">.removeChild</span>(textarea)<br>   &#125;<br>   <span class=\"hljs-comment\">// 绑定点击事件，就是所谓的一键 copy 啦</span><br>   el<span class=\"hljs-selector-class\">.addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, el.handler)<br> &#125;,<br> <span class=\"hljs-comment\">// 当传进来的值更新的时候触发</span><br> <span class=\"hljs-built_in\">componentUpdated</span>(el, &#123; value &#125;) &#123;<br>   el.<span class=\"hljs-variable\">$value</span> = value<br> &#125;,<br> <span class=\"hljs-comment\">// 指令与元素解绑的时候，移除事件绑定</span><br> <span class=\"hljs-built_in\">unbind</span>(el) &#123;<br>   el<span class=\"hljs-selector-class\">.removeEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, el.handler)<br> &#125;,<br>&#125;<br><br>export default copy<br><br><span class=\"hljs-comment\">// 使用方式</span><br>&lt;template&gt;<br> &lt;<span class=\"hljs-selector-tag\">button</span> v-copy=<span class=\"hljs-string\">&quot;copyText&quot;</span>&gt;复制&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;export default &#123;<br>   <span class=\"hljs-built_in\">data</span>() &#123;<br>     return &#123;<br>       copyText:<span class=\"hljs-string\">&#x27;a copy directives&#x27;</span>,<br>     &#125;<br>   &#125;,<br> &#125; &lt;/script&gt;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-int（正整数）-v-Float（两位小数）\"><a href=\"#v-int（正整数）-v-Float（两位小数）\" class=\"headerlink\" title=\"v-int（正整数） v-Float（两位小数）\"></a>v-int（正整数） v-Float（两位小数）</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">import Vue from <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-comment\">// 针对 input做的限制，只能输入正整数</span><br>Vue.directive(<span class=\"hljs-string\">&#x27;Int&#x27;</span>, &#123;<br>    <span class=\"hljs-attr\">bind</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el, binding, vnode</span>) &#123;<br>        <span class=\"hljs-comment\">// 针对 el-input做的限制，只能输入正整数</span><br>        <span class=\"hljs-comment\">// if (binding.expression == &quot;el&quot;) &#123;</span><br>        <span class=\"hljs-comment\">//   input = el.getElementsByTagName(&#x27;input&#x27;)[0]</span><br>        <span class=\"hljs-comment\">// &#125; else &#123;</span><br>        <span class=\"hljs-comment\">//   input = el</span><br>        <span class=\"hljs-comment\">// &#125;</span><br>        const input = el.getElementsByTagName(<span class=\"hljs-string\">&#x27;input&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br>        input.onkeyup = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> (input.value.<span class=\"hljs-built_in\">length</span> === <span class=\"hljs-number\">1</span>) &#123;<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^0-9]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^\\d]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/\\b(0+)/gi</span>, <span class=\"hljs-string\">&quot;&quot;</span>)<br>            &#125;<br>            trigger(input, <span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>        &#125;<br>        input.onblur = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> (input.value.<span class=\"hljs-built_in\">length</span> === <span class=\"hljs-number\">1</span>) &#123;<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^0-9]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^\\d]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>                input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/\\b(0+)/gi</span>, <span class=\"hljs-string\">&quot;&quot;</span>)<br>            &#125;<br>            trigger(input, <span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class=\"hljs-comment\">// 针对 input做的限制，能输入2位小数</span><br>Vue.directive(<span class=\"hljs-string\">&#x27;Float&#x27;</span>, &#123;<br>    <span class=\"hljs-attr\">bind</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el, binding, vnode</span>) &#123;<br>        <span class=\"hljs-comment\">// let input = undefined</span><br>        <span class=\"hljs-comment\">// 针对 el-input做的限制，只能输入正整数</span><br>        <span class=\"hljs-comment\">// if (binding.expression == &quot;el&quot;) &#123;</span><br>        <span class=\"hljs-comment\">//   input = el.getElementsByTagName(&#x27;input&#x27;)[0]</span><br>        <span class=\"hljs-comment\">// &#125; else &#123;</span><br>        <span class=\"hljs-comment\">//   input = el</span><br>        <span class=\"hljs-comment\">// &#125;</span><br>        const input = el.getElementsByTagName(<span class=\"hljs-string\">&#x27;input&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br>        input.onkeyup = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) &#123;<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^\\d.]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/\\.&#123;2,&#125;/g</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^\\./g</span>, <span class=\"hljs-string\">&#x27;0.&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^\\d*\\.\\d*\\./g</span>, input.value.substring(<span class=\"hljs-number\">0</span>, input.value.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>));<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^0[^\\.]+/g</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>)<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^(\\d+)\\.(\\d\\d).*$/</span>, <span class=\"hljs-string\">&#x27;$1.$2&#x27;</span>)<br>            trigger(input, <span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>        &#125;<br>        input.onblur = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) &#123;<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[^\\d.]/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/\\.&#123;2,&#125;/g</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^\\./g</span>, <span class=\"hljs-string\">&#x27;0.&#x27;</span>);<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^\\d*\\.\\d*\\./g</span>, input.value.substring(<span class=\"hljs-number\">0</span>, input.value.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>));<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^0[^\\.]+/g</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>)<br>            input.value = input.value.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/^(\\d+)\\.(\\d\\d).*$/</span>, <span class=\"hljs-string\">&#x27;$1.$2&#x27;</span>)<br>            trigger(input, <span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br>const trigger = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, type</span>) =&gt;</span> &#123;<br>    const e = document.createEvent(<span class=\"hljs-string\">&#x27;HTMLEvents&#x27;</span>)<br>    e.initEvent(type, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>)<br>    el.dispatchEvent(e)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-debounce\"><a href=\"#v-debounce\" class=\"headerlink\" title=\"v-debounce\"></a>v-debounce</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 防止按钮在短时间内被多次点击，使用防抖函数限制规定时间内只能点击一次。</span><br><span class=\"hljs-keyword\">const</span> debounce = &#123;<br>  <span class=\"hljs-attr\">inserted</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, binding</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> timer<br>    el.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;keyup&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (timer) &#123;<br>        <span class=\"hljs-built_in\">clearTimeout</span>(timer)<br>      &#125;<br>      timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        binding.<span class=\"hljs-title function_\">value</span>()<br>      &#125;, <span class=\"hljs-number\">1000</span>)<br>    &#125;)<br>  &#125;,<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> debounce<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-emoji\"><a href=\"#v-emoji\" class=\"headerlink\" title=\"v-emoji\"></a>v-emoji</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">// 根据正则表达式，设计自定义处理表单输入规则的指令，下面以禁止输入表情和特殊字符为例。</span><br>let findEle = <span class=\"hljs-function\">(<span class=\"hljs-params\">parent, type</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">return</span> parent.tagName.toLowerCase() === type ? parent : parent.querySelector(type)<br>&#125;<br><br>const trigger = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, type</span>) =&gt;</span> &#123;<br>  const e = document.createEvent(<span class=\"hljs-string\">&#x27;HTMLEvents&#x27;</span>)<br>  e.initEvent(type,<span class=\"hljs-literal\">true</span>,<span class=\"hljs-literal\">true</span>)<br>  el.dispatchEvent(e)<br>&#125;<br><br>const emoji = &#123;<br>  <span class=\"hljs-attr\">bind</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, binding, vnode</span>) &#123;<br>    <span class=\"hljs-comment\">// 正则规则可根据需求自定义</span><br>    <span class=\"hljs-keyword\">var</span> regRule = <span class=\"hljs-regexp\">/[^u4E00-u9FA5|d|a-zA-Z|rns,.?!，。？！…—&amp;$=()-+/*&#123;&#125;[]]|s/g</span><br>    let <span class=\"hljs-symbol\">$i</span>np = findEle(el,<span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>    el.<span class=\"hljs-symbol\">$i</span>np = <span class=\"hljs-symbol\">$i</span>np<br>    <span class=\"hljs-symbol\">$i</span>np.handle =<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>      let val = <span class=\"hljs-symbol\">$i</span>np.value<br>      <span class=\"hljs-symbol\">$i</span>np.value = val.<span class=\"hljs-built_in\">replace</span>(regRule,<span class=\"hljs-string\">&#x27;&#x27;</span>)<br><br>      trigger(<span class=\"hljs-symbol\">$i</span>np,<span class=\"hljs-string\">&#x27;input&#x27;</span>)<br>    &#125;<br>    <span class=\"hljs-symbol\">$i</span>np.addEventListener(<span class=\"hljs-string\">&#x27;keyup&#x27;</span>, <span class=\"hljs-symbol\">$i</span>np.handle)<br>  &#125;,<br>  <span class=\"hljs-attr\">unbind</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el</span>) &#123;<br>    el.<span class=\"hljs-symbol\">$i</span>np.removeEventListener(<span class=\"hljs-string\">&#x27;keyup&#x27;</span>, el.<span class=\"hljs-symbol\">$i</span>np.handle)<br>  &#125;,<br>&#125;<br><br>export default emoji<br><br><span class=\"hljs-comment\">//使用</span><br>&lt;template&gt;<br>  &lt;input type=<span class=\"hljs-string\">&quot;text&quot;</span> v-model=<span class=\"hljs-string\">&quot;note&quot;</span> v-emoji /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-LazyLoad\"><a href=\"#v-LazyLoad\" class=\"headerlink\" title=\"v-LazyLoad\"></a>v-LazyLoad</h3><blockquote>\n<p>实现一个图片懒加载指令，只加载浏览器可见区域的图片。</p>\n</blockquote>\n<p>思路：<br>图片懒加载的原理主要是判断当前图片是否到了可视区域这一核心逻辑实现的<br>拿到所有的图片 Dom ，遍历每个图片判断当前图片是否到了可视区范围内<br>如果到了就设置图片的 src 属性，否则显示默认图片</p>\n<blockquote>\n<p>图片懒加载有两种方式可以实现，一是绑定 srcoll 事件进行监听，二是使用 IntersectionObserver 判断图片是否到了可视区域，但是有浏览器兼容性问题。</p>\n</blockquote>\n<p>下面封装一个懒加载指令兼容两种方法，判断浏览器是否支持 IntersectionObserver API，如果支持就使用 IntersectionObserver 实现懒加载，否则则使用 srcoll 事件监听 + 节流的方法实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">LazyLoad</span> = &#123;<br>  <span class=\"hljs-comment\">// install方法</span><br>  <span class=\"hljs-title function_\">install</span>(<span class=\"hljs-params\">Vue, options</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> defaultSrc = options.<span class=\"hljs-property\">default</span><br>    <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">directive</span>(<span class=\"hljs-string\">&#x27;lazy&#x27;</span>, &#123;<br>      <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">el, binding</span>) &#123;<br>        <span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-title function_\">init</span>(el, binding.<span class=\"hljs-property\">value</span>, defaultSrc)<br>      &#125;,<br>      <span class=\"hljs-title function_\">inserted</span>(<span class=\"hljs-params\">el</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">IntersectionObserver</span>) &#123;<br>          <span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-title function_\">observe</span>(el)<br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>          <span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-title function_\">listenerScroll</span>(el)<br>        &#125;<br>      &#125;,<br>    &#125;)<br>  &#125;,<br>  <span class=\"hljs-comment\">// 初始化</span><br>  <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\">el, val, def</span>) &#123;<br>    el.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-src&#x27;</span>, val)<br>    el.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;src&#x27;</span>, def)<br>  &#125;,<br>  <span class=\"hljs-comment\">// 利用IntersectionObserver监听el</span><br>  <span class=\"hljs-title function_\">observe</span>(<span class=\"hljs-params\">el</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> io =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IntersectionObserver</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">entries</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">const</span> realSrc = el.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">src</span><br>      <span class=\"hljs-keyword\">if</span> (entries[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">isIntersecting</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (realSrc) &#123;<br>          el.<span class=\"hljs-property\">src</span> = realSrc<br>          el.<span class=\"hljs-title function_\">removeAttribute</span>(<span class=\"hljs-string\">&#x27;data-src&#x27;</span>)<br>        &#125;<br>      &#125;<br>    &#125;)<br>    io.<span class=\"hljs-title function_\">observe</span>(el)<br>  &#125;,<br>  <span class=\"hljs-comment\">// 监听scroll事件</span><br>  <span class=\"hljs-title function_\">listenerScroll</span>(<span class=\"hljs-params\">el</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> handler = <span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-property\">load</span>, <span class=\"hljs-number\">300</span>)<br>    <span class=\"hljs-title class_\">LazyLoad</span>.<span class=\"hljs-title function_\">load</span>(el)<br>    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;scroll&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">handler</span>(el)<br>    &#125;)<br>  &#125;,<br>  <span class=\"hljs-comment\">// 加载真实图片</span><br>  <span class=\"hljs-title function_\">load</span>(<span class=\"hljs-params\">el</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> windowHeight = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-property\">clientHeight</span><br>    <span class=\"hljs-keyword\">const</span> elTop = el.<span class=\"hljs-title function_\">getBoundingClientRect</span>().<span class=\"hljs-property\">top</span><br>    <span class=\"hljs-keyword\">const</span> elBtm = el.<span class=\"hljs-title function_\">getBoundingClientRect</span>().<span class=\"hljs-property\">bottom</span><br>    <span class=\"hljs-keyword\">const</span> realSrc = el.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">src</span><br>    <span class=\"hljs-keyword\">if</span> (elTop - windowHeight &lt; <span class=\"hljs-number\">0</span> &amp;&amp; elBtm &gt; <span class=\"hljs-number\">0</span>) &#123;<br>      <span class=\"hljs-keyword\">if</span> (realSrc) &#123;<br>        el.<span class=\"hljs-property\">src</span> = realSrc<br>        el.<span class=\"hljs-title function_\">removeAttribute</span>(<span class=\"hljs-string\">&#x27;data-src&#x27;</span>)<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-comment\">// 节流</span><br>  <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> timer<br>    <span class=\"hljs-keyword\">let</span> prevTime<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...args</span>) &#123;<br>      <span class=\"hljs-keyword\">const</span> currTime = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>()<br>      <span class=\"hljs-keyword\">const</span> context =<span class=\"hljs-variable language_\">this</span><br>      <span class=\"hljs-keyword\">if</span> (!prevTime) prevTime = currTime<br>      <span class=\"hljs-built_in\">clearTimeout</span>(timer)<br><br>      <span class=\"hljs-keyword\">if</span> (currTime - prevTime &gt; delay) &#123;<br>        prevTime = currTime<br>        fn.<span class=\"hljs-title function_\">apply</span>(context, args)<br>        <span class=\"hljs-built_in\">clearTimeout</span>(timer)<br>        <span class=\"hljs-keyword\">return</span><br>      &#125;<br><br>      timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        prevTime = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>()<br>        timer =<span class=\"hljs-literal\">null</span><br>        fn.<span class=\"hljs-title function_\">apply</span>(context, args)<br>      &#125;, delay)<br>    &#125;<br>  &#125;,<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">LazyLoad</span><br><br><span class=\"hljs-comment\">// 使用</span><br>&lt;img v-<span class=\"hljs-title class_\">LazyLoad</span>=<span class=\"hljs-string\">&quot;xxx.jpg&quot;</span> /&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"批量注册\"><a href=\"#批量注册\" class=\"headerlink\" title=\"批量注册\"></a>批量注册</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> copy <span class=\"hljs-keyword\">from</span><span class=\"hljs-string\">&#x27;./copy&#x27;</span><br><span class=\"hljs-keyword\">import</span> debounce <span class=\"hljs-keyword\">from</span><span class=\"hljs-string\">&#x27;./debounce&#x27;</span><br><span class=\"hljs-comment\">// 自定义指令</span><br><span class=\"hljs-keyword\">const</span> directives = &#123;<br>  copy,<br>  debounce,<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">install</span>(<span class=\"hljs-params\">Vue</span>) &#123;<br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(directives).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">key</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">directive</span>(key, directives[key])<br>    &#125;)<br>  &#125;,<br>&#125;<br><br><span class=\"hljs-comment\">//在 main.js 引入并调用</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vue</span> <span class=\"hljs-keyword\">from</span><span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Directives</span> <span class=\"hljs-keyword\">from</span><span class=\"hljs-string\">&#x27;./JS/directives&#x27;</span><br><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title class_\">Directives</span>)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"Vue响应数据原理","date":"2021-07-26T13:27:28.000Z","_content":"\n## [响应式原理（Vue.2x）](https://cn.vuejs.org/v2/guide/reactivity.html)\n\n官网上介绍了， Vue2.x 版本数据绑定原理其主要于使用[Object.defineProperty()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)的方法，对数据进行了`getter/setter`数据劫持。\n\n### Object.defineProperty()\n\n> Object.defineProperty 需要三个参数（object , propName , descriptor）\n\n-   object 对象 => 添加的对象\n-   propName 属性名 => 要加的属性的名字 【类型：String】\n-   descriptor 属性描述 => 加的这个属性值【类型：Object】\n\n```\nvar message = 'hello world';\nconst data = {};\nObject.defineProperty(data, 'message', {\n   get() {\n       return message;\n   },\n   set(newVal) {\n       message = newVal;\n   }\n});\ndata.message // 'hello world'\ndata.message = 'test' // 'test'\n```\n\n## Vue 中实现数据劫持过程\n\n> 经典的例子\n\n```\nconst data = {\n    name: '你不知道的VUE',\n    age: 25,\n    info: {\n        address: '北京'\n    },\n    numbers: [1, 2, 3, 4]\n};\nfunction observerObject(target, name, value) {\n    if (typeof value === 'object' || Array.isArray(target)) {\n        observer(value);\n    }\n    Object.defineProperty(target, name, {\n        get() {\n            return value;\n        },\n        set(newVal) {\n            if (newVal !== value) {\n                if (typeof value === 'object' || Array.isArray(value)) {\n                    observer(value);\n                }\n                value = newVal;\n            }\n            renderView();\n        }\n    });\n}\nfunction observer(target) {\n    if (typeof target !== 'object' || !target) {\n        return target;\n    }\n    for (const key in target) {\n        if (target.hasOwnProperty(key)) {\n            const value = target[key];\n            observerObject(target, key, value);\n        }\n    }\n}\nobserver(data);\n```\n\n遍历这个 data 对象，对每一个属性都使用 observerObject 方法进行数据劫持。\n\nobserverObject 主要做的就是使用 Object.defineProperty 去监听传入的属性，如果 target 是一个对象的话，就递归执行 observer，确保 data 中所有的对象中的所以属性都能够被监听到。当我们 set 的时候，去执行 renderView（执行视图渲染相关逻辑）。\n\n### Object.defineProperty 局限性\n\n1.  递归遍历所有的对象的属性，这样如果我们数据层级比较深的话，是一件很耗费性能的事情\n2.  只能应用在对象上，不能用于数组\n3.  只能够监听定义时的属性，不能监听新加的属性，这也就是为什么在 vue 中要使用 Vue.set/vue.detele\n\n## [Proxy(Vue3)](https://v3.cn.vuejs.org/guide/reactivity.html#proxy-vs-%E5%8E%9F%E5%A7%8B%E6%A0%87%E8%AF%86)\n\n-   使用了 proxy 去实现对象的监听，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。\n\n-   Proxy 对拦截操作多达 13 种，所以在这 13 中操作中，我们可以自定义很多逻辑。Proxy 的出现，其实就是为了扩展对象的能力。\n\n### [proxy MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n\n`new Proxy(target, handler)`\ntarget: 拦截的目标对象\nhandler：定义拦截的方法\n\n-   handler.apply\n-   handler.construct 拦截构造函数调用 new Example（）\n-   handler.difineProperty\n-   handler.get 拦截对象属性的读取 obj.name\n-   handler.set 拦截对象属性的设置 obj.name = '前端的自我修养'\n-   handler.getOwnPropertyDwscriptor\n-   handler.has\n-   handler.ownKeys 拦截 Object.keys for in 等\n-   handler.setPrototypeOf\n-   handler.isExtensible\n-   handler.getPropertyOf\n-   handler.preventExtensiions\n-   handler.enumerate\n\n### Refect\n\n-   将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty），放到 Reflect 对象上。\n-   修改某些 Object 方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而 Reflect.defineProperty(obj, name, desc)则会返回 false。\n-   让 Object 操作都变成函数行为。比如 name in obj 和 delete obj[name]，而 Reflect.has(obj, name)和 Reflect.deleteProperty(obj, name)让它们变成了函数行为。\n-   Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的\\* Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。\n\n### 数据劫持相应\n\n```\nfunction observe(target) {\n    if (typeof target !== 'object' || target == null) {\n        return target;\n    }\n    const obseved = new Proxy(target, {\n        get(target, key, receiver) {\n           return observe(Reflect.get(target, key, receiver);)\n\n        },\n        set(target, key, value, receiver) {\n            if (value === target[key]) {\n                return true;\n            }\n            const ownKeys = Reflect.ownKeys(target);\n              if (ownKeys.includes(key)) {\n                console.log('旧属性');\n            } else {\n                console.log('新添加的属性');\n\n           return Reflect.set(target, key, value, receiver);\n\n\n        },\n        deleteProperty(target, key) {\n           return result  Reflect.deleteProperty(target, key);\n\n        }\n    });\n    return obseved;\n}\nconst data = {\n    name: '你不知道的前端',\n    age: 25,\n    info: {\n        city:'beijing'\n    }，\n    numbers: [1, 2, 3, 4]\n};\nconst proxyData = observe(data\n```\n\n#### proxy 在实现数据劫持时，具有以下优点\n\n-   proxy 可以直接监听数组的修改\n-   proxy 可以直接监听属性的新增和删除\n-   在实现深度监听的时候，只有在 data 对象的属性被访问的时候，才去对这个属性做监听处理，而不是一次性递归所有的。\n\n> 内容便于自身理解，并非 vue 源码实现\n> 部分内容转载于 知乎-[Vue 如何实现数据劫持](https://zhuanlan.zhihu.com/p/111591503)\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-07/07-26Vue组件响应式.md","raw":"---\ntitle: Vue响应数据原理\ndate: 2021-07-26 21:27:28\ntags: Vue\ncategory: Vue\n---\n\n## [响应式原理（Vue.2x）](https://cn.vuejs.org/v2/guide/reactivity.html)\n\n官网上介绍了， Vue2.x 版本数据绑定原理其主要于使用[Object.defineProperty()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)的方法，对数据进行了`getter/setter`数据劫持。\n\n### Object.defineProperty()\n\n> Object.defineProperty 需要三个参数（object , propName , descriptor）\n\n-   object 对象 => 添加的对象\n-   propName 属性名 => 要加的属性的名字 【类型：String】\n-   descriptor 属性描述 => 加的这个属性值【类型：Object】\n\n```\nvar message = 'hello world';\nconst data = {};\nObject.defineProperty(data, 'message', {\n   get() {\n       return message;\n   },\n   set(newVal) {\n       message = newVal;\n   }\n});\ndata.message // 'hello world'\ndata.message = 'test' // 'test'\n```\n\n## Vue 中实现数据劫持过程\n\n> 经典的例子\n\n```\nconst data = {\n    name: '你不知道的VUE',\n    age: 25,\n    info: {\n        address: '北京'\n    },\n    numbers: [1, 2, 3, 4]\n};\nfunction observerObject(target, name, value) {\n    if (typeof value === 'object' || Array.isArray(target)) {\n        observer(value);\n    }\n    Object.defineProperty(target, name, {\n        get() {\n            return value;\n        },\n        set(newVal) {\n            if (newVal !== value) {\n                if (typeof value === 'object' || Array.isArray(value)) {\n                    observer(value);\n                }\n                value = newVal;\n            }\n            renderView();\n        }\n    });\n}\nfunction observer(target) {\n    if (typeof target !== 'object' || !target) {\n        return target;\n    }\n    for (const key in target) {\n        if (target.hasOwnProperty(key)) {\n            const value = target[key];\n            observerObject(target, key, value);\n        }\n    }\n}\nobserver(data);\n```\n\n遍历这个 data 对象，对每一个属性都使用 observerObject 方法进行数据劫持。\n\nobserverObject 主要做的就是使用 Object.defineProperty 去监听传入的属性，如果 target 是一个对象的话，就递归执行 observer，确保 data 中所有的对象中的所以属性都能够被监听到。当我们 set 的时候，去执行 renderView（执行视图渲染相关逻辑）。\n\n### Object.defineProperty 局限性\n\n1.  递归遍历所有的对象的属性，这样如果我们数据层级比较深的话，是一件很耗费性能的事情\n2.  只能应用在对象上，不能用于数组\n3.  只能够监听定义时的属性，不能监听新加的属性，这也就是为什么在 vue 中要使用 Vue.set/vue.detele\n\n## [Proxy(Vue3)](https://v3.cn.vuejs.org/guide/reactivity.html#proxy-vs-%E5%8E%9F%E5%A7%8B%E6%A0%87%E8%AF%86)\n\n-   使用了 proxy 去实现对象的监听，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。\n\n-   Proxy 对拦截操作多达 13 种，所以在这 13 中操作中，我们可以自定义很多逻辑。Proxy 的出现，其实就是为了扩展对象的能力。\n\n### [proxy MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n\n`new Proxy(target, handler)`\ntarget: 拦截的目标对象\nhandler：定义拦截的方法\n\n-   handler.apply\n-   handler.construct 拦截构造函数调用 new Example（）\n-   handler.difineProperty\n-   handler.get 拦截对象属性的读取 obj.name\n-   handler.set 拦截对象属性的设置 obj.name = '前端的自我修养'\n-   handler.getOwnPropertyDwscriptor\n-   handler.has\n-   handler.ownKeys 拦截 Object.keys for in 等\n-   handler.setPrototypeOf\n-   handler.isExtensible\n-   handler.getPropertyOf\n-   handler.preventExtensiions\n-   handler.enumerate\n\n### Refect\n\n-   将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty），放到 Reflect 对象上。\n-   修改某些 Object 方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而 Reflect.defineProperty(obj, name, desc)则会返回 false。\n-   让 Object 操作都变成函数行为。比如 name in obj 和 delete obj[name]，而 Reflect.has(obj, name)和 Reflect.deleteProperty(obj, name)让它们变成了函数行为。\n-   Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的\\* Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。\n\n### 数据劫持相应\n\n```\nfunction observe(target) {\n    if (typeof target !== 'object' || target == null) {\n        return target;\n    }\n    const obseved = new Proxy(target, {\n        get(target, key, receiver) {\n           return observe(Reflect.get(target, key, receiver);)\n\n        },\n        set(target, key, value, receiver) {\n            if (value === target[key]) {\n                return true;\n            }\n            const ownKeys = Reflect.ownKeys(target);\n              if (ownKeys.includes(key)) {\n                console.log('旧属性');\n            } else {\n                console.log('新添加的属性');\n\n           return Reflect.set(target, key, value, receiver);\n\n\n        },\n        deleteProperty(target, key) {\n           return result  Reflect.deleteProperty(target, key);\n\n        }\n    });\n    return obseved;\n}\nconst data = {\n    name: '你不知道的前端',\n    age: 25,\n    info: {\n        city:'beijing'\n    }，\n    numbers: [1, 2, 3, 4]\n};\nconst proxyData = observe(data\n```\n\n#### proxy 在实现数据劫持时，具有以下优点\n\n-   proxy 可以直接监听数组的修改\n-   proxy 可以直接监听属性的新增和删除\n-   在实现深度监听的时候，只有在 data 对象的属性被访问的时候，才去对这个属性做监听处理，而不是一次性递归所有的。\n\n> 内容便于自身理解，并非 vue 源码实现\n> 部分内容转载于 知乎-[Vue 如何实现数据劫持](https://zhuanlan.zhihu.com/p/111591503)\n\n![BG图片](/img/1.jpg)\n","slug":"2021-07/07-26Vue组件响应式","published":1,"updated":"2021-08-01T07:57:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c2115000xf60cg5jnf1f6","content":"<h2 id=\"响应式原理（Vue-2x）\"><a href=\"#响应式原理（Vue-2x）\" class=\"headerlink\" title=\"响应式原理（Vue.2x）\"></a><a href=\"https://cn.vuejs.org/v2/guide/reactivity.html\">响应式原理（Vue.2x）</a></h2><p>官网上介绍了， Vue2.x 版本数据绑定原理其主要于使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty()</a>的方法，对数据进行了<code>getter/setter</code>数据劫持。</p>\n<h3 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty()\"></a>Object.defineProperty()</h3><blockquote>\n<p>Object.defineProperty 需要三个参数（object , propName , descriptor）</p>\n</blockquote>\n<ul>\n<li>  object 对象 =&gt; 添加的对象</li>\n<li>  propName 属性名 =&gt; 要加的属性的名字 【类型：String】</li>\n<li>  descriptor 属性描述 =&gt; 加的这个属性值【类型：Object】</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">&#x27;hello world&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">data</span> = &#123;&#125;;<br>Object.defineProperty(<span class=\"hljs-keyword\">data</span>, <span class=\"hljs-string\">&#x27;message&#x27;</span>, &#123;<br>   <span class=\"hljs-keyword\">get</span>() &#123;<br>       <span class=\"hljs-keyword\">return</span> message;<br>   &#125;,<br>   <span class=\"hljs-keyword\">set</span>(newVal) &#123;<br>       message = newVal;<br>   &#125;<br>&#125;);<br><span class=\"hljs-keyword\">data</span>.message <span class=\"hljs-comment\">// &#x27;hello world&#x27;</span><br><span class=\"hljs-keyword\">data</span>.message = <span class=\"hljs-string\">&#x27;test&#x27;</span> <span class=\"hljs-comment\">// &#x27;test&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Vue-中实现数据劫持过程\"><a href=\"#Vue-中实现数据劫持过程\" class=\"headerlink\" title=\"Vue 中实现数据劫持过程\"></a>Vue 中实现数据劫持过程</h2><blockquote>\n<p>经典的例子</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> data = &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;你不知道的VUE&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span>,<br>    <span class=\"hljs-attr\">info</span>: &#123;<br>        <span class=\"hljs-attr\">address</span>: <span class=\"hljs-string\">&#x27;北京&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">numbers</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]<br>&#125;;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">observerObject</span>(<span class=\"hljs-params\">target, name, value</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> value === <span class=\"hljs-string\">&#x27;object&#x27;</span> || <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(target)) &#123;<br>        <span class=\"hljs-title function_\">observer</span>(value);<br>    &#125;<br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(target, name, &#123;<br>        <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> value;<br>        &#125;,<br>        <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">newVal</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> (newVal !== value) &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> value === <span class=\"hljs-string\">&#x27;object&#x27;</span> || <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(value)) &#123;<br>                    <span class=\"hljs-title function_\">observer</span>(value);<br>                &#125;<br>                value = newVal;<br>            &#125;<br>            <span class=\"hljs-title function_\">renderView</span>();<br>        &#125;<br>    &#125;);<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">observer</span>(<span class=\"hljs-params\">target</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> target !== <span class=\"hljs-string\">&#x27;object&#x27;</span> || !target) &#123;<br>        <span class=\"hljs-keyword\">return</span> target;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> target) &#123;<br>        <span class=\"hljs-keyword\">if</span> (target.<span class=\"hljs-title function_\">hasOwnProperty</span>(key)) &#123;<br>            <span class=\"hljs-keyword\">const</span> value = target[key];<br>            <span class=\"hljs-title function_\">observerObject</span>(target, key, value);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-title function_\">observer</span>(data);<br></code></pre></td></tr></table></figure>\n\n<p>遍历这个 data 对象，对每一个属性都使用 observerObject 方法进行数据劫持。</p>\n<p>observerObject 主要做的就是使用 Object.defineProperty 去监听传入的属性，如果 target 是一个对象的话，就递归执行 observer，确保 data 中所有的对象中的所以属性都能够被监听到。当我们 set 的时候，去执行 renderView（执行视图渲染相关逻辑）。</p>\n<h3 id=\"Object-defineProperty-局限性\"><a href=\"#Object-defineProperty-局限性\" class=\"headerlink\" title=\"Object.defineProperty 局限性\"></a>Object.defineProperty 局限性</h3><ol>\n<li> 递归遍历所有的对象的属性，这样如果我们数据层级比较深的话，是一件很耗费性能的事情</li>\n<li> 只能应用在对象上，不能用于数组</li>\n<li> 只能够监听定义时的属性，不能监听新加的属性，这也就是为什么在 vue 中要使用 Vue.set/vue.detele</li>\n</ol>\n<h2 id=\"Proxy-Vue3\"><a href=\"#Proxy-Vue3\" class=\"headerlink\" title=\"Proxy(Vue3)\"></a><a href=\"https://v3.cn.vuejs.org/guide/reactivity.html#proxy-vs-%E5%8E%9F%E5%A7%8B%E6%A0%87%E8%AF%86\">Proxy(Vue3)</a></h2><ul>\n<li><p>  使用了 proxy 去实现对象的监听，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p>\n</li>\n<li><p>  Proxy 对拦截操作多达 13 种，所以在这 13 中操作中，我们可以自定义很多逻辑。Proxy 的出现，其实就是为了扩展对象的能力。</p>\n</li>\n</ul>\n<h3 id=\"proxy-MDN\"><a href=\"#proxy-MDN\" class=\"headerlink\" title=\"proxy MDN\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">proxy MDN</a></h3><p><code>new Proxy(target, handler)</code><br>target: 拦截的目标对象<br>handler：定义拦截的方法</p>\n<ul>\n<li>  handler.apply</li>\n<li>  handler.construct 拦截构造函数调用 new Example（）</li>\n<li>  handler.difineProperty</li>\n<li>  handler.get 拦截对象属性的读取 obj.name</li>\n<li>  handler.set 拦截对象属性的设置 obj.name = ‘前端的自我修养’</li>\n<li>  handler.getOwnPropertyDwscriptor</li>\n<li>  handler.has</li>\n<li>  handler.ownKeys 拦截 Object.keys for in 等</li>\n<li>  handler.setPrototypeOf</li>\n<li>  handler.isExtensible</li>\n<li>  handler.getPropertyOf</li>\n<li>  handler.preventExtensiions</li>\n<li>  handler.enumerate</li>\n</ul>\n<h3 id=\"Refect\"><a href=\"#Refect\" class=\"headerlink\" title=\"Refect\"></a>Refect</h3><ul>\n<li>  将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty），放到 Reflect 对象上。</li>\n<li>  修改某些 Object 方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而 Reflect.defineProperty(obj, name, desc)则会返回 false。</li>\n<li>  让 Object 操作都变成函数行为。比如 name in obj 和 delete obj[name]，而 Reflect.has(obj, name)和 Reflect.deleteProperty(obj, name)让它们变成了函数行为。</li>\n<li>  Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的* Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。</li>\n</ul>\n<h3 id=\"数据劫持相应\"><a href=\"#数据劫持相应\" class=\"headerlink\" title=\"数据劫持相应\"></a>数据劫持相应</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">observe</span>(<span class=\"hljs-params\">target</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> target !== <span class=\"hljs-string\">&#x27;object&#x27;</span> || target == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> target;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> obseved = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(target, &#123;<br>        <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">target, key, receiver</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">observe</span>(<span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">get</span>(target, key, receiver);)<br><br>        &#125;,<br>        <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">target, key, value, receiver</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> (value === target[key]) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">const</span> ownKeys = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">ownKeys</span>(target);<br>              <span class=\"hljs-keyword\">if</span> (ownKeys.<span class=\"hljs-title function_\">includes</span>(key)) &#123;<br>                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;旧属性&#x27;</span>);<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;新添加的属性&#x27;</span>);<br><br>           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">set</span>(target, key, value, receiver);<br><br><br>        &#125;,<br>        <span class=\"hljs-title function_\">deleteProperty</span>(<span class=\"hljs-params\">target, key</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span> result  <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">deleteProperty</span>(target, key);<br><br>        &#125;<br>    &#125;);<br>    <span class=\"hljs-keyword\">return</span> obseved;<br>&#125;<br><span class=\"hljs-keyword\">const</span> data = &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;你不知道的前端&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span>,<br>    <span class=\"hljs-attr\">info</span>: &#123;<br>        <span class=\"hljs-attr\">city</span>:<span class=\"hljs-string\">&#x27;beijing&#x27;</span><br>    &#125;，<br>    <span class=\"hljs-attr\">numbers</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]<br>&#125;;<br><span class=\"hljs-keyword\">const</span> proxyData = <span class=\"hljs-title function_\">observe</span>(data<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"proxy-在实现数据劫持时，具有以下优点\"><a href=\"#proxy-在实现数据劫持时，具有以下优点\" class=\"headerlink\" title=\"proxy 在实现数据劫持时，具有以下优点\"></a>proxy 在实现数据劫持时，具有以下优点</h4><ul>\n<li>  proxy 可以直接监听数组的修改</li>\n<li>  proxy 可以直接监听属性的新增和删除</li>\n<li>  在实现深度监听的时候，只有在 data 对象的属性被访问的时候，才去对这个属性做监听处理，而不是一次性递归所有的。</li>\n</ul>\n<blockquote>\n<p>内容便于自身理解，并非 vue 源码实现<br>部分内容转载于 知乎-<a href=\"https://zhuanlan.zhihu.com/p/111591503\">Vue 如何实现数据劫持</a></p>\n</blockquote>\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"响应式原理（Vue-2x）\"><a href=\"#响应式原理（Vue-2x）\" class=\"headerlink\" title=\"响应式原理（Vue.2x）\"></a><a href=\"https://cn.vuejs.org/v2/guide/reactivity.html\">响应式原理（Vue.2x）</a></h2><p>官网上介绍了， Vue2.x 版本数据绑定原理其主要于使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty()</a>的方法，对数据进行了<code>getter/setter</code>数据劫持。</p>\n<h3 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty()\"></a>Object.defineProperty()</h3><blockquote>\n<p>Object.defineProperty 需要三个参数（object , propName , descriptor）</p>\n</blockquote>\n<ul>\n<li>  object 对象 =&gt; 添加的对象</li>\n<li>  propName 属性名 =&gt; 要加的属性的名字 【类型：String】</li>\n<li>  descriptor 属性描述 =&gt; 加的这个属性值【类型：Object】</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">&#x27;hello world&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">data</span> = &#123;&#125;;<br>Object.defineProperty(<span class=\"hljs-keyword\">data</span>, <span class=\"hljs-string\">&#x27;message&#x27;</span>, &#123;<br>   <span class=\"hljs-keyword\">get</span>() &#123;<br>       <span class=\"hljs-keyword\">return</span> message;<br>   &#125;,<br>   <span class=\"hljs-keyword\">set</span>(newVal) &#123;<br>       message = newVal;<br>   &#125;<br>&#125;);<br><span class=\"hljs-keyword\">data</span>.message <span class=\"hljs-comment\">// &#x27;hello world&#x27;</span><br><span class=\"hljs-keyword\">data</span>.message = <span class=\"hljs-string\">&#x27;test&#x27;</span> <span class=\"hljs-comment\">// &#x27;test&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Vue-中实现数据劫持过程\"><a href=\"#Vue-中实现数据劫持过程\" class=\"headerlink\" title=\"Vue 中实现数据劫持过程\"></a>Vue 中实现数据劫持过程</h2><blockquote>\n<p>经典的例子</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> data = &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;你不知道的VUE&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span>,<br>    <span class=\"hljs-attr\">info</span>: &#123;<br>        <span class=\"hljs-attr\">address</span>: <span class=\"hljs-string\">&#x27;北京&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">numbers</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]<br>&#125;;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">observerObject</span>(<span class=\"hljs-params\">target, name, value</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> value === <span class=\"hljs-string\">&#x27;object&#x27;</span> || <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(target)) &#123;<br>        <span class=\"hljs-title function_\">observer</span>(value);<br>    &#125;<br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(target, name, &#123;<br>        <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> value;<br>        &#125;,<br>        <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">newVal</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> (newVal !== value) &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> value === <span class=\"hljs-string\">&#x27;object&#x27;</span> || <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(value)) &#123;<br>                    <span class=\"hljs-title function_\">observer</span>(value);<br>                &#125;<br>                value = newVal;<br>            &#125;<br>            <span class=\"hljs-title function_\">renderView</span>();<br>        &#125;<br>    &#125;);<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">observer</span>(<span class=\"hljs-params\">target</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> target !== <span class=\"hljs-string\">&#x27;object&#x27;</span> || !target) &#123;<br>        <span class=\"hljs-keyword\">return</span> target;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> target) &#123;<br>        <span class=\"hljs-keyword\">if</span> (target.<span class=\"hljs-title function_\">hasOwnProperty</span>(key)) &#123;<br>            <span class=\"hljs-keyword\">const</span> value = target[key];<br>            <span class=\"hljs-title function_\">observerObject</span>(target, key, value);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-title function_\">observer</span>(data);<br></code></pre></td></tr></table></figure>\n\n<p>遍历这个 data 对象，对每一个属性都使用 observerObject 方法进行数据劫持。</p>\n<p>observerObject 主要做的就是使用 Object.defineProperty 去监听传入的属性，如果 target 是一个对象的话，就递归执行 observer，确保 data 中所有的对象中的所以属性都能够被监听到。当我们 set 的时候，去执行 renderView（执行视图渲染相关逻辑）。</p>\n<h3 id=\"Object-defineProperty-局限性\"><a href=\"#Object-defineProperty-局限性\" class=\"headerlink\" title=\"Object.defineProperty 局限性\"></a>Object.defineProperty 局限性</h3><ol>\n<li> 递归遍历所有的对象的属性，这样如果我们数据层级比较深的话，是一件很耗费性能的事情</li>\n<li> 只能应用在对象上，不能用于数组</li>\n<li> 只能够监听定义时的属性，不能监听新加的属性，这也就是为什么在 vue 中要使用 Vue.set/vue.detele</li>\n</ol>\n<h2 id=\"Proxy-Vue3\"><a href=\"#Proxy-Vue3\" class=\"headerlink\" title=\"Proxy(Vue3)\"></a><a href=\"https://v3.cn.vuejs.org/guide/reactivity.html#proxy-vs-%E5%8E%9F%E5%A7%8B%E6%A0%87%E8%AF%86\">Proxy(Vue3)</a></h2><ul>\n<li><p>  使用了 proxy 去实现对象的监听，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p>\n</li>\n<li><p>  Proxy 对拦截操作多达 13 种，所以在这 13 中操作中，我们可以自定义很多逻辑。Proxy 的出现，其实就是为了扩展对象的能力。</p>\n</li>\n</ul>\n<h3 id=\"proxy-MDN\"><a href=\"#proxy-MDN\" class=\"headerlink\" title=\"proxy MDN\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">proxy MDN</a></h3><p><code>new Proxy(target, handler)</code><br>target: 拦截的目标对象<br>handler：定义拦截的方法</p>\n<ul>\n<li>  handler.apply</li>\n<li>  handler.construct 拦截构造函数调用 new Example（）</li>\n<li>  handler.difineProperty</li>\n<li>  handler.get 拦截对象属性的读取 obj.name</li>\n<li>  handler.set 拦截对象属性的设置 obj.name = ‘前端的自我修养’</li>\n<li>  handler.getOwnPropertyDwscriptor</li>\n<li>  handler.has</li>\n<li>  handler.ownKeys 拦截 Object.keys for in 等</li>\n<li>  handler.setPrototypeOf</li>\n<li>  handler.isExtensible</li>\n<li>  handler.getPropertyOf</li>\n<li>  handler.preventExtensiions</li>\n<li>  handler.enumerate</li>\n</ul>\n<h3 id=\"Refect\"><a href=\"#Refect\" class=\"headerlink\" title=\"Refect\"></a>Refect</h3><ul>\n<li>  将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty），放到 Reflect 对象上。</li>\n<li>  修改某些 Object 方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而 Reflect.defineProperty(obj, name, desc)则会返回 false。</li>\n<li>  让 Object 操作都变成函数行为。比如 name in obj 和 delete obj[name]，而 Reflect.has(obj, name)和 Reflect.deleteProperty(obj, name)让它们变成了函数行为。</li>\n<li>  Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的* Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。</li>\n</ul>\n<h3 id=\"数据劫持相应\"><a href=\"#数据劫持相应\" class=\"headerlink\" title=\"数据劫持相应\"></a>数据劫持相应</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">observe</span>(<span class=\"hljs-params\">target</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> target !== <span class=\"hljs-string\">&#x27;object&#x27;</span> || target == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> target;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> obseved = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(target, &#123;<br>        <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">target, key, receiver</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">observe</span>(<span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">get</span>(target, key, receiver);)<br><br>        &#125;,<br>        <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">target, key, value, receiver</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> (value === target[key]) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">const</span> ownKeys = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">ownKeys</span>(target);<br>              <span class=\"hljs-keyword\">if</span> (ownKeys.<span class=\"hljs-title function_\">includes</span>(key)) &#123;<br>                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;旧属性&#x27;</span>);<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;新添加的属性&#x27;</span>);<br><br>           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">set</span>(target, key, value, receiver);<br><br><br>        &#125;,<br>        <span class=\"hljs-title function_\">deleteProperty</span>(<span class=\"hljs-params\">target, key</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span> result  <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">deleteProperty</span>(target, key);<br><br>        &#125;<br>    &#125;);<br>    <span class=\"hljs-keyword\">return</span> obseved;<br>&#125;<br><span class=\"hljs-keyword\">const</span> data = &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;你不知道的前端&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span>,<br>    <span class=\"hljs-attr\">info</span>: &#123;<br>        <span class=\"hljs-attr\">city</span>:<span class=\"hljs-string\">&#x27;beijing&#x27;</span><br>    &#125;，<br>    <span class=\"hljs-attr\">numbers</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]<br>&#125;;<br><span class=\"hljs-keyword\">const</span> proxyData = <span class=\"hljs-title function_\">observe</span>(data<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"proxy-在实现数据劫持时，具有以下优点\"><a href=\"#proxy-在实现数据劫持时，具有以下优点\" class=\"headerlink\" title=\"proxy 在实现数据劫持时，具有以下优点\"></a>proxy 在实现数据劫持时，具有以下优点</h4><ul>\n<li>  proxy 可以直接监听数组的修改</li>\n<li>  proxy 可以直接监听属性的新增和删除</li>\n<li>  在实现深度监听的时候，只有在 data 对象的属性被访问的时候，才去对这个属性做监听处理，而不是一次性递归所有的。</li>\n</ul>\n<blockquote>\n<p>内容便于自身理解，并非 vue 源码实现<br>部分内容转载于 知乎-<a href=\"https://zhuanlan.zhihu.com/p/111591503\">Vue 如何实现数据劫持</a></p>\n</blockquote>\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"Vue插槽","date":"2021-07-30T01:47:20.000Z","_content":"\n## 插槽\n\n插槽就是子组件中的提供给父组件使用的一个占位符，用`<slot></slot>` 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的`<slot></slot>`标签。插槽使用会给我们带来很多便利。[vue 官网插槽](https://cn.vuejs.org/v2/guide/components-slots.html#%E6%8F%92%E6%A7%BD%E5%86%85%E5%AE%B9)\n\n## 主要\n\n#### 默认插槽 `<slot></slot>`\n\n```\n// 子组件\n<template>\n  <div>\n      <h1>今天天气：</h1>\n      <slot></slot>\n  </div>\n</template>\n<script>\n  export default {\n      name: 'child'\n  }\n</script>\n// 父组件\n<template>\n  <div>\n      <div>使用slot分发内容</div>\n      <div>\n          <child>\n              <div >小雨，最高气温34度，最低气温28度，微风</div>\n          </child>\n      </div>\n  </div>\n</template>\n<script>\n  import child from \"./child.vue\";\n  export default {\n      name: 'father',\n      components:{\n          child\n      }\n  }\n</script>\n\n```\n\n#### 具名插槽 `<slot name=\"xxx\"></slot>` v-slot:name =\"xxx\"\n\n> 子组件定义插槽，名称位置。父组件填充内容, 父组件通过 v-slot:[name] 的方式指定到对应的插槽中.\n> 父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。\n\n```\n---子组件---\n<template>\n    <div>\n        <div class=\"title\">\n            <div>\n                <slot name=\"title\"></slot>\n            </div>\n        </div>\n          <h1>今天天气：</h1>\n      <slot></slot>\n\n    </div>\n</template>\n\n<script>\n    export default {\n        name: \"child\"\n    }\n</script>\n\n<style scoped>\n\n</style>\n\n---父组件---\n<template>\n<div>\n    <div>slot内容分发</div>\n    <child>\n        <template slot=\"title\">\n            <p>天气预报</p>\n        </template>\n        <div >小雨，最高气温34度，最低气温28度，微风</div>\n    </child>\n</div>\n</template>\n\n<script>\n    import child from \"./child.vue\";\n    export default {\n        name: \"father1\",\n        components: {\n            child\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>\n\n```\n\n### 作用域插槽\n\n带数据的插槽，作用域插槽绑定了一套数据，父组件可以拿来用。于是，情况就变成了这样：样式父组件说了算，但内容可以显示子组件插槽绑定的。\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-07/07-30Vue插槽.md","raw":"---\ntitle: Vue插槽\ndate: 2021-07-30 09:47:20\ntags: Vue\ncategory: Vue\n---\n\n## 插槽\n\n插槽就是子组件中的提供给父组件使用的一个占位符，用`<slot></slot>` 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的`<slot></slot>`标签。插槽使用会给我们带来很多便利。[vue 官网插槽](https://cn.vuejs.org/v2/guide/components-slots.html#%E6%8F%92%E6%A7%BD%E5%86%85%E5%AE%B9)\n\n## 主要\n\n#### 默认插槽 `<slot></slot>`\n\n```\n// 子组件\n<template>\n  <div>\n      <h1>今天天气：</h1>\n      <slot></slot>\n  </div>\n</template>\n<script>\n  export default {\n      name: 'child'\n  }\n</script>\n// 父组件\n<template>\n  <div>\n      <div>使用slot分发内容</div>\n      <div>\n          <child>\n              <div >小雨，最高气温34度，最低气温28度，微风</div>\n          </child>\n      </div>\n  </div>\n</template>\n<script>\n  import child from \"./child.vue\";\n  export default {\n      name: 'father',\n      components:{\n          child\n      }\n  }\n</script>\n\n```\n\n#### 具名插槽 `<slot name=\"xxx\"></slot>` v-slot:name =\"xxx\"\n\n> 子组件定义插槽，名称位置。父组件填充内容, 父组件通过 v-slot:[name] 的方式指定到对应的插槽中.\n> 父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。\n\n```\n---子组件---\n<template>\n    <div>\n        <div class=\"title\">\n            <div>\n                <slot name=\"title\"></slot>\n            </div>\n        </div>\n          <h1>今天天气：</h1>\n      <slot></slot>\n\n    </div>\n</template>\n\n<script>\n    export default {\n        name: \"child\"\n    }\n</script>\n\n<style scoped>\n\n</style>\n\n---父组件---\n<template>\n<div>\n    <div>slot内容分发</div>\n    <child>\n        <template slot=\"title\">\n            <p>天气预报</p>\n        </template>\n        <div >小雨，最高气温34度，最低气温28度，微风</div>\n    </child>\n</div>\n</template>\n\n<script>\n    import child from \"./child.vue\";\n    export default {\n        name: \"father1\",\n        components: {\n            child\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>\n\n```\n\n### 作用域插槽\n\n带数据的插槽，作用域插槽绑定了一套数据，父组件可以拿来用。于是，情况就变成了这样：样式父组件说了算，但内容可以显示子组件插槽绑定的。\n\n![BG图片](/img/1.jpg)\n","slug":"2021-07/07-30Vue插槽","published":1,"updated":"2021-08-14T08:06:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c21160010f60c1suzgjcd","content":"<h2 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h2><p>插槽就是子组件中的提供给父组件使用的一个占位符，用<code>&lt;slot&gt;&lt;/slot&gt;</code> 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code>标签。插槽使用会给我们带来很多便利。<a href=\"https://cn.vuejs.org/v2/guide/components-slots.html#%E6%8F%92%E6%A7%BD%E5%86%85%E5%AE%B9\">vue 官网插槽</a></p>\n<h2 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h2><h4 id=\"默认插槽-lt-slot-gt-lt-slot-gt\"><a href=\"#默认插槽-lt-slot-gt-lt-slot-gt\" class=\"headerlink\" title=\"默认插槽 &lt;slot&gt;&lt;/slot&gt;\"></a>默认插槽 <code>&lt;slot&gt;&lt;/slot&gt;</code></h4><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\">// 子组件<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\">  </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>今天天气：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">      </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> </span></span><span class=\"language-xquery\">&#123;</span><br><span class=\"language-xquery\">     <span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">&#x27;child&#x27;</span></span><br><span class=\"language-xquery\">  &#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br>// 父组件<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\">  </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>使用slot分发内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">      </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">          </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child</span>&gt;</span></span><br><span class=\"language-xml\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> &gt;</span>小雨，最高气温34度，最低气温28度，微风<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-keyword\">import</span> child <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./child.vue&quot;</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> </span></span><span class=\"language-xquery\">&#123;</span><br><span class=\"language-xquery\">     <span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">&#x27;father&#x27;</span>,</span><br><span class=\"language-xquery\">      components:&#123;</span><br><span class=\"language-xquery\">          child</span><br><span class=\"language-xquery\">      &#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">  &#125;</span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"具名插槽-lt-slot-name-quot-xxx-quot-gt-lt-slot-gt-v-slot-name-”xxx”\"><a href=\"#具名插槽-lt-slot-name-quot-xxx-quot-gt-lt-slot-gt-v-slot-name-”xxx”\" class=\"headerlink\" title=\"具名插槽 &lt;slot name=&quot;xxx&quot;&gt;&lt;/slot&gt; v-slot:name =”xxx”\"></a>具名插槽 <code>&lt;slot name=&quot;xxx&quot;&gt;&lt;/slot&gt;</code> v-slot:name =”xxx”</h4><blockquote>\n<p>子组件定义插槽，名称位置。父组件填充内容, 父组件通过 v-slot:[name] 的方式指定到对应的插槽中.<br>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">---子组件---<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>今天天气：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;child&quot;</span></span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br>---父组件---<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>slot内容分发<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>天气预报<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> &gt;</span>小雨，最高气温34度，最低气温28度，微风<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">import</span> child <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./child.vue&quot;</span>;</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;father1&quot;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">components</span>: &#123;</span><br><span class=\"language-javascript\">            child</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h3><p>带数据的插槽，作用域插槽绑定了一套数据，父组件可以拿来用。于是，情况就变成了这样：样式父组件说了算，但内容可以显示子组件插槽绑定的。</p>\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h2><p>插槽就是子组件中的提供给父组件使用的一个占位符，用<code>&lt;slot&gt;&lt;/slot&gt;</code> 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code>标签。插槽使用会给我们带来很多便利。<a href=\"https://cn.vuejs.org/v2/guide/components-slots.html#%E6%8F%92%E6%A7%BD%E5%86%85%E5%AE%B9\">vue 官网插槽</a></p>\n<h2 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h2><h4 id=\"默认插槽-lt-slot-gt-lt-slot-gt\"><a href=\"#默认插槽-lt-slot-gt-lt-slot-gt\" class=\"headerlink\" title=\"默认插槽 &lt;slot&gt;&lt;/slot&gt;\"></a>默认插槽 <code>&lt;slot&gt;&lt;/slot&gt;</code></h4><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\">// 子组件<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\">  </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>今天天气：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">      </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> </span></span><span class=\"language-xquery\">&#123;</span><br><span class=\"language-xquery\">     <span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">&#x27;child&#x27;</span></span><br><span class=\"language-xquery\">  &#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br>// 父组件<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"language-xml\">  </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">      </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>使用slot分发内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">      </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">          </span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child</span>&gt;</span></span><br><span class=\"language-xml\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> &gt;</span>小雨，最高气温34度，最低气温28度，微风<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-keyword\">import</span> child <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./child.vue&quot;</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> </span></span><span class=\"language-xquery\">&#123;</span><br><span class=\"language-xquery\">     <span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">&#x27;father&#x27;</span>,</span><br><span class=\"language-xquery\">      components:&#123;</span><br><span class=\"language-xquery\">          child</span><br><span class=\"language-xquery\">      &#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">  &#125;</span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"具名插槽-lt-slot-name-quot-xxx-quot-gt-lt-slot-gt-v-slot-name-”xxx”\"><a href=\"#具名插槽-lt-slot-name-quot-xxx-quot-gt-lt-slot-gt-v-slot-name-”xxx”\" class=\"headerlink\" title=\"具名插槽 &lt;slot name=&quot;xxx&quot;&gt;&lt;/slot&gt; v-slot:name =”xxx”\"></a>具名插槽 <code>&lt;slot name=&quot;xxx&quot;&gt;&lt;/slot&gt;</code> v-slot:name =”xxx”</h4><blockquote>\n<p>子组件定义插槽，名称位置。父组件填充内容, 父组件通过 v-slot:[name] 的方式指定到对应的插槽中.<br>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">---子组件---<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>今天天气：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;child&quot;</span></span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br>---父组件---<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>slot内容分发<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>天气预报<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> &gt;</span>小雨，最高气温34度，最低气温28度，微风<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">import</span> child <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./child.vue&quot;</span>;</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;father1&quot;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">components</span>: &#123;</span><br><span class=\"language-javascript\">            child</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h3><p>带数据的插槽，作用域插槽绑定了一套数据，父组件可以拿来用。于是，情况就变成了这样：样式父组件说了算，但内容可以显示子组件插槽绑定的。</p>\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"动态组件/异步组件","date":"2021-07-31T02:27:08.000Z","_content":"\n### 动态组件\n\n一个多标签的界面中使用 is 来切换不同的组件,并可参考[keep-alive 组件](https://cn.vuejs.org/v2/api/#keep-alive)将动态组件状态储存起来\n\n```\ncomponent :is=\"nextName\"></component>\n\nimport next from './next'\nexport default {\n  components:{\n    next,\n  },\n  data() {\n    return {\n      nextName:\"next\"\n    };\n  },\n\n};\n```\n\n#### 切换不同的页面\n\n```\n<div id=\"example\">\n  <button @click=\"change\">切换页面</button>\n  <component :is=\"currentView\"></component>\n</div>\n\nnew Vue({\n  el: '#example',\n  data:{\n    index:0,\n    arr:[\n      {template:`<div>我是页面A</div>`},\n      {template:`<div>我是页面B</div>`},\n      {template:`<div>我是页面C</div>`}\n    ],\n  },\n  computed:{\n    currentView(){\n        return this.arr[this.index];\n    }\n  },\n  methods:{\n    change(){\n      this.index = (++this.index)%3;\n    }\n  }\n})\n```\n\n### 异步组件\n\n异步组件就是定义的时候不做渲染运算，只在组件需要渲染（组件第一次显示）的时候进行加载渲染并缓存，缓存是以备下次访问。\n\n#### Vue 实现按需加载\n\nimport() 函数 按需加载，异步加载大组件\n\n```\n\n<FromDemo v-if=\"show\"/>\n<button @click=\"show=true\"></button>\n\n\ncomponents:{\n  FromDemo:()=>import('../FromDemo')\n}\n\n\n```\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-07/07-31动态异步组件.md","raw":"---\ntitle: 动态组件/异步组件\ndate: 2021-07-31 10:27:08\ntags: Vue\ncategory: Vue\n---\n\n### 动态组件\n\n一个多标签的界面中使用 is 来切换不同的组件,并可参考[keep-alive 组件](https://cn.vuejs.org/v2/api/#keep-alive)将动态组件状态储存起来\n\n```\ncomponent :is=\"nextName\"></component>\n\nimport next from './next'\nexport default {\n  components:{\n    next,\n  },\n  data() {\n    return {\n      nextName:\"next\"\n    };\n  },\n\n};\n```\n\n#### 切换不同的页面\n\n```\n<div id=\"example\">\n  <button @click=\"change\">切换页面</button>\n  <component :is=\"currentView\"></component>\n</div>\n\nnew Vue({\n  el: '#example',\n  data:{\n    index:0,\n    arr:[\n      {template:`<div>我是页面A</div>`},\n      {template:`<div>我是页面B</div>`},\n      {template:`<div>我是页面C</div>`}\n    ],\n  },\n  computed:{\n    currentView(){\n        return this.arr[this.index];\n    }\n  },\n  methods:{\n    change(){\n      this.index = (++this.index)%3;\n    }\n  }\n})\n```\n\n### 异步组件\n\n异步组件就是定义的时候不做渲染运算，只在组件需要渲染（组件第一次显示）的时候进行加载渲染并缓存，缓存是以备下次访问。\n\n#### Vue 实现按需加载\n\nimport() 函数 按需加载，异步加载大组件\n\n```\n\n<FromDemo v-if=\"show\"/>\n<button @click=\"show=true\"></button>\n\n\ncomponents:{\n  FromDemo:()=>import('../FromDemo')\n}\n\n\n```\n\n![BG图片](/img/1.jpg)\n","slug":"2021-07/07-31动态异步组件","published":1,"updated":"2021-07-31T09:13:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c21170014f60c8dkc4gjo","content":"<h3 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h3><p>一个多标签的界面中使用 is 来切换不同的组件,并可参考<a href=\"https://cn.vuejs.org/v2/api/#keep-alive\">keep-alive 组件</a>将动态组件状态储存起来</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">component <span class=\"hljs-symbol\">:is=<span class=\"hljs-string\">&quot;nextName&quot;</span>&gt;&lt;/component&gt;</span><br><br>import <span class=\"hljs-keyword\">next</span> from <span class=\"hljs-string\">&#x27;./next&#x27;</span><br>export default &#123;<br>  <span class=\"hljs-symbol\">components:</span>&#123;<br>    <span class=\"hljs-keyword\">next</span>,<br>  &#125;,<br>  data() &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-symbol\">nextName:</span><span class=\"hljs-string\">&quot;next&quot;</span><br>    &#125;;<br>  &#125;,<br><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"切换不同的页面\"><a href=\"#切换不同的页面\" class=\"headerlink\" title=\"切换不同的页面\"></a>切换不同的页面</h4><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">&lt;<span class=\"hljs-keyword\">div</span> id=<span class=\"hljs-string\">&quot;example&quot;</span>&gt;<br>  &lt;button @click=<span class=\"hljs-string\">&quot;change&quot;</span>&gt;切换页面&lt;/button&gt;<br>  &lt;component :<span class=\"hljs-keyword\">is</span>=<span class=\"hljs-string\">&quot;currentView&quot;</span>&gt;&lt;/component&gt;<br>&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br><br><span class=\"hljs-keyword\">new</span> Vue(&#123;<br>  el: <span class=\"hljs-string\">&#x27;#example&#x27;</span>,<br>  data:&#123;<br>    <span class=\"hljs-keyword\">index</span>:<span class=\"hljs-number\">0</span>,<br>    arr:[<br>      &#123;template:`&lt;<span class=\"hljs-keyword\">div</span>&gt;我是页面A&lt;/<span class=\"hljs-keyword\">div</span>&gt;`&#125;,<br>      &#123;template:`&lt;<span class=\"hljs-keyword\">div</span>&gt;我是页面B&lt;/<span class=\"hljs-keyword\">div</span>&gt;`&#125;,<br>      &#123;template:`&lt;<span class=\"hljs-keyword\">div</span>&gt;我是页面C&lt;/<span class=\"hljs-keyword\">div</span>&gt;`&#125;<br>    ],<br>  &#125;,<br>  computed:&#123;<br>    currentView()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.arr[<span class=\"hljs-keyword\">this</span>.<span class=\"hljs-keyword\">index</span>];<br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    change()&#123;<br>      <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-keyword\">index</span> = (++<span class=\"hljs-keyword\">this</span>.<span class=\"hljs-keyword\">index</span>)%<span class=\"hljs-number\">3</span>;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"异步组件\"><a href=\"#异步组件\" class=\"headerlink\" title=\"异步组件\"></a>异步组件</h3><p>异步组件就是定义的时候不做渲染运算，只在组件需要渲染（组件第一次显示）的时候进行加载渲染并缓存，缓存是以备下次访问。</p>\n<h4 id=\"Vue-实现按需加载\"><a href=\"#Vue-实现按需加载\" class=\"headerlink\" title=\"Vue 实现按需加载\"></a>Vue 实现按需加载</h4><p>import() 函数 按需加载，异步加载大组件</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\"><br>&lt;FromDemo v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>/&gt;<br>&lt;button @click=<span class=\"hljs-string\">&quot;show=true&quot;</span>&gt;&lt;/button&gt;<br><br><br>components:&#123;<br>  FromDemo:<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;../FromDemo&#x27;</span>)<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h3><p>一个多标签的界面中使用 is 来切换不同的组件,并可参考<a href=\"https://cn.vuejs.org/v2/api/#keep-alive\">keep-alive 组件</a>将动态组件状态储存起来</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">component <span class=\"hljs-symbol\">:is=<span class=\"hljs-string\">&quot;nextName&quot;</span>&gt;&lt;/component&gt;</span><br><br>import <span class=\"hljs-keyword\">next</span> from <span class=\"hljs-string\">&#x27;./next&#x27;</span><br>export default &#123;<br>  <span class=\"hljs-symbol\">components:</span>&#123;<br>    <span class=\"hljs-keyword\">next</span>,<br>  &#125;,<br>  data() &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-symbol\">nextName:</span><span class=\"hljs-string\">&quot;next&quot;</span><br>    &#125;;<br>  &#125;,<br><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"切换不同的页面\"><a href=\"#切换不同的页面\" class=\"headerlink\" title=\"切换不同的页面\"></a>切换不同的页面</h4><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">&lt;<span class=\"hljs-keyword\">div</span> id=<span class=\"hljs-string\">&quot;example&quot;</span>&gt;<br>  &lt;button @click=<span class=\"hljs-string\">&quot;change&quot;</span>&gt;切换页面&lt;/button&gt;<br>  &lt;component :<span class=\"hljs-keyword\">is</span>=<span class=\"hljs-string\">&quot;currentView&quot;</span>&gt;&lt;/component&gt;<br>&lt;/<span class=\"hljs-keyword\">div</span>&gt;<br><br><span class=\"hljs-keyword\">new</span> Vue(&#123;<br>  el: <span class=\"hljs-string\">&#x27;#example&#x27;</span>,<br>  data:&#123;<br>    <span class=\"hljs-keyword\">index</span>:<span class=\"hljs-number\">0</span>,<br>    arr:[<br>      &#123;template:`&lt;<span class=\"hljs-keyword\">div</span>&gt;我是页面A&lt;/<span class=\"hljs-keyword\">div</span>&gt;`&#125;,<br>      &#123;template:`&lt;<span class=\"hljs-keyword\">div</span>&gt;我是页面B&lt;/<span class=\"hljs-keyword\">div</span>&gt;`&#125;,<br>      &#123;template:`&lt;<span class=\"hljs-keyword\">div</span>&gt;我是页面C&lt;/<span class=\"hljs-keyword\">div</span>&gt;`&#125;<br>    ],<br>  &#125;,<br>  computed:&#123;<br>    currentView()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.arr[<span class=\"hljs-keyword\">this</span>.<span class=\"hljs-keyword\">index</span>];<br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    change()&#123;<br>      <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-keyword\">index</span> = (++<span class=\"hljs-keyword\">this</span>.<span class=\"hljs-keyword\">index</span>)%<span class=\"hljs-number\">3</span>;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"异步组件\"><a href=\"#异步组件\" class=\"headerlink\" title=\"异步组件\"></a>异步组件</h3><p>异步组件就是定义的时候不做渲染运算，只在组件需要渲染（组件第一次显示）的时候进行加载渲染并缓存，缓存是以备下次访问。</p>\n<h4 id=\"Vue-实现按需加载\"><a href=\"#Vue-实现按需加载\" class=\"headerlink\" title=\"Vue 实现按需加载\"></a>Vue 实现按需加载</h4><p>import() 函数 按需加载，异步加载大组件</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\"><br>&lt;FromDemo v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>/&gt;<br>&lt;button @click=<span class=\"hljs-string\">&quot;show=true&quot;</span>&gt;&lt;/button&gt;<br><br><br>components:&#123;<br>  FromDemo:<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;../FromDemo&#x27;</span>)<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"Vue.set()","date":"2021-08-01T13:27:28.000Z","_content":"\n### 应用场景\n\n由于 JavaScript 的限制，Vue 不能检测数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。\n首先 Vue 中已经封装了一些数组的封装方法 例如：push() pop() shift() unshift() splice() sort() reverse() 这些事 都可以处理一些响应式数据。\n但一些无法检测到 property()\n[Vue.set()](https://cn.vuejs.org/v2/api/#Vue-set) Api 可以解决这一现象\n\n#### 使用方式\n\n`Vue.set( target, key, value )`\n\n-   target Arr||Obj (修改的对象)\n-   key/index string || number（修改的具体数据 key 值。）\n-   value : any（要修改的结果）\n\n### 代码\n\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<div id=\"app2\">\n    <p v-for=\"(item,index) in items\" :key=\"index\">\n        {{item.message}}\n    </p>\n    <button class=\"btn\" @click=\"btn2Click()\">动态赋值</button><br/>\n    <button class=\"btn\" @click=\"btn3Click()\">为data新增属性</button>\n</div>\n<script src=\"../dist/vue.min.js\"></script>\n<script>\nvar vm = new Vue({\n    el:\"#app\",\n    data:{\n        items:[\n            {message:\"Test one\",id:\"1\"},\n            {message:\"Test two\",id:\"2\"},\n            {message:\"Test three\",id:\"3\"}\n        ]\n    },\n    methods:{\n        btn2Click(){\n            Vue.set(this.items,0,{message:\"Change Test\",id:this.items.length + 1})\n        },\n        btn3Click(){\n            var itemLen=this.items.length;\n            Vue.set(this.items,itemLen,{message:\"Test add attr\",id:itemLen});\n        }\n    }\n});\n</script>\n</body>\n</html>\n```\n\n有时想向已有对象上添加一些属性，例如使用 Object.assign() 或 \\_.extend() 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性.\n\n```\n// 代替 Object.assign(this.obj, { a: 1, b: 2 })\nthis.obj= Object.assign({}, this.obj, { a: 1, b: 2 })\n```\n\n### set 源码\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-08/08-01Vue深入响应式.md","raw":"---\ntitle: Vue.set()\ndate: 2021-08-01 21:27:28\ntags: Vue\ncategory: Vue\n---\n\n### 应用场景\n\n由于 JavaScript 的限制，Vue 不能检测数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。\n首先 Vue 中已经封装了一些数组的封装方法 例如：push() pop() shift() unshift() splice() sort() reverse() 这些事 都可以处理一些响应式数据。\n但一些无法检测到 property()\n[Vue.set()](https://cn.vuejs.org/v2/api/#Vue-set) Api 可以解决这一现象\n\n#### 使用方式\n\n`Vue.set( target, key, value )`\n\n-   target Arr||Obj (修改的对象)\n-   key/index string || number（修改的具体数据 key 值。）\n-   value : any（要修改的结果）\n\n### 代码\n\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<div id=\"app2\">\n    <p v-for=\"(item,index) in items\" :key=\"index\">\n        {{item.message}}\n    </p>\n    <button class=\"btn\" @click=\"btn2Click()\">动态赋值</button><br/>\n    <button class=\"btn\" @click=\"btn3Click()\">为data新增属性</button>\n</div>\n<script src=\"../dist/vue.min.js\"></script>\n<script>\nvar vm = new Vue({\n    el:\"#app\",\n    data:{\n        items:[\n            {message:\"Test one\",id:\"1\"},\n            {message:\"Test two\",id:\"2\"},\n            {message:\"Test three\",id:\"3\"}\n        ]\n    },\n    methods:{\n        btn2Click(){\n            Vue.set(this.items,0,{message:\"Change Test\",id:this.items.length + 1})\n        },\n        btn3Click(){\n            var itemLen=this.items.length;\n            Vue.set(this.items,itemLen,{message:\"Test add attr\",id:itemLen});\n        }\n    }\n});\n</script>\n</body>\n</html>\n```\n\n有时想向已有对象上添加一些属性，例如使用 Object.assign() 或 \\_.extend() 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性.\n\n```\n// 代替 Object.assign(this.obj, { a: 1, b: 2 })\nthis.obj= Object.assign({}, this.obj, { a: 1, b: 2 })\n```\n\n### set 源码\n\n![BG图片](/img/1.jpg)\n","slug":"2021-08/08-01Vue深入响应式","published":1,"updated":"2021-08-05T14:51:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c21180016f60cdry8cnpf","content":"<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>由于 JavaScript 的限制，Vue 不能检测数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。<br>首先 Vue 中已经封装了一些数组的封装方法 例如：push() pop() shift() unshift() splice() sort() reverse() 这些事 都可以处理一些响应式数据。<br>但一些无法检测到 property()<br><a href=\"https://cn.vuejs.org/v2/api/#Vue-set\">Vue.set()</a> Api 可以解决这一现象</p>\n<h4 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h4><p><code>Vue.set( target, key, value )</code></p>\n<ul>\n<li>  target Arr||Obj (修改的对象)</li>\n<li>  key/index string || number（修改的具体数据 key 值。）</li>\n<li>  value : any（要修改的结果）</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app2&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;(item,index) in items&quot;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"language-xml\">        </span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">item.message</span>&#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;btn2Click()&quot;</span>&gt;</span>动态赋值<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;btn3Click()&quot;</span>&gt;</span>为data新增属性<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../dist/vue.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"hljs-attr\">data</span>:&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-attr\">items</span>:[</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Test one&quot;</span>,<span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&quot;1&quot;</span>&#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Test two&quot;</span>,<span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&quot;2&quot;</span>&#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Test three&quot;</span>,<span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&quot;3&quot;</span>&#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        ]</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"hljs-attr\">methods</span>:&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title function_\">btn2Click</span>(<span class=\"hljs-params\"></span>)&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">items</span>,<span class=\"hljs-number\">0</span>,&#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Change Test&quot;</span>,<span class=\"hljs-attr\">id</span>:<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">items</span>.<span class=\"hljs-property\">length</span> + <span class=\"hljs-number\">1</span>&#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title function_\">btn3Click</span>(<span class=\"hljs-params\"></span>)&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">var</span> itemLen=<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">items</span>.<span class=\"hljs-property\">length</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">items</span>,itemLen,&#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Test add attr&quot;</span>,<span class=\"hljs-attr\">id</span>:itemLen&#125;);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">&#125;);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>有时想向已有对象上添加一些属性，例如使用 Object.assign() 或 _.extend() 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-comment\">// 代替 Object.assign(this.obj, &#123; a: 1, b: 2 &#125;)</span><br><span class=\"hljs-keyword\">this</span>.obj= Object.assign(&#123;&#125;, <span class=\"hljs-keyword\">this</span>.obj, &#123; a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span> &#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"set-源码\"><a href=\"#set-源码\" class=\"headerlink\" title=\"set 源码\"></a>set 源码</h3><p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>由于 JavaScript 的限制，Vue 不能检测数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。<br>首先 Vue 中已经封装了一些数组的封装方法 例如：push() pop() shift() unshift() splice() sort() reverse() 这些事 都可以处理一些响应式数据。<br>但一些无法检测到 property()<br><a href=\"https://cn.vuejs.org/v2/api/#Vue-set\">Vue.set()</a> Api 可以解决这一现象</p>\n<h4 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h4><p><code>Vue.set( target, key, value )</code></p>\n<ul>\n<li>  target Arr||Obj (修改的对象)</li>\n<li>  key/index string || number（修改的具体数据 key 值。）</li>\n<li>  value : any（要修改的结果）</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app2&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;(item,index) in items&quot;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"language-xml\">        </span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">item.message</span>&#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;btn2Click()&quot;</span>&gt;</span>动态赋值<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;btn3Click()&quot;</span>&gt;</span>为data新增属性<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;../dist/vue.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"hljs-attr\">data</span>:&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-attr\">items</span>:[</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Test one&quot;</span>,<span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&quot;1&quot;</span>&#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Test two&quot;</span>,<span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&quot;2&quot;</span>&#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Test three&quot;</span>,<span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&quot;3&quot;</span>&#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        ]</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"hljs-attr\">methods</span>:&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title function_\">btn2Click</span>(<span class=\"hljs-params\"></span>)&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">items</span>,<span class=\"hljs-number\">0</span>,&#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Change Test&quot;</span>,<span class=\"hljs-attr\">id</span>:<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">items</span>.<span class=\"hljs-property\">length</span> + <span class=\"hljs-number\">1</span>&#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title function_\">btn3Click</span>(<span class=\"hljs-params\"></span>)&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">var</span> itemLen=<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">items</span>.<span class=\"hljs-property\">length</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">items</span>,itemLen,&#123;<span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Test add attr&quot;</span>,<span class=\"hljs-attr\">id</span>:itemLen&#125;);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">&#125;);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>有时想向已有对象上添加一些属性，例如使用 Object.assign() 或 _.extend() 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-comment\">// 代替 Object.assign(this.obj, &#123; a: 1, b: 2 &#125;)</span><br><span class=\"hljs-keyword\">this</span>.obj= Object.assign(&#123;&#125;, <span class=\"hljs-keyword\">this</span>.obj, &#123; a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span> &#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"set-源码\"><a href=\"#set-源码\" class=\"headerlink\" title=\"set 源码\"></a>set 源码</h3><p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"v-if 和 v-show","date":"2021-08-05T14:30:28.000Z","_content":"\n### 相同点/不同点\n\n-   相同点：相同使用方式，值为 true 时，满足条件元素显示，反则不显示。\n-   不同点：1. v-if 根据值在 DOM 中生成或移除一个元素。v-show 根据值来显示或者隐藏 HTML 元素。当 v-show 赋值为 false 时，元素被隐藏，此时查看代码时，该元素上会多一个内联样式 style=“display:none” 2.渲染元素的开销不同，v-if 有更高的切换消耗，而 v-show 初始渲染消耗较高。频繁切换，则使用 v-show 更好。\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-08/08-05ifshow.md","raw":"---\ntitle: v-if 和 v-show\ndate: 2021-08-05 22:30:28\ntags: Vue\ncategory: Vue\n---\n\n### 相同点/不同点\n\n-   相同点：相同使用方式，值为 true 时，满足条件元素显示，反则不显示。\n-   不同点：1. v-if 根据值在 DOM 中生成或移除一个元素。v-show 根据值来显示或者隐藏 HTML 元素。当 v-show 赋值为 false 时，元素被隐藏，此时查看代码时，该元素上会多一个内联样式 style=“display:none” 2.渲染元素的开销不同，v-if 有更高的切换消耗，而 v-show 初始渲染消耗较高。频繁切换，则使用 v-show 更好。\n\n![BG图片](/img/1.jpg)\n","slug":"2021-08/08-05ifshow","published":1,"updated":"2021-08-05T14:51:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c21190019f60cbhftdjt1","content":"<h3 id=\"相同点-不同点\"><a href=\"#相同点-不同点\" class=\"headerlink\" title=\"相同点/不同点\"></a>相同点/不同点</h3><ul>\n<li>  相同点：相同使用方式，值为 true 时，满足条件元素显示，反则不显示。</li>\n<li>  不同点：1. v-if 根据值在 DOM 中生成或移除一个元素。v-show 根据值来显示或者隐藏 HTML 元素。当 v-show 赋值为 false 时，元素被隐藏，此时查看代码时，该元素上会多一个内联样式 style=“display:none” 2.渲染元素的开销不同，v-if 有更高的切换消耗，而 v-show 初始渲染消耗较高。频繁切换，则使用 v-show 更好。</li>\n</ul>\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相同点-不同点\"><a href=\"#相同点-不同点\" class=\"headerlink\" title=\"相同点/不同点\"></a>相同点/不同点</h3><ul>\n<li>  相同点：相同使用方式，值为 true 时，满足条件元素显示，反则不显示。</li>\n<li>  不同点：1. v-if 根据值在 DOM 中生成或移除一个元素。v-show 根据值来显示或者隐藏 HTML 元素。当 v-show 赋值为 false 时，元素被隐藏，此时查看代码时，该元素上会多一个内联样式 style=“display:none” 2.渲染元素的开销不同，v-if 有更高的切换消耗，而 v-show 初始渲染消耗较高。频繁切换，则使用 v-show 更好。</li>\n</ul>\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"作用域","date":"2021-08-09T13:20:28.000Z","_content":"\n## 作用域\n\n> 作用域一般指某个函数，变量声明时能够访问的位置权限来决定的。作用域范围而就由此决定。\n> 作用域的目的，提高了程序的可靠性，减少了命名的冲突\n\n### 全局作用域/局部作用域\n\n> 全局作用域： 直接写在 js 标签的声明 就是在全局作用域里面，js 全局作用域中有一个全局对象 windeow,在这里创建声明的都会作为 window 对象的属性进行保存\n> 局部作用域： 在词法作用域内部的就是局部作用域，只在当前的载体内起作用，每次调用创建局部作用域，执行完销毁，相互独立\n\n以下这种，在局部声明的方式，也是全局变量。这种隐式声明不推荐。 （严格模式下会报错）\n\n```\n<script>\n    function nu(){\n        var a = 10;\n        v = 20;\n        console.log(a);\n    }\n    nu();\n    console.log(b);\n</script>\n```\n\n## 变量提升\n\n> 使用 var 与 function 声明的变量、函数 会在所有的代码前进行一次预编译效果，也就是变量提升\n\n```\nconsole.log(a) //undefined   预编译 ==>  var a\nvar a = 10                               console.log(a) //undefined\n                                         a= 10\n\n\tcoun()                               function coun (){\nfunction coun (){            预编译 ==>       console.log('hi')\n\tconsole.log('hi')                    }\n}\t\t\t\t\t\t\t\t\t      coun()\n\n```\n\n但注意函数式方式不会具有变量提升\n\n```\ncoun()   //这种方式报错\nvar coun = function(){\n\tconsole.log('hi')\n}\n\n```\n\n### 局部作用域\n\n#### 函数作用域\n\n```\nfunction foo(a) {\n var b = 2;\n // 一些代码\n function bar() {\n // ...\n }\n22\n // 更多的代码\n var c = 3;\n}\n\n```\n\n每个函数自身都会具有创建一个作用域，foo()可以在全局中获取到，而 foo 中的 a,b,c 只能在 foo 中获取\n\n#### 块作用域\n\n首先 javaScript 本身并没有定义块级作用域说法，但是却时存在这一现象。例如：for 循环中的 变量定义声明、with、 try/catch、中的 catch 失败时的调用、 let const\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-08/08-09作用域.md","raw":"---\ntitle: 作用域\ndate: 2021-08-09 21:20:28\ntags: 原生\ncategory: JavaScript\n---\n\n## 作用域\n\n> 作用域一般指某个函数，变量声明时能够访问的位置权限来决定的。作用域范围而就由此决定。\n> 作用域的目的，提高了程序的可靠性，减少了命名的冲突\n\n### 全局作用域/局部作用域\n\n> 全局作用域： 直接写在 js 标签的声明 就是在全局作用域里面，js 全局作用域中有一个全局对象 windeow,在这里创建声明的都会作为 window 对象的属性进行保存\n> 局部作用域： 在词法作用域内部的就是局部作用域，只在当前的载体内起作用，每次调用创建局部作用域，执行完销毁，相互独立\n\n以下这种，在局部声明的方式，也是全局变量。这种隐式声明不推荐。 （严格模式下会报错）\n\n```\n<script>\n    function nu(){\n        var a = 10;\n        v = 20;\n        console.log(a);\n    }\n    nu();\n    console.log(b);\n</script>\n```\n\n## 变量提升\n\n> 使用 var 与 function 声明的变量、函数 会在所有的代码前进行一次预编译效果，也就是变量提升\n\n```\nconsole.log(a) //undefined   预编译 ==>  var a\nvar a = 10                               console.log(a) //undefined\n                                         a= 10\n\n\tcoun()                               function coun (){\nfunction coun (){            预编译 ==>       console.log('hi')\n\tconsole.log('hi')                    }\n}\t\t\t\t\t\t\t\t\t      coun()\n\n```\n\n但注意函数式方式不会具有变量提升\n\n```\ncoun()   //这种方式报错\nvar coun = function(){\n\tconsole.log('hi')\n}\n\n```\n\n### 局部作用域\n\n#### 函数作用域\n\n```\nfunction foo(a) {\n var b = 2;\n // 一些代码\n function bar() {\n // ...\n }\n22\n // 更多的代码\n var c = 3;\n}\n\n```\n\n每个函数自身都会具有创建一个作用域，foo()可以在全局中获取到，而 foo 中的 a,b,c 只能在 foo 中获取\n\n#### 块作用域\n\n首先 javaScript 本身并没有定义块级作用域说法，但是却时存在这一现象。例如：for 循环中的 变量定义声明、with、 try/catch、中的 catch 失败时的调用、 let const\n\n![BG图片](/img/1.jpg)\n","slug":"2021-08/08-09作用域","published":1,"updated":"2021-08-09T14:31:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211b001df60ce98qeekv","content":"<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><blockquote>\n<p>作用域一般指某个函数，变量声明时能够访问的位置权限来决定的。作用域范围而就由此决定。<br>作用域的目的，提高了程序的可靠性，减少了命名的冲突</p>\n</blockquote>\n<h3 id=\"全局作用域-局部作用域\"><a href=\"#全局作用域-局部作用域\" class=\"headerlink\" title=\"全局作用域/局部作用域\"></a>全局作用域/局部作用域</h3><blockquote>\n<p>全局作用域： 直接写在 js 标签的声明 就是在全局作用域里面，js 全局作用域中有一个全局对象 windeow,在这里创建声明的都会作为 window 对象的属性进行保存<br>局部作用域： 在词法作用域内部的就是局部作用域，只在当前的载体内起作用，每次调用创建局部作用域，执行完销毁，相互独立</p>\n</blockquote>\n<p>以下这种，在局部声明的方式，也是全局变量。这种隐式声明不推荐。 （严格模式下会报错）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">nu</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;</span><br><span class=\"language-javascript\">        v = <span class=\"hljs-number\">20</span>;</span><br><span class=\"language-javascript\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a);</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">    <span class=\"hljs-title function_\">nu</span>();</span><br><span class=\"language-javascript\">    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><blockquote>\n<p>使用 var 与 function 声明的变量、函数 会在所有的代码前进行一次预编译效果，也就是变量提升</p>\n</blockquote>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(a) <span class=\"hljs-comment\">//undefined   预编译 ==&gt;  var a</span><br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>                               <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(a) <span class=\"hljs-comment\">//undefined</span><br>                                         a= <span class=\"hljs-number\">10</span><br><br>\tcoun()                               <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">coun</span> (<span class=\"hljs-params\"></span>)&#123;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">coun</span> (<span class=\"hljs-params\"></span>)&#123;            预编译 ==&gt;       <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;hi&#x27;</span>)<br>\t<span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;hi&#x27;</span>)                    &#125;<br>&#125;\t\t\t\t\t\t\t\t\t      coun()<br><br></code></pre></td></tr></table></figure>\n\n<p>但注意函数式方式不会具有变量提升</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">coun</span><span class=\"hljs-params\">()</span></span>   <span class=\"hljs-comment\">//这种方式报错</span><br><span class=\"hljs-selector-tag\">var</span> coun = <span class=\"hljs-built_in\">function</span>()&#123;<br>\tconsole<span class=\"hljs-selector-class\">.log</span>(<span class=\"hljs-string\">&#x27;hi&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"局部作用域\"><a href=\"#局部作用域\" class=\"headerlink\" title=\"局部作用域\"></a>局部作用域</h3><h4 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h4><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span><span class=\"hljs-params\">(a)</span> &#123;<br> <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">2</span>;<br> <span class=\"hljs-comment\">// 一些代码</span><br> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bar</span><span class=\"hljs-params\">()</span> &#123;<br> <span class=\"hljs-comment\">// ...</span><br> &#125;<br><span class=\"hljs-number\">22</span><br> <span class=\"hljs-comment\">// 更多的代码</span><br> <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-number\">3</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>每个函数自身都会具有创建一个作用域，foo()可以在全局中获取到，而 foo 中的 a,b,c 只能在 foo 中获取</p>\n<h4 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h4><p>首先 javaScript 本身并没有定义块级作用域说法，但是却时存在这一现象。例如：for 循环中的 变量定义声明、with、 try/catch、中的 catch 失败时的调用、 let const</p>\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><blockquote>\n<p>作用域一般指某个函数，变量声明时能够访问的位置权限来决定的。作用域范围而就由此决定。<br>作用域的目的，提高了程序的可靠性，减少了命名的冲突</p>\n</blockquote>\n<h3 id=\"全局作用域-局部作用域\"><a href=\"#全局作用域-局部作用域\" class=\"headerlink\" title=\"全局作用域/局部作用域\"></a>全局作用域/局部作用域</h3><blockquote>\n<p>全局作用域： 直接写在 js 标签的声明 就是在全局作用域里面，js 全局作用域中有一个全局对象 windeow,在这里创建声明的都会作为 window 对象的属性进行保存<br>局部作用域： 在词法作用域内部的就是局部作用域，只在当前的载体内起作用，每次调用创建局部作用域，执行完销毁，相互独立</p>\n</blockquote>\n<p>以下这种，在局部声明的方式，也是全局变量。这种隐式声明不推荐。 （严格模式下会报错）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">nu</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;</span><br><span class=\"language-javascript\">        v = <span class=\"hljs-number\">20</span>;</span><br><span class=\"language-javascript\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a);</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">    <span class=\"hljs-title function_\">nu</span>();</span><br><span class=\"language-javascript\">    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><blockquote>\n<p>使用 var 与 function 声明的变量、函数 会在所有的代码前进行一次预编译效果，也就是变量提升</p>\n</blockquote>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(a) <span class=\"hljs-comment\">//undefined   预编译 ==&gt;  var a</span><br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>                               <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(a) <span class=\"hljs-comment\">//undefined</span><br>                                         a= <span class=\"hljs-number\">10</span><br><br>\tcoun()                               <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">coun</span> (<span class=\"hljs-params\"></span>)&#123;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">coun</span> (<span class=\"hljs-params\"></span>)&#123;            预编译 ==&gt;       <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;hi&#x27;</span>)<br>\t<span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;hi&#x27;</span>)                    &#125;<br>&#125;\t\t\t\t\t\t\t\t\t      coun()<br><br></code></pre></td></tr></table></figure>\n\n<p>但注意函数式方式不会具有变量提升</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">coun</span><span class=\"hljs-params\">()</span></span>   <span class=\"hljs-comment\">//这种方式报错</span><br><span class=\"hljs-selector-tag\">var</span> coun = <span class=\"hljs-built_in\">function</span>()&#123;<br>\tconsole<span class=\"hljs-selector-class\">.log</span>(<span class=\"hljs-string\">&#x27;hi&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"局部作用域\"><a href=\"#局部作用域\" class=\"headerlink\" title=\"局部作用域\"></a>局部作用域</h3><h4 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h4><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span><span class=\"hljs-params\">(a)</span> &#123;<br> <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">2</span>;<br> <span class=\"hljs-comment\">// 一些代码</span><br> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bar</span><span class=\"hljs-params\">()</span> &#123;<br> <span class=\"hljs-comment\">// ...</span><br> &#125;<br><span class=\"hljs-number\">22</span><br> <span class=\"hljs-comment\">// 更多的代码</span><br> <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-number\">3</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>每个函数自身都会具有创建一个作用域，foo()可以在全局中获取到，而 foo 中的 a,b,c 只能在 foo 中获取</p>\n<h4 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h4><p>首先 javaScript 本身并没有定义块级作用域说法，但是却时存在这一现象。例如：for 循环中的 变量定义声明、with、 try/catch、中的 catch 失败时的调用、 let const</p>\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"函数","date":"2020-12-17T13:27:28.000Z","_content":"\n## 函数式编程\n\n-   函数柯里化\n-   偏函数\n-   高阶函数\n    `[函数式编程](https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031?fr=aladdin)`\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-08/08-17函数.md","raw":"---\ntitle: 函数\ndate: 2021-0-17 21:27:28\ntags: 原生\ncategory: JavaScript\n---\n\n## 函数式编程\n\n-   函数柯里化\n-   偏函数\n-   高阶函数\n    `[函数式编程](https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031?fr=aladdin)`\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","slug":"2021-08/08-17函数","published":1,"updated":"2021-09-07T13:15:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211b001ff60cascugutz","content":"<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><ul>\n<li>  函数柯里化</li>\n<li>  偏函数</li>\n<li>高阶函数<br>  <code>[函数式编程](https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031?fr=aladdin)</code></li>\n</ul>\n<p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><ul>\n<li>  函数柯里化</li>\n<li>  偏函数</li>\n<li>高阶函数<br>  <code>[函数式编程](https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031?fr=aladdin)</code></li>\n</ul>\n<p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"数据原理1","date":"2021-08-11T13:27:28.000Z","_content":"\n## 数据驱动模型\n\n1. 获得模板， 模板中由‘坑’\n2. 利用 Vue 构造函数中所提供的数据来\"填坑\"，得到可以再页面中显示的\"标签\"\n3. 将标签替换页面中原来有坑的位置\n\n## 模拟 vue 数据驱动\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div id=\"root\">\n        <p>{{name}}</p>\n        <p>{{msg}}</p>\n    </div>\n    <script>\n        // 步骤拆解\n        // 1. 拿到模板\n        // 2. 拿到数据\n        // 3. 将数据与模板结合 得到的时 HTML (DOM元素)\n        // 4. 放到页面中\n\n        //  1 获取模板\n        let tmpNode = document.querySelector('#root'); //获取元素\n        // 2. 获取数据\n        let data = {\n            name: '这是名字',\n            msg: '这是消息',\n        }\n        // 3. 将数据放到模板中、\n        let Rkuohao = /\\{\\{(.+?)\\}\\}/g;\n        // vue 源码中是 将真是DOM -> 字符串模板 -> VDOM -> 真实DOM\n        //  下面使用递归的方式\n        function compiler(template, data) {\n            let childNodes = template.childNodes; //取出子元素\n            console.log('打印node 节点', childNodes);\n            for (let i = 0; i < childNodes.length; i++) {\n                let type = childNodes[i].nodeType // 十几种类型  1 元素 2 文本\n\n                if (type == 3) {\n                    let txt = childNodes[i].nodeValue; //该属性只有文本才有意义\n                    // 匹配花括号\n                    txt = txt.replace(Rkuohao, function (_, g) {\n                        // g代表每次匹配的值\n                        // replace 使用匹配一次 函数会调用一次\n                        let key = g.trim()\n                        let value = data[key]\n                        return value\n\n                    })\n                    // 注意 TXT和DOM是没有关系的 所以将其替换掉\n                    childNodes[i].nodeValue = txt\n\n                } else if (type == 1) {\n                    //   元素,考虑它有没有子元素 是否需要将其子元素进行 判断是否需要插值\n                    compiler(childNodes[i], data)\n                }\n            }\n        }\n        // 克隆node节点 如果使用获取的话，是引用类型 会直接转换 再次就是获取的不是模板了\n        let cloneNode = tmpNode.cloneNode(true)\n        console.log('原始Node', tmpNode);\n        compiler(cloneNode, data)\n        console.log('处理后的Node', cloneNode);\n        // 4 将clone 的节点插入html\n        root.parentNode.replaceChild(cloneNode, root)\n    </script>\n\n</body>\n\n</html>\n```\n\n-   以上简单实现 但与实际很大的差异\n-   vue 是虚拟 DOM\n-   局限性 data 数据 实际业务中会用到 a.b.c 层次型数据\n-   操作指令 代码没有整合\n\n### 优化\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div id=\"root\">\n        <p>{{name.firstName}}{{name.lastName}}</p>\n        <p>{{msg}}</p>\n    </div>\n    <script>\n        // 构造函数\n        let Rkuohao = /\\{\\{(.+?)\\}\\}/g;\n        /** 获取data值对应 */\n        function getValueByPath(obj, path) {\n            let paths = path.split('.');\n            let res = obj;\n            let prop;\n            while (prop = paths.shift()) {\n                res = res[prop];\n            }\n            return res;\n        }\n        /** 递归 获取DOM 与data 的结合*/\n        function compiler(template, data) {\n            let childNodes = template.childNodes; //取出子元素\n            for (let i = 0; i < childNodes.length; i++) {\n                let type = childNodes[i].nodeType // 十几种类型  1 元素 2 文本\n                if (type == 3) {\n                    let txt = childNodes[i].nodeValue; //该属性只有文本才有意义\n                    // 匹配花括号\n                    txt = txt.replace(Rkuohao, function (_, g) {\n                        // g代表每次匹配的值\n                        // replace 使用匹配一次 函数会调用一次\n                        let key = g.trim()\n                        let value = getValueByPath(data, key)\n                        return value\n                    })\n                    // 注意 TXT和DOM是没有关系的 所以将其替换掉\n                    childNodes[i].nodeValue = txt\n\n                } else if (type == 1) {\n                    //   元素,考虑它有没有子元素 是否需要将其子元素进行 判断是否需要插值\n                    compiler(childNodes[i], data)\n                }\n            }\n        }\n        function JGvue(options) {\n            // _ 开头的是内部数据 $开头的是只读数据\n            this._data = options.data;\n            this._el = options.el;\n            // 准备模板\n            this.$el = this._templateDOM = document.querySelector(this._el);\n            this._parent = this._templateDOM.parentNode;\n            // 渲染\n            this.render();\n        };\n        // 向原型添加方法\n        /** 将模板和数据结合进行渲染到HTML页面之中 */\n        JGvue.prototype.render = function () {\n            this.compiler()\n        };\n        /** 将模板和数据结合得到真正的DOM*/\n        JGvue.prototype.compiler = function () {\n            let realHTMLDOM = this._templateDOM.cloneNode(true); //获取克隆的准DOM\n            //将DOM 和 数据结合\n            compiler(realHTMLDOM, this._data)\n            this.updata(realHTMLDOM);\n        };\n\n        /** 更新，将DOM 放到页面之中*/\n        JGvue.prototype.updata = function (real) {\n            this._parent.replaceChild(real, document.querySelector(\"#root\"));\n        };\n\n\n        //    使用方式\n        let app = new JGvue({\n            el: \"#root\",\n            data: {\n\n                msg: '信息啊',\n                name: {\n                    firstName: '张',\n                    lastName: '三',\n                },\n            }\n        })\n    </script>\n</body>\n</html>\n```\n\n(笔记)\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-08/08-11数据原理1 copy.md","raw":"---\ntitle: 数据原理1\ndate: 2021-08-11 21:27:28\ntags: Vue\ncategory: Vue\n---\n\n## 数据驱动模型\n\n1. 获得模板， 模板中由‘坑’\n2. 利用 Vue 构造函数中所提供的数据来\"填坑\"，得到可以再页面中显示的\"标签\"\n3. 将标签替换页面中原来有坑的位置\n\n## 模拟 vue 数据驱动\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div id=\"root\">\n        <p>{{name}}</p>\n        <p>{{msg}}</p>\n    </div>\n    <script>\n        // 步骤拆解\n        // 1. 拿到模板\n        // 2. 拿到数据\n        // 3. 将数据与模板结合 得到的时 HTML (DOM元素)\n        // 4. 放到页面中\n\n        //  1 获取模板\n        let tmpNode = document.querySelector('#root'); //获取元素\n        // 2. 获取数据\n        let data = {\n            name: '这是名字',\n            msg: '这是消息',\n        }\n        // 3. 将数据放到模板中、\n        let Rkuohao = /\\{\\{(.+?)\\}\\}/g;\n        // vue 源码中是 将真是DOM -> 字符串模板 -> VDOM -> 真实DOM\n        //  下面使用递归的方式\n        function compiler(template, data) {\n            let childNodes = template.childNodes; //取出子元素\n            console.log('打印node 节点', childNodes);\n            for (let i = 0; i < childNodes.length; i++) {\n                let type = childNodes[i].nodeType // 十几种类型  1 元素 2 文本\n\n                if (type == 3) {\n                    let txt = childNodes[i].nodeValue; //该属性只有文本才有意义\n                    // 匹配花括号\n                    txt = txt.replace(Rkuohao, function (_, g) {\n                        // g代表每次匹配的值\n                        // replace 使用匹配一次 函数会调用一次\n                        let key = g.trim()\n                        let value = data[key]\n                        return value\n\n                    })\n                    // 注意 TXT和DOM是没有关系的 所以将其替换掉\n                    childNodes[i].nodeValue = txt\n\n                } else if (type == 1) {\n                    //   元素,考虑它有没有子元素 是否需要将其子元素进行 判断是否需要插值\n                    compiler(childNodes[i], data)\n                }\n            }\n        }\n        // 克隆node节点 如果使用获取的话，是引用类型 会直接转换 再次就是获取的不是模板了\n        let cloneNode = tmpNode.cloneNode(true)\n        console.log('原始Node', tmpNode);\n        compiler(cloneNode, data)\n        console.log('处理后的Node', cloneNode);\n        // 4 将clone 的节点插入html\n        root.parentNode.replaceChild(cloneNode, root)\n    </script>\n\n</body>\n\n</html>\n```\n\n-   以上简单实现 但与实际很大的差异\n-   vue 是虚拟 DOM\n-   局限性 data 数据 实际业务中会用到 a.b.c 层次型数据\n-   操作指令 代码没有整合\n\n### 优化\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div id=\"root\">\n        <p>{{name.firstName}}{{name.lastName}}</p>\n        <p>{{msg}}</p>\n    </div>\n    <script>\n        // 构造函数\n        let Rkuohao = /\\{\\{(.+?)\\}\\}/g;\n        /** 获取data值对应 */\n        function getValueByPath(obj, path) {\n            let paths = path.split('.');\n            let res = obj;\n            let prop;\n            while (prop = paths.shift()) {\n                res = res[prop];\n            }\n            return res;\n        }\n        /** 递归 获取DOM 与data 的结合*/\n        function compiler(template, data) {\n            let childNodes = template.childNodes; //取出子元素\n            for (let i = 0; i < childNodes.length; i++) {\n                let type = childNodes[i].nodeType // 十几种类型  1 元素 2 文本\n                if (type == 3) {\n                    let txt = childNodes[i].nodeValue; //该属性只有文本才有意义\n                    // 匹配花括号\n                    txt = txt.replace(Rkuohao, function (_, g) {\n                        // g代表每次匹配的值\n                        // replace 使用匹配一次 函数会调用一次\n                        let key = g.trim()\n                        let value = getValueByPath(data, key)\n                        return value\n                    })\n                    // 注意 TXT和DOM是没有关系的 所以将其替换掉\n                    childNodes[i].nodeValue = txt\n\n                } else if (type == 1) {\n                    //   元素,考虑它有没有子元素 是否需要将其子元素进行 判断是否需要插值\n                    compiler(childNodes[i], data)\n                }\n            }\n        }\n        function JGvue(options) {\n            // _ 开头的是内部数据 $开头的是只读数据\n            this._data = options.data;\n            this._el = options.el;\n            // 准备模板\n            this.$el = this._templateDOM = document.querySelector(this._el);\n            this._parent = this._templateDOM.parentNode;\n            // 渲染\n            this.render();\n        };\n        // 向原型添加方法\n        /** 将模板和数据结合进行渲染到HTML页面之中 */\n        JGvue.prototype.render = function () {\n            this.compiler()\n        };\n        /** 将模板和数据结合得到真正的DOM*/\n        JGvue.prototype.compiler = function () {\n            let realHTMLDOM = this._templateDOM.cloneNode(true); //获取克隆的准DOM\n            //将DOM 和 数据结合\n            compiler(realHTMLDOM, this._data)\n            this.updata(realHTMLDOM);\n        };\n\n        /** 更新，将DOM 放到页面之中*/\n        JGvue.prototype.updata = function (real) {\n            this._parent.replaceChild(real, document.querySelector(\"#root\"));\n        };\n\n\n        //    使用方式\n        let app = new JGvue({\n            el: \"#root\",\n            data: {\n\n                msg: '信息啊',\n                name: {\n                    firstName: '张',\n                    lastName: '三',\n                },\n            }\n        })\n    </script>\n</body>\n</html>\n```\n\n(笔记)\n![BG图片](/img/1.jpg)\n","slug":"2021-08/08-11数据原理1 copy","published":1,"updated":"2021-08-22T02:23:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211c001jf60cal5vcgdg","content":"<h2 id=\"数据驱动模型\"><a href=\"#数据驱动模型\" class=\"headerlink\" title=\"数据驱动模型\"></a>数据驱动模型</h2><ol>\n<li>获得模板， 模板中由‘坑’</li>\n<li>利用 Vue 构造函数中所提供的数据来”填坑”，得到可以再页面中显示的”标签”</li>\n<li>将标签替换页面中原来有坑的位置</li>\n</ol>\n<h2 id=\"模拟-vue-数据驱动\"><a href=\"#模拟-vue-数据驱动\" class=\"headerlink\" title=\"模拟 vue 数据驱动\"></a>模拟 vue 数据驱动</h2><figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">msg</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 步骤拆解</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 1. 拿到模板</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 2. 拿到数据</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 3. 将数据与模板结合 得到的时 HTML (DOM元素)</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 4. 放到页面中</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">//  1 获取模板</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> tmpNode = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#root&#x27;</span>); <span class=\"hljs-comment\">//获取元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 2. 获取数据</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> data = &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;这是名字&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;这是消息&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 3. 将数据放到模板中、</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Rkuohao</span> = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/g</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// vue 源码中是 将真是DOM -&gt; 字符串模板 -&gt; VDOM -&gt; 真实DOM</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">//  下面使用递归的方式</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">compiler</span>(<span class=\"hljs-params\">template, data</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> childNodes = template.<span class=\"hljs-property\">childNodes</span>; <span class=\"hljs-comment\">//取出子元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;打印node 节点&#x27;</span>, childNodes);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; childNodes.<span class=\"hljs-property\">length</span>; i++) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> type = childNodes[i].<span class=\"hljs-property\">nodeType</span> <span class=\"hljs-comment\">// 十几种类型  1 元素 2 文本</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">3</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-keyword\">let</span> txt = childNodes[i].<span class=\"hljs-property\">nodeValue</span>; <span class=\"hljs-comment\">//该属性只有文本才有意义</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">// 匹配花括号</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    txt = txt.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-title class_\">Rkuohao</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_, g</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-comment\">// g代表每次匹配的值</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-comment\">// replace 使用匹配一次 函数会调用一次</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">let</span> key = g.<span class=\"hljs-title function_\">trim</span>()</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">let</span> value = data[key]</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">return</span> value</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">// 注意 TXT和DOM是没有关系的 所以将其替换掉</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    childNodes[i].<span class=\"hljs-property\">nodeValue</span> = txt</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">1</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">//   元素,考虑它有没有子元素 是否需要将其子元素进行 判断是否需要插值</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-title function_\">compiler</span>(childNodes[i], data)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 克隆node节点 如果使用获取的话，是引用类型 会直接转换 再次就是获取的不是模板了</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> cloneNode = tmpNode.<span class=\"hljs-title function_\">cloneNode</span>(<span class=\"hljs-literal\">true</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;原始Node&#x27;</span>, tmpNode);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title function_\">compiler</span>(cloneNode, data)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;处理后的Node&#x27;</span>, cloneNode);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 4 将clone 的节点插入html</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        root.<span class=\"hljs-property\">parentNode</span>.<span class=\"hljs-title function_\">replaceChild</span>(cloneNode, root)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>  以上简单实现 但与实际很大的差异</li>\n<li>  vue 是虚拟 DOM</li>\n<li>  局限性 data 数据 实际业务中会用到 a.b.c 层次型数据</li>\n<li>  操作指令 代码没有整合</li>\n</ul>\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name.firstName</span>&#125;&#125;</span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name.lastName</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">msg</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 构造函数</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Rkuohao</span> = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/g</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 获取data值对应 */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getValueByPath</span>(<span class=\"hljs-params\">obj, path</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> paths = path.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> res = obj;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> prop;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">while</span> (prop = paths.<span class=\"hljs-title function_\">shift</span>()) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                res = res[prop];</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> res;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 递归 获取DOM 与data 的结合*/</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">compiler</span>(<span class=\"hljs-params\">template, data</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> childNodes = template.<span class=\"hljs-property\">childNodes</span>; <span class=\"hljs-comment\">//取出子元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; childNodes.<span class=\"hljs-property\">length</span>; i++) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> type = childNodes[i].<span class=\"hljs-property\">nodeType</span> <span class=\"hljs-comment\">// 十几种类型  1 元素 2 文本</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">3</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-keyword\">let</span> txt = childNodes[i].<span class=\"hljs-property\">nodeValue</span>; <span class=\"hljs-comment\">//该属性只有文本才有意义</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">// 匹配花括号</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    txt = txt.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-title class_\">Rkuohao</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_, g</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-comment\">// g代表每次匹配的值</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-comment\">// replace 使用匹配一次 函数会调用一次</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">let</span> key = g.<span class=\"hljs-title function_\">trim</span>()</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-title function_\">getValueByPath</span>(data, key)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">return</span> value</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">// 注意 TXT和DOM是没有关系的 所以将其替换掉</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    childNodes[i].<span class=\"hljs-property\">nodeValue</span> = txt</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">1</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">//   元素,考虑它有没有子元素 是否需要将其子元素进行 判断是否需要插值</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-title function_\">compiler</span>(childNodes[i], data)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">JGvue</span>(<span class=\"hljs-params\">options</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// _ 开头的是内部数据 $开头的是只读数据</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_data</span> = options.<span class=\"hljs-property\">data</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_el</span> = options.<span class=\"hljs-property\">el</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 准备模板</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$el</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_templateDOM</span> = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_el</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_parent</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_templateDOM</span>.<span class=\"hljs-property\">parentNode</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 渲染</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">render</span>();</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 向原型添加方法</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 将模板和数据结合进行渲染到HTML页面之中 */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGvue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">render</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">compiler</span>()</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 将模板和数据结合得到真正的DOM*/</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGvue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">compiler</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> realHTMLDOM = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_templateDOM</span>.<span class=\"hljs-title function_\">cloneNode</span>(<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">//获取克隆的准DOM</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">//将DOM 和 数据结合</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-title function_\">compiler</span>(realHTMLDOM, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_data</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">updata</span>(realHTMLDOM);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 更新，将DOM 放到页面之中*/</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGvue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">updata</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">real</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_parent</span>.<span class=\"hljs-title function_\">replaceChild</span>(real, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#root&quot;</span>));</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">//    使用方式</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JGvue</span>(&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#root&quot;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">data</span>: &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;信息啊&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">name</span>: &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&#x27;张&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&#x27;三&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>(笔记)<br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据驱动模型\"><a href=\"#数据驱动模型\" class=\"headerlink\" title=\"数据驱动模型\"></a>数据驱动模型</h2><ol>\n<li>获得模板， 模板中由‘坑’</li>\n<li>利用 Vue 构造函数中所提供的数据来”填坑”，得到可以再页面中显示的”标签”</li>\n<li>将标签替换页面中原来有坑的位置</li>\n</ol>\n<h2 id=\"模拟-vue-数据驱动\"><a href=\"#模拟-vue-数据驱动\" class=\"headerlink\" title=\"模拟 vue 数据驱动\"></a>模拟 vue 数据驱动</h2><figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">msg</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 步骤拆解</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 1. 拿到模板</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 2. 拿到数据</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 3. 将数据与模板结合 得到的时 HTML (DOM元素)</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 4. 放到页面中</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">//  1 获取模板</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> tmpNode = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#root&#x27;</span>); <span class=\"hljs-comment\">//获取元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 2. 获取数据</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> data = &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;这是名字&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;这是消息&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 3. 将数据放到模板中、</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Rkuohao</span> = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/g</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// vue 源码中是 将真是DOM -&gt; 字符串模板 -&gt; VDOM -&gt; 真实DOM</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">//  下面使用递归的方式</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">compiler</span>(<span class=\"hljs-params\">template, data</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> childNodes = template.<span class=\"hljs-property\">childNodes</span>; <span class=\"hljs-comment\">//取出子元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;打印node 节点&#x27;</span>, childNodes);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; childNodes.<span class=\"hljs-property\">length</span>; i++) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> type = childNodes[i].<span class=\"hljs-property\">nodeType</span> <span class=\"hljs-comment\">// 十几种类型  1 元素 2 文本</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">3</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-keyword\">let</span> txt = childNodes[i].<span class=\"hljs-property\">nodeValue</span>; <span class=\"hljs-comment\">//该属性只有文本才有意义</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">// 匹配花括号</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    txt = txt.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-title class_\">Rkuohao</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_, g</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-comment\">// g代表每次匹配的值</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-comment\">// replace 使用匹配一次 函数会调用一次</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">let</span> key = g.<span class=\"hljs-title function_\">trim</span>()</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">let</span> value = data[key]</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">return</span> value</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">// 注意 TXT和DOM是没有关系的 所以将其替换掉</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    childNodes[i].<span class=\"hljs-property\">nodeValue</span> = txt</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">1</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">//   元素,考虑它有没有子元素 是否需要将其子元素进行 判断是否需要插值</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-title function_\">compiler</span>(childNodes[i], data)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 克隆node节点 如果使用获取的话，是引用类型 会直接转换 再次就是获取的不是模板了</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> cloneNode = tmpNode.<span class=\"hljs-title function_\">cloneNode</span>(<span class=\"hljs-literal\">true</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;原始Node&#x27;</span>, tmpNode);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title function_\">compiler</span>(cloneNode, data)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;处理后的Node&#x27;</span>, cloneNode);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 4 将clone 的节点插入html</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        root.<span class=\"hljs-property\">parentNode</span>.<span class=\"hljs-title function_\">replaceChild</span>(cloneNode, root)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>  以上简单实现 但与实际很大的差异</li>\n<li>  vue 是虚拟 DOM</li>\n<li>  局限性 data 数据 实际业务中会用到 a.b.c 层次型数据</li>\n<li>  操作指令 代码没有整合</li>\n</ul>\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name.firstName</span>&#125;&#125;</span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name.lastName</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">msg</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 构造函数</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Rkuohao</span> = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/g</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 获取data值对应 */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getValueByPath</span>(<span class=\"hljs-params\">obj, path</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> paths = path.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> res = obj;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> prop;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">while</span> (prop = paths.<span class=\"hljs-title function_\">shift</span>()) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                res = res[prop];</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> res;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 递归 获取DOM 与data 的结合*/</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">compiler</span>(<span class=\"hljs-params\">template, data</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> childNodes = template.<span class=\"hljs-property\">childNodes</span>; <span class=\"hljs-comment\">//取出子元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; childNodes.<span class=\"hljs-property\">length</span>; i++) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> type = childNodes[i].<span class=\"hljs-property\">nodeType</span> <span class=\"hljs-comment\">// 十几种类型  1 元素 2 文本</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">3</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-keyword\">let</span> txt = childNodes[i].<span class=\"hljs-property\">nodeValue</span>; <span class=\"hljs-comment\">//该属性只有文本才有意义</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">// 匹配花括号</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    txt = txt.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-title class_\">Rkuohao</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_, g</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-comment\">// g代表每次匹配的值</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-comment\">// replace 使用匹配一次 函数会调用一次</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">let</span> key = g.<span class=\"hljs-title function_\">trim</span>()</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-title function_\">getValueByPath</span>(data, key)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"hljs-keyword\">return</span> value</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">// 注意 TXT和DOM是没有关系的 所以将其替换掉</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    childNodes[i].<span class=\"hljs-property\">nodeValue</span> = txt</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">1</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-comment\">//   元素,考虑它有没有子元素 是否需要将其子元素进行 判断是否需要插值</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-title function_\">compiler</span>(childNodes[i], data)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">JGvue</span>(<span class=\"hljs-params\">options</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// _ 开头的是内部数据 $开头的是只读数据</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_data</span> = options.<span class=\"hljs-property\">data</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_el</span> = options.<span class=\"hljs-property\">el</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 准备模板</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$el</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_templateDOM</span> = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_el</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_parent</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_templateDOM</span>.<span class=\"hljs-property\">parentNode</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 渲染</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">render</span>();</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 向原型添加方法</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 将模板和数据结合进行渲染到HTML页面之中 */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGvue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">render</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">compiler</span>()</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 将模板和数据结合得到真正的DOM*/</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGvue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">compiler</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> realHTMLDOM = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_templateDOM</span>.<span class=\"hljs-title function_\">cloneNode</span>(<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">//获取克隆的准DOM</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">//将DOM 和 数据结合</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-title function_\">compiler</span>(realHTMLDOM, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_data</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">updata</span>(realHTMLDOM);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 更新，将DOM 放到页面之中*/</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGvue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">updata</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">real</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_parent</span>.<span class=\"hljs-title function_\">replaceChild</span>(real, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#root&quot;</span>));</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">//    使用方式</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JGvue</span>(&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#root&quot;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">data</span>: &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;信息啊&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">name</span>: &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&#x27;张&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&#x27;三&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>(笔记)<br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"数据原理2","date":"2021-08-15T13:27:28.000Z","_content":"\n## 数据驱动模型\n\n1. 获得模板， 模板中由‘坑’\n2. 利用 Vue 构造函数中所提供的数据来\"填坑\"，得到可以再页面中显示的\"标签\"\n3. 将标签替换页面中原来有坑的位置\n\n## 模拟 vue 数据驱动\n\n-   简化版本，没有考虑很多 Vue 实例的方法 指令等 只实现最基本的 DOM => virtualDOM => DOM 转换过程\n\n*   效果图\n    ![转换为虚拟DOM](/img/DOM1.png)\n    ![虚拟DOM转换为真实DOM](/img/DOM2.png)\n*   代码块\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div id=\"root\">\n        <div>hello1</div>\n        <div title=\"hello2\" class=\"aa\">hello2</div>\n        <div>hello3</div>\n        <div>hello4</div>\n        <ul>\n            <li id=\"li1\" title=\"111\">li1</li>\n            <li>li2</li>\n            <li>li3</li>\n        </ul>\n    </div>\n    <script>\n        //为什么使用virtualDom?\n        //首先由于真实DOM操作太浪费性能，使用虚拟DOM 经过计算存储缓存中 后直接插入到真实DOM中 ，这样大大节约了开销\n\n        /** 定义\n         *  <div></div> => { tag: 'div'}\n         *  文本节点 张三 => { tag: undefind, value: '张三'}\n         *  <div title=\"1\" class=\"aa\" > <span>11</span></div> => { tag: 'div', data:{title: '1', class: 'aa'}, children:[{tag:'span',children:[{tag:'undefind',value:'11'}],}]}\n         */\n         /** 声明一个虚拟DOM 类 */\n        class VNode {\n            constructor(tag, data, value, type) {\n                this.tag = tag && tag.toLowerCase();\n                this.data = data;\n                this.value = value;\n                this.type = type;\n                this.children = [];\n            }\n            /** 追加子节点 */\n            appebdChild(vnode) {\n                this.children.push(vnode)\n            }\n        }\n        /** 使用递归 来遍历DOM 生成virtualDOM\n         * VUE中使用的源码是栈结构， 使用栈存储 父元素来实现\n         */\n        function getVnode(node) {\n            let nodeType = node.nodeType; //节点类型\n            // console.log('传进', node);\n            let _vnode = null;\n            if (nodeType === 1) { //元素节点类型\n                let nodeName = node.nodeName; //节点名称\n                let attrs = node.attributes; //节点属性 为数组\n                // console.log('节点名称', nodeName, '节点属性', attrs);\n                let _attrsObj = {};\n                for (let i = 0; i < attrs.length; i++) {\n                    _attrsObj[attrs[i].nodeName] = attrs[i].nodeValue;\n                }\n                _vnode = new VNode(nodeName, _attrsObj, undefined, nodeType);\n                // node 子元素\n                let childNodes = node.childNodes; //获取当前元素的所有子元素\n                for (let i = 0; i < childNodes.length; i++) {\n                    _vnode.appebdChild(getVnode(childNodes[i])) //再次将子元素递归\n                }\n            } else if (nodeType === 3) { //文本节点类型\n                _vnode = new VNode(undefined, undefined, node.nodeValue, node.nodeType)\n            }\n            // 将vnode返回\n            return _vnode\n        }\n        /** 创建真实DOM */\n        function parseVNode(vnode) {\n            // 获取虚拟dom类型 文本节点创建文本 元素节点创建元素\n            let type = vnode.type //type是 class VNode中声明的type\n            let _node = null;\n            if (type === 3) {\n                return document.createTextNode(vnode.value); //文本节点只需传递value 值\n            } else if (type == 1) {\n                _node = document.createElement(vnode.tag); // 创建元素节点\n                //添加数据\n                let data = vnode.data;\n                for (key in data) {\n                    _node.setAttribute(key, data[key])\n                }\n                // 添加子元素\n                let children = vnode.children;\n                children.forEach(v => { // 每项都是虚拟DOM 递归再次调用\n                    _node.appendChild(parseVNode(v))\n                })\n            }\n            return _node\n        }\n        let root = document.querySelector('#root');\n        console.log('真实root', root);\n        let VNodeRoot = getVnode(root);\n        console.log('转换为虚拟DOM', VNodeRoot);\n        let root2 = parseVNode(VNodeRoot);\n        console.log('虚转真root', root2);\n    </script>\n\n</body>\n\n</html>\n```\n\n(笔记)\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-08/08-15数据原理2 copy.md","raw":"---\ntitle: 数据原理2\ndate: 2021-08-15 21:27:28\ntags: Vue\ncategory: Vue\n---\n\n## 数据驱动模型\n\n1. 获得模板， 模板中由‘坑’\n2. 利用 Vue 构造函数中所提供的数据来\"填坑\"，得到可以再页面中显示的\"标签\"\n3. 将标签替换页面中原来有坑的位置\n\n## 模拟 vue 数据驱动\n\n-   简化版本，没有考虑很多 Vue 实例的方法 指令等 只实现最基本的 DOM => virtualDOM => DOM 转换过程\n\n*   效果图\n    ![转换为虚拟DOM](/img/DOM1.png)\n    ![虚拟DOM转换为真实DOM](/img/DOM2.png)\n*   代码块\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div id=\"root\">\n        <div>hello1</div>\n        <div title=\"hello2\" class=\"aa\">hello2</div>\n        <div>hello3</div>\n        <div>hello4</div>\n        <ul>\n            <li id=\"li1\" title=\"111\">li1</li>\n            <li>li2</li>\n            <li>li3</li>\n        </ul>\n    </div>\n    <script>\n        //为什么使用virtualDom?\n        //首先由于真实DOM操作太浪费性能，使用虚拟DOM 经过计算存储缓存中 后直接插入到真实DOM中 ，这样大大节约了开销\n\n        /** 定义\n         *  <div></div> => { tag: 'div'}\n         *  文本节点 张三 => { tag: undefind, value: '张三'}\n         *  <div title=\"1\" class=\"aa\" > <span>11</span></div> => { tag: 'div', data:{title: '1', class: 'aa'}, children:[{tag:'span',children:[{tag:'undefind',value:'11'}],}]}\n         */\n         /** 声明一个虚拟DOM 类 */\n        class VNode {\n            constructor(tag, data, value, type) {\n                this.tag = tag && tag.toLowerCase();\n                this.data = data;\n                this.value = value;\n                this.type = type;\n                this.children = [];\n            }\n            /** 追加子节点 */\n            appebdChild(vnode) {\n                this.children.push(vnode)\n            }\n        }\n        /** 使用递归 来遍历DOM 生成virtualDOM\n         * VUE中使用的源码是栈结构， 使用栈存储 父元素来实现\n         */\n        function getVnode(node) {\n            let nodeType = node.nodeType; //节点类型\n            // console.log('传进', node);\n            let _vnode = null;\n            if (nodeType === 1) { //元素节点类型\n                let nodeName = node.nodeName; //节点名称\n                let attrs = node.attributes; //节点属性 为数组\n                // console.log('节点名称', nodeName, '节点属性', attrs);\n                let _attrsObj = {};\n                for (let i = 0; i < attrs.length; i++) {\n                    _attrsObj[attrs[i].nodeName] = attrs[i].nodeValue;\n                }\n                _vnode = new VNode(nodeName, _attrsObj, undefined, nodeType);\n                // node 子元素\n                let childNodes = node.childNodes; //获取当前元素的所有子元素\n                for (let i = 0; i < childNodes.length; i++) {\n                    _vnode.appebdChild(getVnode(childNodes[i])) //再次将子元素递归\n                }\n            } else if (nodeType === 3) { //文本节点类型\n                _vnode = new VNode(undefined, undefined, node.nodeValue, node.nodeType)\n            }\n            // 将vnode返回\n            return _vnode\n        }\n        /** 创建真实DOM */\n        function parseVNode(vnode) {\n            // 获取虚拟dom类型 文本节点创建文本 元素节点创建元素\n            let type = vnode.type //type是 class VNode中声明的type\n            let _node = null;\n            if (type === 3) {\n                return document.createTextNode(vnode.value); //文本节点只需传递value 值\n            } else if (type == 1) {\n                _node = document.createElement(vnode.tag); // 创建元素节点\n                //添加数据\n                let data = vnode.data;\n                for (key in data) {\n                    _node.setAttribute(key, data[key])\n                }\n                // 添加子元素\n                let children = vnode.children;\n                children.forEach(v => { // 每项都是虚拟DOM 递归再次调用\n                    _node.appendChild(parseVNode(v))\n                })\n            }\n            return _node\n        }\n        let root = document.querySelector('#root');\n        console.log('真实root', root);\n        let VNodeRoot = getVnode(root);\n        console.log('转换为虚拟DOM', VNodeRoot);\n        let root2 = parseVNode(VNodeRoot);\n        console.log('虚转真root', root2);\n    </script>\n\n</body>\n\n</html>\n```\n\n(笔记)\n![BG图片](/img/1.jpg)\n","slug":"2021-08/08-15数据原理2 copy","published":1,"updated":"2021-08-22T03:30:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211d001mf60c8tfq49gm","content":"<h2 id=\"数据驱动模型\"><a href=\"#数据驱动模型\" class=\"headerlink\" title=\"数据驱动模型\"></a>数据驱动模型</h2><ol>\n<li>获得模板， 模板中由‘坑’</li>\n<li>利用 Vue 构造函数中所提供的数据来”填坑”，得到可以再页面中显示的”标签”</li>\n<li>将标签替换页面中原来有坑的位置</li>\n</ol>\n<h2 id=\"模拟-vue-数据驱动\"><a href=\"#模拟-vue-数据驱动\" class=\"headerlink\" title=\"模拟 vue 数据驱动\"></a>模拟 vue 数据驱动</h2><ul>\n<li>  简化版本，没有考虑很多 Vue 实例的方法 指令等 只实现最基本的 DOM =&gt; virtualDOM =&gt; DOM 转换过程</li>\n</ul>\n<ul>\n<li>效果图<br>  <img src=\"/img/DOM1.png\" alt=\"转换为虚拟DOM\"><br>  <img src=\"/img/DOM2.png\" alt=\"虚拟DOM转换为真实DOM\"></li>\n<li>  代码块</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;hello2&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;aa&quot;</span>&gt;</span>hello2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;li1&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;111&quot;</span>&gt;</span>li1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>li2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>li3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//为什么使用virtualDom?</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//首先由于真实DOM操作太浪费性能，使用虚拟DOM 经过计算存储缓存中 后直接插入到真实DOM中 ，这样大大节约了开销</span></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">/** 定义</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         *  &lt;div&gt;&lt;/div&gt; =&gt; &#123; tag: &#x27;div&#x27;&#125;</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         *  文本节点 张三 =&gt; &#123; tag: undefind, value: &#x27;张三&#x27;&#125;</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         *  &lt;div title=&quot;1&quot; class=&quot;aa&quot; &gt; &lt;span&gt;11&lt;/span&gt;&lt;/div&gt; =&gt; &#123; tag: &#x27;div&#x27;, data:&#123;title: &#x27;1&#x27;, class: &#x27;aa&#x27;&#125;, children:[&#123;tag:&#x27;span&#x27;,children:[&#123;tag:&#x27;undefind&#x27;,value:&#x27;11&#x27;&#125;],&#125;]&#125;</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         */</span></span><br><span class=\"language-javascript\">         <span class=\"hljs-comment\">/** 声明一个虚拟DOM 类 */</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VNode</span> &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">tag, data, value, type</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tag</span> = tag &amp;&amp; tag.<span class=\"hljs-title function_\">toLowerCase</span>();</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span> = data;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = value;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">type</span> = type;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">children</span> = [];</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">/** 追加子节点 */</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">appebdChild</span>(<span class=\"hljs-params\">vnode</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">children</span>.<span class=\"hljs-title function_\">push</span>(vnode)</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">/** 使用递归 来遍历DOM 生成virtualDOM</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         * VUE中使用的源码是栈结构， 使用栈存储 父元素来实现</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         */</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getVnode</span>(<span class=\"hljs-params\">node</span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">let</span> nodeType = node.<span class=\"hljs-property\">nodeType</span>; <span class=\"hljs-comment\">//节点类型</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// console.log(&#x27;传进&#x27;, node);</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">let</span> _vnode = <span class=\"hljs-literal\">null</span>;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">if</span> (nodeType === <span class=\"hljs-number\">1</span>) &#123; <span class=\"hljs-comment\">//元素节点类型</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> nodeName = node.<span class=\"hljs-property\">nodeName</span>; <span class=\"hljs-comment\">//节点名称</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> attrs = node.<span class=\"hljs-property\">attributes</span>; <span class=\"hljs-comment\">//节点属性 为数组</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-comment\">// console.log(&#x27;节点名称&#x27;, nodeName, &#x27;节点属性&#x27;, attrs);</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> _attrsObj = &#123;&#125;;</span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; attrs.<span class=\"hljs-property\">length</span>; i++) &#123;</span><br><span class=\"language-javascript\">                    _attrsObj[attrs[i].<span class=\"hljs-property\">nodeName</span>] = attrs[i].<span class=\"hljs-property\">nodeValue</span>;</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(nodeName, _attrsObj, <span class=\"hljs-literal\">undefined</span>, nodeType);</span><br><span class=\"language-javascript\">                <span class=\"hljs-comment\">// node 子元素</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> childNodes = node.<span class=\"hljs-property\">childNodes</span>; <span class=\"hljs-comment\">//获取当前元素的所有子元素</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; childNodes.<span class=\"hljs-property\">length</span>; i++) &#123;</span><br><span class=\"language-javascript\">                    _vnode.<span class=\"hljs-title function_\">appebdChild</span>(<span class=\"hljs-title function_\">getVnode</span>(childNodes[i])) <span class=\"hljs-comment\">//再次将子元素递归</span></span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (nodeType === <span class=\"hljs-number\">3</span>) &#123; <span class=\"hljs-comment\">//文本节点类型</span></span><br><span class=\"language-javascript\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(<span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, node.<span class=\"hljs-property\">nodeValue</span>, node.<span class=\"hljs-property\">nodeType</span>)</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 将vnode返回</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> _vnode</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">/** 创建真实DOM */</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">parseVNode</span>(<span class=\"hljs-params\">vnode</span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 获取虚拟dom类型 文本节点创建文本 元素节点创建元素</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">let</span> type = vnode.<span class=\"hljs-property\">type</span> <span class=\"hljs-comment\">//type是 class VNode中声明的type</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">let</span> _node = <span class=\"hljs-literal\">null</span>;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-number\">3</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createTextNode</span>(vnode.<span class=\"hljs-property\">value</span>); <span class=\"hljs-comment\">//文本节点只需传递value 值</span></span><br><span class=\"language-javascript\">            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"language-javascript\">                _node = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(vnode.<span class=\"hljs-property\">tag</span>); <span class=\"hljs-comment\">// 创建元素节点</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-comment\">//添加数据</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> data = vnode.<span class=\"hljs-property\">data</span>;</span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">for</span> (key <span class=\"hljs-keyword\">in</span> data) &#123;</span><br><span class=\"language-javascript\">                    _node.<span class=\"hljs-title function_\">setAttribute</span>(key, data[key])</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">                <span class=\"hljs-comment\">// 添加子元素</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> children = vnode.<span class=\"hljs-property\">children</span>;</span><br><span class=\"language-javascript\">                children.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> &#123; <span class=\"hljs-comment\">// 每项都是虚拟DOM 递归再次调用</span></span><br><span class=\"language-javascript\">                    _node.<span class=\"hljs-title function_\">appendChild</span>(<span class=\"hljs-title function_\">parseVNode</span>(v))</span><br><span class=\"language-javascript\">                &#125;)</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> _node</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> root = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#root&#x27;</span>);</span><br><span class=\"language-javascript\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;真实root&#x27;</span>, root);</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">VNodeRoot</span> = <span class=\"hljs-title function_\">getVnode</span>(root);</span><br><span class=\"language-javascript\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;转换为虚拟DOM&#x27;</span>, <span class=\"hljs-title class_\">VNodeRoot</span>);</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> root2 = <span class=\"hljs-title function_\">parseVNode</span>(<span class=\"hljs-title class_\">VNodeRoot</span>);</span><br><span class=\"language-javascript\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;虚转真root&#x27;</span>, root2);</span><br><span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>(笔记)<br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据驱动模型\"><a href=\"#数据驱动模型\" class=\"headerlink\" title=\"数据驱动模型\"></a>数据驱动模型</h2><ol>\n<li>获得模板， 模板中由‘坑’</li>\n<li>利用 Vue 构造函数中所提供的数据来”填坑”，得到可以再页面中显示的”标签”</li>\n<li>将标签替换页面中原来有坑的位置</li>\n</ol>\n<h2 id=\"模拟-vue-数据驱动\"><a href=\"#模拟-vue-数据驱动\" class=\"headerlink\" title=\"模拟 vue 数据驱动\"></a>模拟 vue 数据驱动</h2><ul>\n<li>  简化版本，没有考虑很多 Vue 实例的方法 指令等 只实现最基本的 DOM =&gt; virtualDOM =&gt; DOM 转换过程</li>\n</ul>\n<ul>\n<li>效果图<br>  <img src=\"/img/DOM1.png\" alt=\"转换为虚拟DOM\"><br>  <img src=\"/img/DOM2.png\" alt=\"虚拟DOM转换为真实DOM\"></li>\n<li>  代码块</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;hello2&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;aa&quot;</span>&gt;</span>hello2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;li1&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;111&quot;</span>&gt;</span>li1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>li2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>li3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//为什么使用virtualDom?</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//首先由于真实DOM操作太浪费性能，使用虚拟DOM 经过计算存储缓存中 后直接插入到真实DOM中 ，这样大大节约了开销</span></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">/** 定义</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         *  &lt;div&gt;&lt;/div&gt; =&gt; &#123; tag: &#x27;div&#x27;&#125;</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         *  文本节点 张三 =&gt; &#123; tag: undefind, value: &#x27;张三&#x27;&#125;</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         *  &lt;div title=&quot;1&quot; class=&quot;aa&quot; &gt; &lt;span&gt;11&lt;/span&gt;&lt;/div&gt; =&gt; &#123; tag: &#x27;div&#x27;, data:&#123;title: &#x27;1&#x27;, class: &#x27;aa&#x27;&#125;, children:[&#123;tag:&#x27;span&#x27;,children:[&#123;tag:&#x27;undefind&#x27;,value:&#x27;11&#x27;&#125;],&#125;]&#125;</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         */</span></span><br><span class=\"language-javascript\">         <span class=\"hljs-comment\">/** 声明一个虚拟DOM 类 */</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VNode</span> &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">tag, data, value, type</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tag</span> = tag &amp;&amp; tag.<span class=\"hljs-title function_\">toLowerCase</span>();</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span> = data;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = value;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">type</span> = type;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">children</span> = [];</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">/** 追加子节点 */</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">appebdChild</span>(<span class=\"hljs-params\">vnode</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">children</span>.<span class=\"hljs-title function_\">push</span>(vnode)</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">/** 使用递归 来遍历DOM 生成virtualDOM</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         * VUE中使用的源码是栈结构， 使用栈存储 父元素来实现</span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\">         */</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getVnode</span>(<span class=\"hljs-params\">node</span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">let</span> nodeType = node.<span class=\"hljs-property\">nodeType</span>; <span class=\"hljs-comment\">//节点类型</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// console.log(&#x27;传进&#x27;, node);</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">let</span> _vnode = <span class=\"hljs-literal\">null</span>;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">if</span> (nodeType === <span class=\"hljs-number\">1</span>) &#123; <span class=\"hljs-comment\">//元素节点类型</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> nodeName = node.<span class=\"hljs-property\">nodeName</span>; <span class=\"hljs-comment\">//节点名称</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> attrs = node.<span class=\"hljs-property\">attributes</span>; <span class=\"hljs-comment\">//节点属性 为数组</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-comment\">// console.log(&#x27;节点名称&#x27;, nodeName, &#x27;节点属性&#x27;, attrs);</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> _attrsObj = &#123;&#125;;</span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; attrs.<span class=\"hljs-property\">length</span>; i++) &#123;</span><br><span class=\"language-javascript\">                    _attrsObj[attrs[i].<span class=\"hljs-property\">nodeName</span>] = attrs[i].<span class=\"hljs-property\">nodeValue</span>;</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(nodeName, _attrsObj, <span class=\"hljs-literal\">undefined</span>, nodeType);</span><br><span class=\"language-javascript\">                <span class=\"hljs-comment\">// node 子元素</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> childNodes = node.<span class=\"hljs-property\">childNodes</span>; <span class=\"hljs-comment\">//获取当前元素的所有子元素</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; childNodes.<span class=\"hljs-property\">length</span>; i++) &#123;</span><br><span class=\"language-javascript\">                    _vnode.<span class=\"hljs-title function_\">appebdChild</span>(<span class=\"hljs-title function_\">getVnode</span>(childNodes[i])) <span class=\"hljs-comment\">//再次将子元素递归</span></span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (nodeType === <span class=\"hljs-number\">3</span>) &#123; <span class=\"hljs-comment\">//文本节点类型</span></span><br><span class=\"language-javascript\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(<span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, node.<span class=\"hljs-property\">nodeValue</span>, node.<span class=\"hljs-property\">nodeType</span>)</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 将vnode返回</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> _vnode</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">/** 创建真实DOM */</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">parseVNode</span>(<span class=\"hljs-params\">vnode</span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 获取虚拟dom类型 文本节点创建文本 元素节点创建元素</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">let</span> type = vnode.<span class=\"hljs-property\">type</span> <span class=\"hljs-comment\">//type是 class VNode中声明的type</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">let</span> _node = <span class=\"hljs-literal\">null</span>;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-number\">3</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createTextNode</span>(vnode.<span class=\"hljs-property\">value</span>); <span class=\"hljs-comment\">//文本节点只需传递value 值</span></span><br><span class=\"language-javascript\">            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"language-javascript\">                _node = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(vnode.<span class=\"hljs-property\">tag</span>); <span class=\"hljs-comment\">// 创建元素节点</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-comment\">//添加数据</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> data = vnode.<span class=\"hljs-property\">data</span>;</span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">for</span> (key <span class=\"hljs-keyword\">in</span> data) &#123;</span><br><span class=\"language-javascript\">                    _node.<span class=\"hljs-title function_\">setAttribute</span>(key, data[key])</span><br><span class=\"language-javascript\">                &#125;</span><br><span class=\"language-javascript\">                <span class=\"hljs-comment\">// 添加子元素</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-keyword\">let</span> children = vnode.<span class=\"hljs-property\">children</span>;</span><br><span class=\"language-javascript\">                children.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> &#123; <span class=\"hljs-comment\">// 每项都是虚拟DOM 递归再次调用</span></span><br><span class=\"language-javascript\">                    _node.<span class=\"hljs-title function_\">appendChild</span>(<span class=\"hljs-title function_\">parseVNode</span>(v))</span><br><span class=\"language-javascript\">                &#125;)</span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> _node</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> root = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#root&#x27;</span>);</span><br><span class=\"language-javascript\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;真实root&#x27;</span>, root);</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">VNodeRoot</span> = <span class=\"hljs-title function_\">getVnode</span>(root);</span><br><span class=\"language-javascript\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;转换为虚拟DOM&#x27;</span>, <span class=\"hljs-title class_\">VNodeRoot</span>);</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> root2 = <span class=\"hljs-title function_\">parseVNode</span>(<span class=\"hljs-title class_\">VNodeRoot</span>);</span><br><span class=\"language-javascript\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;虚转真root&#x27;</span>, root2);</span><br><span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>(笔记)<br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"数据原理3","date":"2021-08-22T13:20:28.000Z","_content":"\n## 数据驱动模型\n\n## 模拟 vue 数据驱动\n\n-   简化实现 VUE 真实 DOM => VNode => 数据+模板 => 真实 DOM => 页面\n\n-   class VNode(虚拟 DOM 类)\n-   getVnode (真实 DOM => 获取虚拟 DOM)\n-   getValueByPath (处理 data 嵌套层数据)\n-   combine (将获取真实的 DOM 带有{...} 的模板与数据结合)\n-   parseVNode (虚拟 DOM 生成真实 DOM)\n-   JGVue (VUE 构造函数)\n-   mountComponent (VUE 执行 挂载函数) 方便后期使用发布订阅模式\n-   createRenderFn ( 返回一个 render 函数 带有缓存行为 闭包)\n-   update (VUE 更新阶段 diff 算法省略 渲染到页面中)\n\n*   示例图\n    ![带槽的dom](/img/带槽的dom.png)\n    ![数据与虚拟DOM结合后](/img/数据与虚拟DOM结合后.png)\n*   代码块\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div id=\"root\">\n        <div>{{name}}</div>\n        <div title=\"hello2\" class=\"aa\">hello2</div>\n        <div>{{age}}</div>\n        <div>{{gender}}</div>\n        <ul>\n            <li id=\"li1\" title=\"111\">li1</li>\n            <li>li2</li>\n            <li>li3</li>\n        </ul>\n    </div>\n    <script>\n        /** 生成虚拟DOM  */\n        class VNode {\n            constructor(tag, data, value, type) {\n                this.tag = tag && tag.toLowerCase();\n                this.data = data;\n                this.value = value;\n                this.type = type;\n                this.children = [];\n            }\n            /** 追加子节点 */\n            appebdChild(vnode) {\n                this.children.push(vnode)\n            }\n        }\n\n        function getVnode(node) {\n            let nodeType = node.nodeType; //节点类型\n            let _vnode = null;\n            if (nodeType === 1) { //元素节点类型\n                let nodeName = node.nodeName; //节点名称\n                let attrs = node.attributes; //节点属性 为数组\n                // console.log('节点名称', nodeName, '节点属性', attrs);\n                let _attrsObj = {};\n                for (let i = 0; i < attrs.length; i++) {\n                    _attrsObj[attrs[i].nodeName] = attrs[i].nodeValue;\n\n                }\n                _vnode = new VNode(nodeName, _attrsObj, undefined, nodeType);\n                // node 子元素\n                let childNodes = node.childNodes; //获取当前元素的所有子元素\n                for (let i = 0; i < childNodes.length; i++) {\n                    _vnode.appebdChild(getVnode(childNodes[i])) //再次将子元素递归\n                }\n            } else if (nodeType === 3) { //文本节点类型\n                _vnode = new VNode(undefined, undefined, node.nodeValue, node.nodeType)\n            }\n            // 将vnode返回\n            return _vnode\n        }\n        /** 根据路径 处理数据 */\n        function getValueByPath(obj, path) {\n            let paths = path.split('.');\n            let res = obj;\n            let prop;\n            while (prop = paths.shift()) {\n                res = res[prop];\n            }\n            return res;\n        }\n        let Rkuohao = /\\{\\{(.+?)\\}\\}/g;\n        /** 将带有坑的vnode 与数据结合 */\n        function combine(vnode, data) {\n            let _type = vnode.type;\n            let _data = vnode.data;\n            let _value = vnode.value;\n            let _tag = vnode.tag;\n            let _children = vnode.children;\n            let _vnode = null;\n            if (_type == 3) { //文本节点\n                _value = _value.replace(Rkuohao, function (_, g) {\n                    return getValueByPath(data, g.trim())\n                })\n                _vnode = new VNode(_tag, _data, _value, _type)\n            } else if (_type == 1) { //元素节点\n                _vnode = new VNode(_tag, _data, _value, _type)\n                _children.forEach(v => _vnode.appebdChild(combine(v, data)))\n            }\n            return _vnode;\n        }\n\n        /** 创建真实DOM */\n        function parseVNode(vnode) {\n            // 获取虚拟dom类型 文本节点创建文本 元素节点创建元素\n            let type = vnode.type //type是 class VNode中声明的type\n            let _node = null;\n            if (type === 3) {\n                return document.createTextNode(vnode.value); //文本节点只需传递value 值\n            } else if (type == 1) {\n                _node = document.createElement(vnode.tag); // 创建元素节点\n                //添加数据\n                let data = vnode.data;\n                for (key in data) {\n                    _node.setAttribute(key, data[key])\n                }\n                // 添加子元素\n                let children = vnode.children;\n                children.forEach(v => { // 每项都是虚拟DOM 递归再次调用\n                    _node.appendChild(parseVNode(v))\n                })\n            }\n            return _node\n        }\n\n        function JGVue(options) {\n            this._data = options.data;\n\n            let elm = document.querySelector(options.el); // vue中是字符串 （我们使用虚拟DOM）\n            this._template = elm;\n            this._parent = elm.parentNode; //获取父元素\n            this.mount(); //挂载\n        }\n\n        JGVue.prototype.mount = function () {\n            // 需要提供一个render 方法生成虚拟DOM\n            this.render = this.createRenderFn()\n\n            this.mountComponent();\n        }\n\n        JGVue.prototype.mountComponent = function () {\n\n            // 执行 mountComponent\n            let mount = () => {\n                this.update(this.render());\n            }\n            mount.call(this)\n            // this.update(this.render())// 使用发布订阅 交给watchr 来完成\n        }\n\n        /**\n         * 生成render函数 方法 缓存抽象语法树（我们使用虚拟DOM）\n         * 在页面中的DOM 和虚拟DOM 是一一对应关系\n         * 先有AST 和数据生成VNode (新，render)\n         * 将旧的VNode 和新的VNode 比较（diff）更新（updata）\n         */\n        JGVue.prototype.createRenderFn = function () {\n\n            let ast = getVnode(this._template)\n            // vue 将AST + Data => VNode\n            return function render() {\n                // debugger;\n                let temp = combine(ast, this._data);\n                return temp;\n            }\n        }\n        // 虚拟DOM 渲染到页面中 diff算法\n        JGVue.prototype.update = function (vnode) {\n            // 简化，直接生成 HTML DOM replaceChild 到页面中\n            let realDom = parseVNode(vnode);\n            // debugger;\n            console.log(this._parent);\n            //   这个地方没有使用算法 直接替换\n            this._parent.replaceChild(realDom, document.querySelector('#root'))\n        }\n\n        let app = new JGVue({\n            el: \"#root\",\n            data: {\n                name: '张三',\n                age: '16',\n                gender: '男',\n            }\n        })\n    </script>\n\n</body>\n\n</html>\n```\n\n(笔记)\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-08/08-22数据原理3 copy.md","raw":"---\ntitle: 数据原理3\ndate: 2021-08-22 21:20:28\ntags: Vue\ncategory: Vue\n---\n\n## 数据驱动模型\n\n## 模拟 vue 数据驱动\n\n-   简化实现 VUE 真实 DOM => VNode => 数据+模板 => 真实 DOM => 页面\n\n-   class VNode(虚拟 DOM 类)\n-   getVnode (真实 DOM => 获取虚拟 DOM)\n-   getValueByPath (处理 data 嵌套层数据)\n-   combine (将获取真实的 DOM 带有{...} 的模板与数据结合)\n-   parseVNode (虚拟 DOM 生成真实 DOM)\n-   JGVue (VUE 构造函数)\n-   mountComponent (VUE 执行 挂载函数) 方便后期使用发布订阅模式\n-   createRenderFn ( 返回一个 render 函数 带有缓存行为 闭包)\n-   update (VUE 更新阶段 diff 算法省略 渲染到页面中)\n\n*   示例图\n    ![带槽的dom](/img/带槽的dom.png)\n    ![数据与虚拟DOM结合后](/img/数据与虚拟DOM结合后.png)\n*   代码块\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div id=\"root\">\n        <div>{{name}}</div>\n        <div title=\"hello2\" class=\"aa\">hello2</div>\n        <div>{{age}}</div>\n        <div>{{gender}}</div>\n        <ul>\n            <li id=\"li1\" title=\"111\">li1</li>\n            <li>li2</li>\n            <li>li3</li>\n        </ul>\n    </div>\n    <script>\n        /** 生成虚拟DOM  */\n        class VNode {\n            constructor(tag, data, value, type) {\n                this.tag = tag && tag.toLowerCase();\n                this.data = data;\n                this.value = value;\n                this.type = type;\n                this.children = [];\n            }\n            /** 追加子节点 */\n            appebdChild(vnode) {\n                this.children.push(vnode)\n            }\n        }\n\n        function getVnode(node) {\n            let nodeType = node.nodeType; //节点类型\n            let _vnode = null;\n            if (nodeType === 1) { //元素节点类型\n                let nodeName = node.nodeName; //节点名称\n                let attrs = node.attributes; //节点属性 为数组\n                // console.log('节点名称', nodeName, '节点属性', attrs);\n                let _attrsObj = {};\n                for (let i = 0; i < attrs.length; i++) {\n                    _attrsObj[attrs[i].nodeName] = attrs[i].nodeValue;\n\n                }\n                _vnode = new VNode(nodeName, _attrsObj, undefined, nodeType);\n                // node 子元素\n                let childNodes = node.childNodes; //获取当前元素的所有子元素\n                for (let i = 0; i < childNodes.length; i++) {\n                    _vnode.appebdChild(getVnode(childNodes[i])) //再次将子元素递归\n                }\n            } else if (nodeType === 3) { //文本节点类型\n                _vnode = new VNode(undefined, undefined, node.nodeValue, node.nodeType)\n            }\n            // 将vnode返回\n            return _vnode\n        }\n        /** 根据路径 处理数据 */\n        function getValueByPath(obj, path) {\n            let paths = path.split('.');\n            let res = obj;\n            let prop;\n            while (prop = paths.shift()) {\n                res = res[prop];\n            }\n            return res;\n        }\n        let Rkuohao = /\\{\\{(.+?)\\}\\}/g;\n        /** 将带有坑的vnode 与数据结合 */\n        function combine(vnode, data) {\n            let _type = vnode.type;\n            let _data = vnode.data;\n            let _value = vnode.value;\n            let _tag = vnode.tag;\n            let _children = vnode.children;\n            let _vnode = null;\n            if (_type == 3) { //文本节点\n                _value = _value.replace(Rkuohao, function (_, g) {\n                    return getValueByPath(data, g.trim())\n                })\n                _vnode = new VNode(_tag, _data, _value, _type)\n            } else if (_type == 1) { //元素节点\n                _vnode = new VNode(_tag, _data, _value, _type)\n                _children.forEach(v => _vnode.appebdChild(combine(v, data)))\n            }\n            return _vnode;\n        }\n\n        /** 创建真实DOM */\n        function parseVNode(vnode) {\n            // 获取虚拟dom类型 文本节点创建文本 元素节点创建元素\n            let type = vnode.type //type是 class VNode中声明的type\n            let _node = null;\n            if (type === 3) {\n                return document.createTextNode(vnode.value); //文本节点只需传递value 值\n            } else if (type == 1) {\n                _node = document.createElement(vnode.tag); // 创建元素节点\n                //添加数据\n                let data = vnode.data;\n                for (key in data) {\n                    _node.setAttribute(key, data[key])\n                }\n                // 添加子元素\n                let children = vnode.children;\n                children.forEach(v => { // 每项都是虚拟DOM 递归再次调用\n                    _node.appendChild(parseVNode(v))\n                })\n            }\n            return _node\n        }\n\n        function JGVue(options) {\n            this._data = options.data;\n\n            let elm = document.querySelector(options.el); // vue中是字符串 （我们使用虚拟DOM）\n            this._template = elm;\n            this._parent = elm.parentNode; //获取父元素\n            this.mount(); //挂载\n        }\n\n        JGVue.prototype.mount = function () {\n            // 需要提供一个render 方法生成虚拟DOM\n            this.render = this.createRenderFn()\n\n            this.mountComponent();\n        }\n\n        JGVue.prototype.mountComponent = function () {\n\n            // 执行 mountComponent\n            let mount = () => {\n                this.update(this.render());\n            }\n            mount.call(this)\n            // this.update(this.render())// 使用发布订阅 交给watchr 来完成\n        }\n\n        /**\n         * 生成render函数 方法 缓存抽象语法树（我们使用虚拟DOM）\n         * 在页面中的DOM 和虚拟DOM 是一一对应关系\n         * 先有AST 和数据生成VNode (新，render)\n         * 将旧的VNode 和新的VNode 比较（diff）更新（updata）\n         */\n        JGVue.prototype.createRenderFn = function () {\n\n            let ast = getVnode(this._template)\n            // vue 将AST + Data => VNode\n            return function render() {\n                // debugger;\n                let temp = combine(ast, this._data);\n                return temp;\n            }\n        }\n        // 虚拟DOM 渲染到页面中 diff算法\n        JGVue.prototype.update = function (vnode) {\n            // 简化，直接生成 HTML DOM replaceChild 到页面中\n            let realDom = parseVNode(vnode);\n            // debugger;\n            console.log(this._parent);\n            //   这个地方没有使用算法 直接替换\n            this._parent.replaceChild(realDom, document.querySelector('#root'))\n        }\n\n        let app = new JGVue({\n            el: \"#root\",\n            data: {\n                name: '张三',\n                age: '16',\n                gender: '男',\n            }\n        })\n    </script>\n\n</body>\n\n</html>\n```\n\n(笔记)\n![BG图片](/img/1.jpg)\n","slug":"2021-08/08-22数据原理3 copy","published":1,"updated":"2021-09-07T13:28:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211e001qf60ceiwo569u","content":"<h2 id=\"数据驱动模型\"><a href=\"#数据驱动模型\" class=\"headerlink\" title=\"数据驱动模型\"></a>数据驱动模型</h2><h2 id=\"模拟-vue-数据驱动\"><a href=\"#模拟-vue-数据驱动\" class=\"headerlink\" title=\"模拟 vue 数据驱动\"></a>模拟 vue 数据驱动</h2><ul>\n<li><p>  简化实现 VUE 真实 DOM =&gt; VNode =&gt; 数据+模板 =&gt; 真实 DOM =&gt; 页面</p>\n</li>\n<li><p>  class VNode(虚拟 DOM 类)</p>\n</li>\n<li><p>  getVnode (真实 DOM =&gt; 获取虚拟 DOM)</p>\n</li>\n<li><p>  getValueByPath (处理 data 嵌套层数据)</p>\n</li>\n<li><p>  combine (将获取真实的 DOM 带有{…} 的模板与数据结合)</p>\n</li>\n<li><p>  parseVNode (虚拟 DOM 生成真实 DOM)</p>\n</li>\n<li><p>  JGVue (VUE 构造函数)</p>\n</li>\n<li><p>  mountComponent (VUE 执行 挂载函数) 方便后期使用发布订阅模式</p>\n</li>\n<li><p>  createRenderFn ( 返回一个 render 函数 带有缓存行为 闭包)</p>\n</li>\n<li><p>  update (VUE 更新阶段 diff 算法省略 渲染到页面中)</p>\n</li>\n</ul>\n<ul>\n<li>示例图<br>  <img src=\"/img/%E5%B8%A6%E6%A7%BD%E7%9A%84dom.png\" alt=\"带槽的dom\"><br>  <img src=\"/img/%E6%95%B0%E6%8D%AE%E4%B8%8E%E8%99%9A%E6%8B%9FDOM%E7%BB%93%E5%90%88%E5%90%8E.png\" alt=\"数据与虚拟DOM结合后\"></li>\n<li>  代码块</li>\n</ul>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;hello2&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;aa&quot;</span>&gt;</span>hello2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">age</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">gender</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;li1&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;111&quot;</span>&gt;</span>li1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>li2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>li3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 生成虚拟DOM  */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VNode</span> &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">tag, data, value, type</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tag</span> = tag &amp;&amp; tag.<span class=\"hljs-title function_\">toLowerCase</span>();</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span> = data;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = value;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">type</span> = type;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">children</span> = [];</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">/** 追加子节点 */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-title function_\">appebdChild</span>(<span class=\"hljs-params\">vnode</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">children</span>.<span class=\"hljs-title function_\">push</span>(vnode)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getVnode</span>(<span class=\"hljs-params\">node</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> nodeType = node.<span class=\"hljs-property\">nodeType</span>; <span class=\"hljs-comment\">//节点类型</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _vnode = <span class=\"hljs-literal\">null</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">if</span> (nodeType === <span class=\"hljs-number\">1</span>) &#123; <span class=\"hljs-comment\">//元素节点类型</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> nodeName = node.<span class=\"hljs-property\">nodeName</span>; <span class=\"hljs-comment\">//节点名称</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> attrs = node.<span class=\"hljs-property\">attributes</span>; <span class=\"hljs-comment\">//节点属性 为数组</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-comment\">// console.log(&#x27;节点名称&#x27;, nodeName, &#x27;节点属性&#x27;, attrs);</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> _attrsObj = &#123;&#125;;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; attrs.<span class=\"hljs-property\">length</span>; i++) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    _attrsObj[attrs[i].<span class=\"hljs-property\">nodeName</span>] = attrs[i].<span class=\"hljs-property\">nodeValue</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(nodeName, _attrsObj, <span class=\"hljs-literal\">undefined</span>, nodeType);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-comment\">// node 子元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> childNodes = node.<span class=\"hljs-property\">childNodes</span>; <span class=\"hljs-comment\">//获取当前元素的所有子元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; childNodes.<span class=\"hljs-property\">length</span>; i++) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    _vnode.<span class=\"hljs-title function_\">appebdChild</span>(<span class=\"hljs-title function_\">getVnode</span>(childNodes[i])) <span class=\"hljs-comment\">//再次将子元素递归</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (nodeType === <span class=\"hljs-number\">3</span>) &#123; <span class=\"hljs-comment\">//文本节点类型</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(<span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, node.<span class=\"hljs-property\">nodeValue</span>, node.<span class=\"hljs-property\">nodeType</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 将vnode返回</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> _vnode</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 根据路径 处理数据 */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getValueByPath</span>(<span class=\"hljs-params\">obj, path</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> paths = path.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> res = obj;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> prop;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">while</span> (prop = paths.<span class=\"hljs-title function_\">shift</span>()) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                res = res[prop];</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> res;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Rkuohao</span> = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/g</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 将带有坑的vnode 与数据结合 */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">combine</span>(<span class=\"hljs-params\">vnode, data</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _type = vnode.<span class=\"hljs-property\">type</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _data = vnode.<span class=\"hljs-property\">data</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _value = vnode.<span class=\"hljs-property\">value</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _tag = vnode.<span class=\"hljs-property\">tag</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _children = vnode.<span class=\"hljs-property\">children</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _vnode = <span class=\"hljs-literal\">null</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">if</span> (_type == <span class=\"hljs-number\">3</span>) &#123; <span class=\"hljs-comment\">//文本节点</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _value = _value.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-title class_\">Rkuohao</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_, g</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">getValueByPath</span>(data, g.<span class=\"hljs-title function_\">trim</span>())</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(_tag, _data, _value, _type)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (_type == <span class=\"hljs-number\">1</span>) &#123; <span class=\"hljs-comment\">//元素节点</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(_tag, _data, _value, _type)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _children.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> _vnode.<span class=\"hljs-title function_\">appebdChild</span>(<span class=\"hljs-title function_\">combine</span>(v, data)))</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> _vnode;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 创建真实DOM */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">parseVNode</span>(<span class=\"hljs-params\">vnode</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 获取虚拟dom类型 文本节点创建文本 元素节点创建元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> type = vnode.<span class=\"hljs-property\">type</span> <span class=\"hljs-comment\">//type是 class VNode中声明的type</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _node = <span class=\"hljs-literal\">null</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-number\">3</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createTextNode</span>(vnode.<span class=\"hljs-property\">value</span>); <span class=\"hljs-comment\">//文本节点只需传递value 值</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">1</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _node = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(vnode.<span class=\"hljs-property\">tag</span>); <span class=\"hljs-comment\">// 创建元素节点</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-comment\">//添加数据</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> data = vnode.<span class=\"hljs-property\">data</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">for</span> (key <span class=\"hljs-keyword\">in</span> data) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    _node.<span class=\"hljs-title function_\">setAttribute</span>(key, data[key])</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-comment\">// 添加子元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> children = vnode.<span class=\"hljs-property\">children</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                children.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> &#123; <span class=\"hljs-comment\">// 每项都是虚拟DOM 递归再次调用</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    _node.<span class=\"hljs-title function_\">appendChild</span>(<span class=\"hljs-title function_\">parseVNode</span>(v))</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> _node</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">JGVue</span>(<span class=\"hljs-params\">options</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_data</span> = options.<span class=\"hljs-property\">data</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> elm = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(options.<span class=\"hljs-property\">el</span>); <span class=\"hljs-comment\">// vue中是字符串 （我们使用虚拟DOM）</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_template</span> = elm;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_parent</span> = elm.<span class=\"hljs-property\">parentNode</span>; <span class=\"hljs-comment\">//获取父元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">mount</span>(); <span class=\"hljs-comment\">//挂载</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGVue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">mount</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 需要提供一个render 方法生成虚拟DOM</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">render</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">createRenderFn</span>()</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">mountComponent</span>();</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGVue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">mountComponent</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 执行 mountComponent</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">mount</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">render</span>());</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            mount.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// this.update(this.render())// 使用发布订阅 交给watchr 来完成</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/**</span></span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\"><span class=\"language-xml\">         * 生成render函数 方法 缓存抽象语法树（我们使用虚拟DOM）</span></span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\"><span class=\"language-xml\">         * 在页面中的DOM 和虚拟DOM 是一一对应关系</span></span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\"><span class=\"language-xml\">         * 先有AST 和数据生成VNode (新，render)</span></span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\"><span class=\"language-xml\">         * 将旧的VNode 和新的VNode 比较（diff）更新（updata）</span></span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\"><span class=\"language-xml\">         */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGVue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">createRenderFn</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> ast = <span class=\"hljs-title function_\">getVnode</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_template</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// vue 将AST + Data =&gt; VNode</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-comment\">// debugger;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> temp = <span class=\"hljs-title function_\">combine</span>(ast, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_data</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">return</span> temp;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 虚拟DOM 渲染到页面中 diff算法</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGVue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">update</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">vnode</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 简化，直接生成 HTML DOM replaceChild 到页面中</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> realDom = <span class=\"hljs-title function_\">parseVNode</span>(vnode);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// debugger;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_parent</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">//   这个地方没有使用算法 直接替换</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_parent</span>.<span class=\"hljs-title function_\">replaceChild</span>(realDom, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#root&#x27;</span>))</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JGVue</span>(&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#root&quot;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">data</span>: &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;张三&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&#x27;16&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">gender</span>: <span class=\"hljs-string\">&#x27;男&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>(笔记)<br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据驱动模型\"><a href=\"#数据驱动模型\" class=\"headerlink\" title=\"数据驱动模型\"></a>数据驱动模型</h2><h2 id=\"模拟-vue-数据驱动\"><a href=\"#模拟-vue-数据驱动\" class=\"headerlink\" title=\"模拟 vue 数据驱动\"></a>模拟 vue 数据驱动</h2><ul>\n<li><p>  简化实现 VUE 真实 DOM =&gt; VNode =&gt; 数据+模板 =&gt; 真实 DOM =&gt; 页面</p>\n</li>\n<li><p>  class VNode(虚拟 DOM 类)</p>\n</li>\n<li><p>  getVnode (真实 DOM =&gt; 获取虚拟 DOM)</p>\n</li>\n<li><p>  getValueByPath (处理 data 嵌套层数据)</p>\n</li>\n<li><p>  combine (将获取真实的 DOM 带有{…} 的模板与数据结合)</p>\n</li>\n<li><p>  parseVNode (虚拟 DOM 生成真实 DOM)</p>\n</li>\n<li><p>  JGVue (VUE 构造函数)</p>\n</li>\n<li><p>  mountComponent (VUE 执行 挂载函数) 方便后期使用发布订阅模式</p>\n</li>\n<li><p>  createRenderFn ( 返回一个 render 函数 带有缓存行为 闭包)</p>\n</li>\n<li><p>  update (VUE 更新阶段 diff 算法省略 渲染到页面中)</p>\n</li>\n</ul>\n<ul>\n<li>示例图<br>  <img src=\"/img/%E5%B8%A6%E6%A7%BD%E7%9A%84dom.png\" alt=\"带槽的dom\"><br>  <img src=\"/img/%E6%95%B0%E6%8D%AE%E4%B8%8E%E8%99%9A%E6%8B%9FDOM%E7%BB%93%E5%90%88%E5%90%8E.png\" alt=\"数据与虚拟DOM结合后\"></li>\n<li>  代码块</li>\n</ul>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;hello2&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;aa&quot;</span>&gt;</span>hello2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">age</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">gender</span>&#125;&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;li1&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;111&quot;</span>&gt;</span>li1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>li2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>li3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 生成虚拟DOM  */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VNode</span> &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">tag, data, value, type</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tag</span> = tag &amp;&amp; tag.<span class=\"hljs-title function_\">toLowerCase</span>();</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span> = data;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = value;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">type</span> = type;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">children</span> = [];</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">/** 追加子节点 */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-title function_\">appebdChild</span>(<span class=\"hljs-params\">vnode</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">children</span>.<span class=\"hljs-title function_\">push</span>(vnode)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getVnode</span>(<span class=\"hljs-params\">node</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> nodeType = node.<span class=\"hljs-property\">nodeType</span>; <span class=\"hljs-comment\">//节点类型</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _vnode = <span class=\"hljs-literal\">null</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">if</span> (nodeType === <span class=\"hljs-number\">1</span>) &#123; <span class=\"hljs-comment\">//元素节点类型</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> nodeName = node.<span class=\"hljs-property\">nodeName</span>; <span class=\"hljs-comment\">//节点名称</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> attrs = node.<span class=\"hljs-property\">attributes</span>; <span class=\"hljs-comment\">//节点属性 为数组</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-comment\">// console.log(&#x27;节点名称&#x27;, nodeName, &#x27;节点属性&#x27;, attrs);</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> _attrsObj = &#123;&#125;;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; attrs.<span class=\"hljs-property\">length</span>; i++) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    _attrsObj[attrs[i].<span class=\"hljs-property\">nodeName</span>] = attrs[i].<span class=\"hljs-property\">nodeValue</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(nodeName, _attrsObj, <span class=\"hljs-literal\">undefined</span>, nodeType);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-comment\">// node 子元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> childNodes = node.<span class=\"hljs-property\">childNodes</span>; <span class=\"hljs-comment\">//获取当前元素的所有子元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; childNodes.<span class=\"hljs-property\">length</span>; i++) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    _vnode.<span class=\"hljs-title function_\">appebdChild</span>(<span class=\"hljs-title function_\">getVnode</span>(childNodes[i])) <span class=\"hljs-comment\">//再次将子元素递归</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (nodeType === <span class=\"hljs-number\">3</span>) &#123; <span class=\"hljs-comment\">//文本节点类型</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(<span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, node.<span class=\"hljs-property\">nodeValue</span>, node.<span class=\"hljs-property\">nodeType</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 将vnode返回</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> _vnode</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 根据路径 处理数据 */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getValueByPath</span>(<span class=\"hljs-params\">obj, path</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> paths = path.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> res = obj;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> prop;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">while</span> (prop = paths.<span class=\"hljs-title function_\">shift</span>()) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                res = res[prop];</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> res;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Rkuohao</span> = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/g</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 将带有坑的vnode 与数据结合 */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">combine</span>(<span class=\"hljs-params\">vnode, data</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _type = vnode.<span class=\"hljs-property\">type</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _data = vnode.<span class=\"hljs-property\">data</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _value = vnode.<span class=\"hljs-property\">value</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _tag = vnode.<span class=\"hljs-property\">tag</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _children = vnode.<span class=\"hljs-property\">children</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _vnode = <span class=\"hljs-literal\">null</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">if</span> (_type == <span class=\"hljs-number\">3</span>) &#123; <span class=\"hljs-comment\">//文本节点</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _value = _value.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-title class_\">Rkuohao</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_, g</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">getValueByPath</span>(data, g.<span class=\"hljs-title function_\">trim</span>())</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(_tag, _data, _value, _type)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (_type == <span class=\"hljs-number\">1</span>) &#123; <span class=\"hljs-comment\">//元素节点</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _vnode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">VNode</span>(_tag, _data, _value, _type)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _children.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> _vnode.<span class=\"hljs-title function_\">appebdChild</span>(<span class=\"hljs-title function_\">combine</span>(v, data)))</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> _vnode;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/** 创建真实DOM */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">parseVNode</span>(<span class=\"hljs-params\">vnode</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 获取虚拟dom类型 文本节点创建文本 元素节点创建元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> type = vnode.<span class=\"hljs-property\">type</span> <span class=\"hljs-comment\">//type是 class VNode中声明的type</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> _node = <span class=\"hljs-literal\">null</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-number\">3</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createTextNode</span>(vnode.<span class=\"hljs-property\">value</span>); <span class=\"hljs-comment\">//文本节点只需传递value 值</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type == <span class=\"hljs-number\">1</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                _node = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(vnode.<span class=\"hljs-property\">tag</span>); <span class=\"hljs-comment\">// 创建元素节点</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-comment\">//添加数据</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> data = vnode.<span class=\"hljs-property\">data</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">for</span> (key <span class=\"hljs-keyword\">in</span> data) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    _node.<span class=\"hljs-title function_\">setAttribute</span>(key, data[key])</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-comment\">// 添加子元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> children = vnode.<span class=\"hljs-property\">children</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                children.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> &#123; <span class=\"hljs-comment\">// 每项都是虚拟DOM 递归再次调用</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                    _node.<span class=\"hljs-title function_\">appendChild</span>(<span class=\"hljs-title function_\">parseVNode</span>(v))</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> _node</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">JGVue</span>(<span class=\"hljs-params\">options</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_data</span> = options.<span class=\"hljs-property\">data</span>;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> elm = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(options.<span class=\"hljs-property\">el</span>); <span class=\"hljs-comment\">// vue中是字符串 （我们使用虚拟DOM）</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_template</span> = elm;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_parent</span> = elm.<span class=\"hljs-property\">parentNode</span>; <span class=\"hljs-comment\">//获取父元素</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">mount</span>(); <span class=\"hljs-comment\">//挂载</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGVue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">mount</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 需要提供一个render 方法生成虚拟DOM</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">render</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">createRenderFn</span>()</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">mountComponent</span>();</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGVue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">mountComponent</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 执行 mountComponent</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">mount</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">render</span>());</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            mount.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// this.update(this.render())// 使用发布订阅 交给watchr 来完成</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">/**</span></span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\"><span class=\"language-xml\">         * 生成render函数 方法 缓存抽象语法树（我们使用虚拟DOM）</span></span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\"><span class=\"language-xml\">         * 在页面中的DOM 和虚拟DOM 是一一对应关系</span></span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\"><span class=\"language-xml\">         * 先有AST 和数据生成VNode (新，render)</span></span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\"><span class=\"language-xml\">         * 将旧的VNode 和新的VNode 比较（diff）更新（updata）</span></span></span><br><span class=\"hljs-comment\"><span class=\"language-javascript\"><span class=\"language-xml\">         */</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGVue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">createRenderFn</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> ast = <span class=\"hljs-title function_\">getVnode</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_template</span>)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// vue 将AST + Data =&gt; VNode</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-comment\">// debugger;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">let</span> temp = <span class=\"hljs-title function_\">combine</span>(ast, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_data</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-keyword\">return</span> temp;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-comment\">// 虚拟DOM 渲染到页面中 diff算法</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-title class_\">JGVue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">update</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">vnode</span>) &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// 简化，直接生成 HTML DOM replaceChild 到页面中</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-keyword\">let</span> realDom = <span class=\"hljs-title function_\">parseVNode</span>(vnode);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">// debugger;</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_parent</span>);</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-comment\">//   这个地方没有使用算法 直接替换</span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_parent</span>.<span class=\"hljs-title function_\">replaceChild</span>(realDom, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#root&#x27;</span>))</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JGVue</span>(&#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#root&quot;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"hljs-attr\">data</span>: &#123;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;张三&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&#x27;16&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"hljs-attr\">gender</span>: <span class=\"hljs-string\">&#x27;男&#x27;</span>,</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;)</span></span><br><span class=\"language-javascript\"><span class=\"language-xml\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>(笔记)<br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"响应原理","date":"2021-08-27T13:10:28.000Z","_content":"\n### 认识 Object.defineProperty()\n\nObject.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\n```\n//语法\n// Object.defineProperty('修改的对象','要修改的参数(key/index)','修改为的值')\n\nObject.defineProperty(object1, 'property1', {\n  value: '',\n  writable: true, // 可更换，重写\n  configurable:true, // 可配置，可删除\n  enumerable:true, //可枚举\n  get:fn, //函数 获取\n  set:fn, //函数 设置\n});\n\n// 使用方式\n\nlet obj = {\n    name: '张三',\n};\n  let _age = '';\nObject.defineProperty(obj, 'age', {\n    configurable: true,\n    set(newVal) {\n        _age = newVal\n    },\n    get() {\n        return _age\n    }\n})\n\n```\n\n### VUE 中的使用场景\n\n```\n//简化的Vue defineReactive (只有一层data)\nfunction defineReactive(target, key, value, enumerable) {\n    //函数内部是一个局部作用域，这个value就是在函数内部使用（闭包）\n    Object.defineProperty(target, key, {\n        configurable: true,\n        enumerable: !!enumerable,\n        get() {\n            console.log('获取对象' + key + '的值');\n            return value;\n        },\n        set(newVal) {\n            console.log(`设置对象${key},值为${newVal}`);\n            value = newVal;\n        },\n    })\n};\n// 使用将对象转换为响应式\nlet keys = Object.keys(obj);\nfor (let i = 0; i < keys.length; i++) {\n    defineProperty(obj, keys[i], obj[keys[i]], true)\n}\n\n```\n\n(笔记)\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-08/08-27响应原理1.md","raw":"---\ntitle: 响应原理\ndate: 2021-08-27 21:10:28\ntags: Vue\ncategory: Vue\n---\n\n### 认识 Object.defineProperty()\n\nObject.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\n```\n//语法\n// Object.defineProperty('修改的对象','要修改的参数(key/index)','修改为的值')\n\nObject.defineProperty(object1, 'property1', {\n  value: '',\n  writable: true, // 可更换，重写\n  configurable:true, // 可配置，可删除\n  enumerable:true, //可枚举\n  get:fn, //函数 获取\n  set:fn, //函数 设置\n});\n\n// 使用方式\n\nlet obj = {\n    name: '张三',\n};\n  let _age = '';\nObject.defineProperty(obj, 'age', {\n    configurable: true,\n    set(newVal) {\n        _age = newVal\n    },\n    get() {\n        return _age\n    }\n})\n\n```\n\n### VUE 中的使用场景\n\n```\n//简化的Vue defineReactive (只有一层data)\nfunction defineReactive(target, key, value, enumerable) {\n    //函数内部是一个局部作用域，这个value就是在函数内部使用（闭包）\n    Object.defineProperty(target, key, {\n        configurable: true,\n        enumerable: !!enumerable,\n        get() {\n            console.log('获取对象' + key + '的值');\n            return value;\n        },\n        set(newVal) {\n            console.log(`设置对象${key},值为${newVal}`);\n            value = newVal;\n        },\n    })\n};\n// 使用将对象转换为响应式\nlet keys = Object.keys(obj);\nfor (let i = 0; i < keys.length; i++) {\n    defineProperty(obj, keys[i], obj[keys[i]], true)\n}\n\n```\n\n(笔记)\n![BG图片](/img/1.jpg)\n","slug":"2021-08/08-27响应原理1","published":1,"updated":"2021-09-07T15:15:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211e001tf60cgu9og54p","content":"<h3 id=\"认识-Object-defineProperty\"><a href=\"#认识-Object-defineProperty\" class=\"headerlink\" title=\"认识 Object.defineProperty()\"></a>认识 Object.defineProperty()</h3><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sqf\"><span class=\"hljs-comment\">//语法</span><br><span class=\"hljs-comment\">// Object.defineProperty(&#x27;修改的对象&#x27;,&#x27;要修改的参数(key/index)&#x27;,&#x27;修改为的值&#x27;)</span><br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(object1, <span class=\"hljs-string\">&#x27;property1&#x27;</span>, &#123;<br>  value: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  writable: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 可更换，重写</span><br>  configurable:<span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 可配置，可删除</span><br>  enumerable:<span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//可枚举</span><br>  <span class=\"hljs-built_in\">get</span>:fn, <span class=\"hljs-comment\">//函数 获取</span><br>  <span class=\"hljs-built_in\">set</span>:fn, <span class=\"hljs-comment\">//函数 设置</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 使用方式</span><br><br>let obj = &#123;<br>    <span class=\"hljs-built_in\">name</span>: <span class=\"hljs-string\">&#x27;张三&#x27;</span>,<br>&#125;;<br>  let <span class=\"hljs-variable\">_age</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br><span class=\"hljs-built_in\">Object</span>.defineProperty(obj, <span class=\"hljs-string\">&#x27;age&#x27;</span>, &#123;<br>    configurable: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-built_in\">set</span>(newVal) &#123;<br>        <span class=\"hljs-variable\">_age</span> = newVal<br>    &#125;,<br>    <span class=\"hljs-built_in\">get</span>() &#123;<br>        return <span class=\"hljs-variable\">_age</span><br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"VUE-中的使用场景\"><a href=\"#VUE-中的使用场景\" class=\"headerlink\" title=\"VUE 中的使用场景\"></a>VUE 中的使用场景</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//简化的Vue defineReactive (只有一层data)</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">defineReactive</span>(<span class=\"hljs-params\">target, key, value, enumerable</span>) &#123;<br>    <span class=\"hljs-comment\">//函数内部是一个局部作用域，这个value就是在函数内部使用（闭包）</span><br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(target, key, &#123;<br>        <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-attr\">enumerable</span>: !!enumerable,<br>        <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;获取对象&#x27;</span> + key + <span class=\"hljs-string\">&#x27;的值&#x27;</span>);<br>            <span class=\"hljs-keyword\">return</span> value;<br>        &#125;,<br>        <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">newVal</span>) &#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`设置对象<span class=\"hljs-subst\">$&#123;key&#125;</span>,值为<span class=\"hljs-subst\">$&#123;newVal&#125;</span>`</span>);<br>            value = newVal;<br>        &#125;,<br>    &#125;)<br>&#125;;<br><span class=\"hljs-comment\">// 使用将对象转换为响应式</span><br><span class=\"hljs-keyword\">let</span> keys = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(obj);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; keys.<span class=\"hljs-property\">length</span>; i++) &#123;<br>    <span class=\"hljs-title function_\">defineProperty</span>(obj, keys[i], obj[keys[i]], <span class=\"hljs-literal\">true</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>(笔记)<br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"认识-Object-defineProperty\"><a href=\"#认识-Object-defineProperty\" class=\"headerlink\" title=\"认识 Object.defineProperty()\"></a>认识 Object.defineProperty()</h3><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sqf\"><span class=\"hljs-comment\">//语法</span><br><span class=\"hljs-comment\">// Object.defineProperty(&#x27;修改的对象&#x27;,&#x27;要修改的参数(key/index)&#x27;,&#x27;修改为的值&#x27;)</span><br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(object1, <span class=\"hljs-string\">&#x27;property1&#x27;</span>, &#123;<br>  value: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  writable: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 可更换，重写</span><br>  configurable:<span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 可配置，可删除</span><br>  enumerable:<span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//可枚举</span><br>  <span class=\"hljs-built_in\">get</span>:fn, <span class=\"hljs-comment\">//函数 获取</span><br>  <span class=\"hljs-built_in\">set</span>:fn, <span class=\"hljs-comment\">//函数 设置</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 使用方式</span><br><br>let obj = &#123;<br>    <span class=\"hljs-built_in\">name</span>: <span class=\"hljs-string\">&#x27;张三&#x27;</span>,<br>&#125;;<br>  let <span class=\"hljs-variable\">_age</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br><span class=\"hljs-built_in\">Object</span>.defineProperty(obj, <span class=\"hljs-string\">&#x27;age&#x27;</span>, &#123;<br>    configurable: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-built_in\">set</span>(newVal) &#123;<br>        <span class=\"hljs-variable\">_age</span> = newVal<br>    &#125;,<br>    <span class=\"hljs-built_in\">get</span>() &#123;<br>        return <span class=\"hljs-variable\">_age</span><br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"VUE-中的使用场景\"><a href=\"#VUE-中的使用场景\" class=\"headerlink\" title=\"VUE 中的使用场景\"></a>VUE 中的使用场景</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//简化的Vue defineReactive (只有一层data)</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">defineReactive</span>(<span class=\"hljs-params\">target, key, value, enumerable</span>) &#123;<br>    <span class=\"hljs-comment\">//函数内部是一个局部作用域，这个value就是在函数内部使用（闭包）</span><br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(target, key, &#123;<br>        <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-attr\">enumerable</span>: !!enumerable,<br>        <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;获取对象&#x27;</span> + key + <span class=\"hljs-string\">&#x27;的值&#x27;</span>);<br>            <span class=\"hljs-keyword\">return</span> value;<br>        &#125;,<br>        <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">newVal</span>) &#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`设置对象<span class=\"hljs-subst\">$&#123;key&#125;</span>,值为<span class=\"hljs-subst\">$&#123;newVal&#125;</span>`</span>);<br>            value = newVal;<br>        &#125;,<br>    &#125;)<br>&#125;;<br><span class=\"hljs-comment\">// 使用将对象转换为响应式</span><br><span class=\"hljs-keyword\">let</span> keys = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(obj);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; keys.<span class=\"hljs-property\">length</span>; i++) &#123;<br>    <span class=\"hljs-title function_\">defineProperty</span>(obj, keys[i], obj[keys[i]], <span class=\"hljs-literal\">true</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>(笔记)<br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"vue数组的变异方法实现","date":"2021-09-02T12:20:28.000Z","_content":"\n## 函数拦截\n\n仿写实现 vue 的数组变异方法之前，首先要了解函数拦截这个概念。是指在函数原有的基础上增加额外的操作\n\n-   使用一个临时的函数名储存函数\n-   重新定义原来的函数\n-   定义扩展的功能\n-   调用临时的那个函数\n\n```\n function fn() {\n     console.log('函数本身的功能');\n }\n\n let _tFn = fn;\n fn = function () {\n     _tFn()\n     console.log('新的扩展的功能');\n }\n fn(); // 打印出本身功能 扩展功能\n```\n\n## vue 中的实现方式\n\n```\n/**  修改数组原型方法 */\nlet ARRAY_METHOD = [\n    'push', 'pop', 'shift', 'unshift', 'reverse', 'sort', 'splice'\n];\n// 将原型链继承：修改原型链结构\nlet arr = [];\n// 关系 ： arr => Array.prototype => Obj.prototype\n//  更换为\n// 关系：  arr => 函数拦截(改写的方法) => Array.prototype => Obj.prototype\nlet array_methods = Object.create(Array.prototype)\nARRAY_METHOD.forEach(method => {\n    // console.log('调用拦截的', method);\n    array_methods[method] = function () {\n        let res = Array.prototype[method].apply(this, arguments)\n        return res\n    }\n})\narr.__proto__ = array_methods;\n```\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-09/vue数组的变异方法实现.md","raw":"---\ntitle: vue数组的变异方法实现\ndate: 2021-09-02 20:20:28\ntags: Vue\ncategory: Vue\n---\n\n## 函数拦截\n\n仿写实现 vue 的数组变异方法之前，首先要了解函数拦截这个概念。是指在函数原有的基础上增加额外的操作\n\n-   使用一个临时的函数名储存函数\n-   重新定义原来的函数\n-   定义扩展的功能\n-   调用临时的那个函数\n\n```\n function fn() {\n     console.log('函数本身的功能');\n }\n\n let _tFn = fn;\n fn = function () {\n     _tFn()\n     console.log('新的扩展的功能');\n }\n fn(); // 打印出本身功能 扩展功能\n```\n\n## vue 中的实现方式\n\n```\n/**  修改数组原型方法 */\nlet ARRAY_METHOD = [\n    'push', 'pop', 'shift', 'unshift', 'reverse', 'sort', 'splice'\n];\n// 将原型链继承：修改原型链结构\nlet arr = [];\n// 关系 ： arr => Array.prototype => Obj.prototype\n//  更换为\n// 关系：  arr => 函数拦截(改写的方法) => Array.prototype => Obj.prototype\nlet array_methods = Object.create(Array.prototype)\nARRAY_METHOD.forEach(method => {\n    // console.log('调用拦截的', method);\n    array_methods[method] = function () {\n        let res = Array.prototype[method].apply(this, arguments)\n        return res\n    }\n})\narr.__proto__ = array_methods;\n```\n\n![BG图片](/img/1.jpg)\n","slug":"2021-09/vue数组的变异方法实现","published":1,"updated":"2021-12-09T14:52:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211f001xf60cbwnic6pf","content":"<h2 id=\"函数拦截\"><a href=\"#函数拦截\" class=\"headerlink\" title=\"函数拦截\"></a>函数拦截</h2><p>仿写实现 vue 的数组变异方法之前，首先要了解函数拦截这个概念。是指在函数原有的基础上增加额外的操作</p>\n<ul>\n<li>  使用一个临时的函数名储存函数</li>\n<li>  重新定义原来的函数</li>\n<li>  定义扩展的功能</li>\n<li>  调用临时的那个函数</li>\n</ul>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;函数本身的功能&#x27;</span>);<br>&#125;<br><br>let _tFn = fn;<br>fn = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    _tFn()<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;新的扩展的功能&#x27;</span>);<br>&#125;<br>fn(); <span class=\"hljs-comment\">// 打印出本身功能 扩展功能</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"vue-中的实现方式\"><a href=\"#vue-中的实现方式\" class=\"headerlink\" title=\"vue 中的实现方式\"></a>vue 中的实现方式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**  修改数组原型方法 */</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">ARRAY_METHOD</span> = [<br>    <span class=\"hljs-string\">&#x27;push&#x27;</span>, <span class=\"hljs-string\">&#x27;pop&#x27;</span>, <span class=\"hljs-string\">&#x27;shift&#x27;</span>, <span class=\"hljs-string\">&#x27;unshift&#x27;</span>, <span class=\"hljs-string\">&#x27;reverse&#x27;</span>, <span class=\"hljs-string\">&#x27;sort&#x27;</span>, <span class=\"hljs-string\">&#x27;splice&#x27;</span><br>];<br><span class=\"hljs-comment\">// 将原型链继承：修改原型链结构</span><br><span class=\"hljs-keyword\">let</span> arr = [];<br><span class=\"hljs-comment\">// 关系 ： arr =&gt; Array.prototype =&gt; Obj.prototype</span><br><span class=\"hljs-comment\">//  更换为</span><br><span class=\"hljs-comment\">// 关系：  arr =&gt; 函数拦截(改写的方法) =&gt; Array.prototype =&gt; Obj.prototype</span><br><span class=\"hljs-keyword\">let</span> array_methods = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>)<br><span class=\"hljs-variable constant_\">ARRAY_METHOD</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">method</span> =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">// console.log(&#x27;调用拦截的&#x27;, method);</span><br>    array_methods[method] = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>[method].<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>)<br>        <span class=\"hljs-keyword\">return</span> res<br>    &#125;<br>&#125;)<br>arr.<span class=\"hljs-property\">__proto__</span> = array_methods;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数拦截\"><a href=\"#函数拦截\" class=\"headerlink\" title=\"函数拦截\"></a>函数拦截</h2><p>仿写实现 vue 的数组变异方法之前，首先要了解函数拦截这个概念。是指在函数原有的基础上增加额外的操作</p>\n<ul>\n<li>  使用一个临时的函数名储存函数</li>\n<li>  重新定义原来的函数</li>\n<li>  定义扩展的功能</li>\n<li>  调用临时的那个函数</li>\n</ul>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;函数本身的功能&#x27;</span>);<br>&#125;<br><br>let _tFn = fn;<br>fn = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    _tFn()<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&#x27;新的扩展的功能&#x27;</span>);<br>&#125;<br>fn(); <span class=\"hljs-comment\">// 打印出本身功能 扩展功能</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"vue-中的实现方式\"><a href=\"#vue-中的实现方式\" class=\"headerlink\" title=\"vue 中的实现方式\"></a>vue 中的实现方式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**  修改数组原型方法 */</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">ARRAY_METHOD</span> = [<br>    <span class=\"hljs-string\">&#x27;push&#x27;</span>, <span class=\"hljs-string\">&#x27;pop&#x27;</span>, <span class=\"hljs-string\">&#x27;shift&#x27;</span>, <span class=\"hljs-string\">&#x27;unshift&#x27;</span>, <span class=\"hljs-string\">&#x27;reverse&#x27;</span>, <span class=\"hljs-string\">&#x27;sort&#x27;</span>, <span class=\"hljs-string\">&#x27;splice&#x27;</span><br>];<br><span class=\"hljs-comment\">// 将原型链继承：修改原型链结构</span><br><span class=\"hljs-keyword\">let</span> arr = [];<br><span class=\"hljs-comment\">// 关系 ： arr =&gt; Array.prototype =&gt; Obj.prototype</span><br><span class=\"hljs-comment\">//  更换为</span><br><span class=\"hljs-comment\">// 关系：  arr =&gt; 函数拦截(改写的方法) =&gt; Array.prototype =&gt; Obj.prototype</span><br><span class=\"hljs-keyword\">let</span> array_methods = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>)<br><span class=\"hljs-variable constant_\">ARRAY_METHOD</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">method</span> =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">// console.log(&#x27;调用拦截的&#x27;, method);</span><br>    array_methods[method] = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>[method].<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>)<br>        <span class=\"hljs-keyword\">return</span> res<br>    &#125;<br>&#125;)<br>arr.<span class=\"hljs-property\">__proto__</span> = array_methods;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"webpack配置学习","date":"2021-10-25T14:27:33.000Z","_content":"\n## 认识 [webpack](https://webpack.docschina.org/)\n\nwebpack 是前端一直流行很火的打包，构建工具。 所需要 node 环境 ，今天从零开始学习\n\n-   entry 入口\n-   output 出口\n-   mode 环境 process.env.NODE_ENV 生产环境还是开发环境等等\n-   loader 老生常谈的 用于各源代码进行转换 加载 引用等等\n-   plugins 是我们在配置插件的地方。一般用来解决 loader 实现不了的工作\n\n## 创建 webpack 工程\n\n1. 生成 package.json 文件\n   npm init -y\n\n2.安装 webpack webpack-cli\n\nnpm i -D webpack webpack-cli\n\n-S 需要发布的\n—D 不需要发布\n\n## webpack 零配置 默认打包\n\n只打包 js 压缩 生成 main.js\n默认出口 dist/main.js\n默认出口 src/index.js\n\n## 安装 webpack 脚手架\n\nnpm i -D webpack-dev-server\n\n```\n devServer: {\n        // 配置webpack-dev-server\n        port: 8083, //配置服务器端口\n        open: true, // 自动打开浏览器\n        progress: true, //进度\n        contentBase: './dist', //指定的web服务器根目录\n    }\n```\n\n## css\n\nwebpack 默认只加载 js 不支持 css 加载\n需要 css 装载器 css-loader style-loader 把 css 直接添加到 Html style 标签中\n\n## 装载器执行顺序\n\n先加载 css 后整合到 html style 标签中 数组从后至前执行\n\n## less 装载器\n\nnpm i -D less-loader\n\n## css 抽取器\n\nnpm i -D mini-css-extract-plugin\n便于 css 压缩合并 处理缓存\nnpm i -D optimize-css-assets-webpack-plugin\njs: terser-webpack-plugin\n\n## Es6 Es7 转 Es5\n\nnpm i -D babel-loader\n@babel/core\n@babel/preset-env 转换 Es5\n@babel/plugin-proposal-decorators //装饰器\n\n## js 模块化\n\ncommonjs:\n导出： module.exports 导入：require()\n导出： export default xxx 导入 import xx from xxx\n\n# tree shaking(去掉无引用代码)\n\nwebpack4 有这个功能 支持当前 js 中无用的代码\nwebpack5 加强这个功能\na.js （有 无引用代码 ）去掉\n只在生产模式下才会清掉\n\n# 打包生成的 dist\n\n没有分类存储 js css 这些文件\n在配置中分别输出的 filename 项中 配置 输出路径 js/index.js || css/index.css\n\n灵活配置 不同的 css /js 文件 将 js/index.js => js/[name].[hash].js\n\n```\n  output: {\n        path: path.resolve(__dirname, 'dist'), //出口\n        filename: 'js/[name].[hash].js', //出口名称\n    },\n```\n\n因为浏览器的缓存机制 加上 hash 值 每次改动后的文件长度不一致 所以每次文件都会 确认使用的最新文件\n\n# 全局变量\n\n使用 improt 引入的文件需要在使用的地方都要做一次引入\n\n使用 webpack 自带插件 webpack.ProvidepPlugin 可以设置全局变量\n如 jq 类似第三方包项目中引用\n\n```\n plugins: [\n        new webpack.ProvidePlugin({\n            $: 'jqery',\n        }),\n    ],\n```\n\n## 配置后，文件可以不用引入 ，但打包体积不会变小\n\n配置 externals 使用 不打包 文件\n\n```\nexternals :{ //排除第三方\n   jqery :'$'\n}\n```\n\n# 图片导入\n\n使用装载器 引入 file-loader | url-loader\nnpm i -D file-loader url-loader\n在 module 中配置\n\n```\nmodule :{\n    rules:[\n         {\n                test: /\\.(jpg|png|jpeg)$/,\n                use: {\n                    loader: 'file-loader',\n                    options: { esModule: false},//使用common.js 方式\n                },\n            },\n    ]\n}\n```\n\n## 使用 html-withimg-loader\n\n在 html 中加载图片\n\n```\nmodule :{\n    rules:[\n         {\n                test: /\\.html$/,\n                use: { loader: 'html-with-loader' },\n            },\n    ]\n}\n```\n\n# 图片加载 url-loader\n\n1. 对图片小的 做 base64 转换\n2. 对较大的图片 直接提供 url 下载 可以使用 cdn 优化 ，页面请求过多 减少请求次数\n\n```\nmodule :{\n    rules:[\n         {\n                test: /\\.(jpg|png|jpeg)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: { esModule: false,\n                    limt:100*1024,//指小于100KB的图片自动转换base64\n                    },//使用common.js 方式\n                },\n            },\n    ]\n}\n```\n\n# 样式兼容\n\n因为浏览器厂商不一致 导致样式的适配不一致\n一些 c3 新属性 兼容程度不一致  \nnpm i -D outoprefixer postcss-loader\n\n```\n// 新建postcss.config.js\n\n//在 page.json 文件中配置\n\"browserslist\":[\n    \"> 1%\", //使用率大于1/100\n    \"last 100 versions\", //对当前浏览器100个版本转换\n    \"not ie <= 8\" //不转换ie8以下\n]\n// webpack.config.js 中配置\n{\n    test: /\\.less$/,\n    use: [\n        MiniCssExtractPlugin.loader,\n        'css-loader',\n        'less-loader',\n        'postcss-loader',\n    ], //从后至前加载\n},\n```\n\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-10/10-25webpack配置学习1.md","raw":"---\ntitle: webpack配置学习\ndate: 2021-10-25 22:27:33\ntags: 原生\ncategory: webpack\n---\n\n## 认识 [webpack](https://webpack.docschina.org/)\n\nwebpack 是前端一直流行很火的打包，构建工具。 所需要 node 环境 ，今天从零开始学习\n\n-   entry 入口\n-   output 出口\n-   mode 环境 process.env.NODE_ENV 生产环境还是开发环境等等\n-   loader 老生常谈的 用于各源代码进行转换 加载 引用等等\n-   plugins 是我们在配置插件的地方。一般用来解决 loader 实现不了的工作\n\n## 创建 webpack 工程\n\n1. 生成 package.json 文件\n   npm init -y\n\n2.安装 webpack webpack-cli\n\nnpm i -D webpack webpack-cli\n\n-S 需要发布的\n—D 不需要发布\n\n## webpack 零配置 默认打包\n\n只打包 js 压缩 生成 main.js\n默认出口 dist/main.js\n默认出口 src/index.js\n\n## 安装 webpack 脚手架\n\nnpm i -D webpack-dev-server\n\n```\n devServer: {\n        // 配置webpack-dev-server\n        port: 8083, //配置服务器端口\n        open: true, // 自动打开浏览器\n        progress: true, //进度\n        contentBase: './dist', //指定的web服务器根目录\n    }\n```\n\n## css\n\nwebpack 默认只加载 js 不支持 css 加载\n需要 css 装载器 css-loader style-loader 把 css 直接添加到 Html style 标签中\n\n## 装载器执行顺序\n\n先加载 css 后整合到 html style 标签中 数组从后至前执行\n\n## less 装载器\n\nnpm i -D less-loader\n\n## css 抽取器\n\nnpm i -D mini-css-extract-plugin\n便于 css 压缩合并 处理缓存\nnpm i -D optimize-css-assets-webpack-plugin\njs: terser-webpack-plugin\n\n## Es6 Es7 转 Es5\n\nnpm i -D babel-loader\n@babel/core\n@babel/preset-env 转换 Es5\n@babel/plugin-proposal-decorators //装饰器\n\n## js 模块化\n\ncommonjs:\n导出： module.exports 导入：require()\n导出： export default xxx 导入 import xx from xxx\n\n# tree shaking(去掉无引用代码)\n\nwebpack4 有这个功能 支持当前 js 中无用的代码\nwebpack5 加强这个功能\na.js （有 无引用代码 ）去掉\n只在生产模式下才会清掉\n\n# 打包生成的 dist\n\n没有分类存储 js css 这些文件\n在配置中分别输出的 filename 项中 配置 输出路径 js/index.js || css/index.css\n\n灵活配置 不同的 css /js 文件 将 js/index.js => js/[name].[hash].js\n\n```\n  output: {\n        path: path.resolve(__dirname, 'dist'), //出口\n        filename: 'js/[name].[hash].js', //出口名称\n    },\n```\n\n因为浏览器的缓存机制 加上 hash 值 每次改动后的文件长度不一致 所以每次文件都会 确认使用的最新文件\n\n# 全局变量\n\n使用 improt 引入的文件需要在使用的地方都要做一次引入\n\n使用 webpack 自带插件 webpack.ProvidepPlugin 可以设置全局变量\n如 jq 类似第三方包项目中引用\n\n```\n plugins: [\n        new webpack.ProvidePlugin({\n            $: 'jqery',\n        }),\n    ],\n```\n\n## 配置后，文件可以不用引入 ，但打包体积不会变小\n\n配置 externals 使用 不打包 文件\n\n```\nexternals :{ //排除第三方\n   jqery :'$'\n}\n```\n\n# 图片导入\n\n使用装载器 引入 file-loader | url-loader\nnpm i -D file-loader url-loader\n在 module 中配置\n\n```\nmodule :{\n    rules:[\n         {\n                test: /\\.(jpg|png|jpeg)$/,\n                use: {\n                    loader: 'file-loader',\n                    options: { esModule: false},//使用common.js 方式\n                },\n            },\n    ]\n}\n```\n\n## 使用 html-withimg-loader\n\n在 html 中加载图片\n\n```\nmodule :{\n    rules:[\n         {\n                test: /\\.html$/,\n                use: { loader: 'html-with-loader' },\n            },\n    ]\n}\n```\n\n# 图片加载 url-loader\n\n1. 对图片小的 做 base64 转换\n2. 对较大的图片 直接提供 url 下载 可以使用 cdn 优化 ，页面请求过多 减少请求次数\n\n```\nmodule :{\n    rules:[\n         {\n                test: /\\.(jpg|png|jpeg)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: { esModule: false,\n                    limt:100*1024,//指小于100KB的图片自动转换base64\n                    },//使用common.js 方式\n                },\n            },\n    ]\n}\n```\n\n# 样式兼容\n\n因为浏览器厂商不一致 导致样式的适配不一致\n一些 c3 新属性 兼容程度不一致  \nnpm i -D outoprefixer postcss-loader\n\n```\n// 新建postcss.config.js\n\n//在 page.json 文件中配置\n\"browserslist\":[\n    \"> 1%\", //使用率大于1/100\n    \"last 100 versions\", //对当前浏览器100个版本转换\n    \"not ie <= 8\" //不转换ie8以下\n]\n// webpack.config.js 中配置\n{\n    test: /\\.less$/,\n    use: [\n        MiniCssExtractPlugin.loader,\n        'css-loader',\n        'less-loader',\n        'postcss-loader',\n    ], //从后至前加载\n},\n```\n\n![BG图片](/img/1.jpg)\n","slug":"2021-10/10-25webpack配置学习1","published":1,"updated":"2021-12-09T14:22:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211g0020f60c3eqd13fu","content":"<h2 id=\"认识-webpack\"><a href=\"#认识-webpack\" class=\"headerlink\" title=\"认识 webpack\"></a>认识 <a href=\"https://webpack.docschina.org/\">webpack</a></h2><p>webpack 是前端一直流行很火的打包，构建工具。 所需要 node 环境 ，今天从零开始学习</p>\n<ul>\n<li>  entry 入口</li>\n<li>  output 出口</li>\n<li>  mode 环境 process.env.NODE_ENV 生产环境还是开发环境等等</li>\n<li>  loader 老生常谈的 用于各源代码进行转换 加载 引用等等</li>\n<li>  plugins 是我们在配置插件的地方。一般用来解决 loader 实现不了的工作</li>\n</ul>\n<h2 id=\"创建-webpack-工程\"><a href=\"#创建-webpack-工程\" class=\"headerlink\" title=\"创建 webpack 工程\"></a>创建 webpack 工程</h2><ol>\n<li>生成 package.json 文件<br>npm init -y</li>\n</ol>\n<p>2.安装 webpack webpack-cli</p>\n<p>npm i -D webpack webpack-cli</p>\n<p>-S 需要发布的<br>—D 不需要发布</p>\n<h2 id=\"webpack-零配置-默认打包\"><a href=\"#webpack-零配置-默认打包\" class=\"headerlink\" title=\"webpack 零配置 默认打包\"></a>webpack 零配置 默认打包</h2><p>只打包 js 压缩 生成 main.js<br>默认出口 dist/main.js<br>默认出口 src/index.js</p>\n<h2 id=\"安装-webpack-脚手架\"><a href=\"#安装-webpack-脚手架\" class=\"headerlink\" title=\"安装 webpack 脚手架\"></a>安装 webpack 脚手架</h2><p>npm i -D webpack-dev-server</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">devServer: &#123;<br>       <span class=\"hljs-regexp\">//</span> 配置webpack-dev-server<br>       port: <span class=\"hljs-number\">8083</span>, <span class=\"hljs-regexp\">//</span>配置服务器端口<br>       open: true, <span class=\"hljs-regexp\">//</span> 自动打开浏览器<br>       progress: true, <span class=\"hljs-regexp\">//</span>进度<br>       contentBase: <span class=\"hljs-string\">&#x27;./dist&#x27;</span>, <span class=\"hljs-regexp\">//</span>指定的web服务器根目录<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><p>webpack 默认只加载 js 不支持 css 加载<br>需要 css 装载器 css-loader style-loader 把 css 直接添加到 Html style 标签中</p>\n<h2 id=\"装载器执行顺序\"><a href=\"#装载器执行顺序\" class=\"headerlink\" title=\"装载器执行顺序\"></a>装载器执行顺序</h2><p>先加载 css 后整合到 html style 标签中 数组从后至前执行</p>\n<h2 id=\"less-装载器\"><a href=\"#less-装载器\" class=\"headerlink\" title=\"less 装载器\"></a>less 装载器</h2><p>npm i -D less-loader</p>\n<h2 id=\"css-抽取器\"><a href=\"#css-抽取器\" class=\"headerlink\" title=\"css 抽取器\"></a>css 抽取器</h2><p>npm i -D mini-css-extract-plugin<br>便于 css 压缩合并 处理缓存<br>npm i -D optimize-css-assets-webpack-plugin<br>js: terser-webpack-plugin</p>\n<h2 id=\"Es6-Es7-转-Es5\"><a href=\"#Es6-Es7-转-Es5\" class=\"headerlink\" title=\"Es6 Es7 转 Es5\"></a>Es6 Es7 转 Es5</h2><p>npm i -D babel-loader<br>@babel/core<br>@babel/preset-env 转换 Es5<br>@babel/plugin-proposal-decorators //装饰器</p>\n<h2 id=\"js-模块化\"><a href=\"#js-模块化\" class=\"headerlink\" title=\"js 模块化\"></a>js 模块化</h2><p>commonjs:<br>导出： module.exports 导入：require()<br>导出： export default xxx 导入 import xx from xxx</p>\n<h1 id=\"tree-shaking-去掉无引用代码\"><a href=\"#tree-shaking-去掉无引用代码\" class=\"headerlink\" title=\"tree shaking(去掉无引用代码)\"></a>tree shaking(去掉无引用代码)</h1><p>webpack4 有这个功能 支持当前 js 中无用的代码<br>webpack5 加强这个功能<br>a.js （有 无引用代码 ）去掉<br>只在生产模式下才会清掉</p>\n<h1 id=\"打包生成的-dist\"><a href=\"#打包生成的-dist\" class=\"headerlink\" title=\"打包生成的 dist\"></a>打包生成的 dist</h1><p>没有分类存储 js css 这些文件<br>在配置中分别输出的 filename 项中 配置 输出路径 js/index.js || css/index.css</p>\n<p>灵活配置 不同的 css /js 文件 将 js/index.js =&gt; js/[name].[hash].js</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">output: &#123;<br>      path: path.resolve(__dirname, <span class=\"hljs-string\">&#x27;dist&#x27;</span>), <span class=\"hljs-regexp\">//</span>出口<br>      filename: <span class=\"hljs-string\">&#x27;js/[name].[hash].js&#x27;</span>, <span class=\"hljs-regexp\">//</span>出口名称<br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n<p>因为浏览器的缓存机制 加上 hash 值 每次改动后的文件长度不一致 所以每次文件都会 确认使用的最新文件</p>\n<h1 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h1><p>使用 improt 引入的文件需要在使用的地方都要做一次引入</p>\n<p>使用 webpack 自带插件 webpack.ProvidepPlugin 可以设置全局变量<br>如 jq 类似第三方包项目中引用</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">plugins: [<br>       <span class=\"hljs-keyword\">new</span> webpack.ProvidePlugin(&#123;<br>           $: <span class=\"hljs-string\">&#x27;jqery&#x27;</span>,<br>       &#125;),<br>   ],<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置后，文件可以不用引入-，但打包体积不会变小\"><a href=\"#配置后，文件可以不用引入-，但打包体积不会变小\" class=\"headerlink\" title=\"配置后，文件可以不用引入 ，但打包体积不会变小\"></a>配置后，文件可以不用引入 ，但打包体积不会变小</h2><p>配置 externals 使用 不打包 文件</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">externals :&#123; <span class=\"hljs-regexp\">//</span>排除第三方<br>   jqery :<span class=\"hljs-string\">&#x27;$&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"图片导入\"><a href=\"#图片导入\" class=\"headerlink\" title=\"图片导入\"></a>图片导入</h1><p>使用装载器 引入 file-loader | url-loader<br>npm i -D file-loader url-loader<br>在 module 中配置</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">module :&#123;<br>    rules:[<br>         &#123;<br>                test: /\\.(jpg|png|jpeg)$/,<br>                use: &#123;<br>                    loader: <span class=\"hljs-string\">&#x27;file-loader&#x27;</span>,<br>                    options: &#123; esModule: false&#125;,//使用common<span class=\"hljs-selector-class\">.js</span> 方式<br>                &#125;,<br>            &#125;,<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用-html-withimg-loader\"><a href=\"#使用-html-withimg-loader\" class=\"headerlink\" title=\"使用 html-withimg-loader\"></a>使用 html-withimg-loader</h2><p>在 html 中加载图片</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">module :&#123;<br>    rules:[<br>         &#123;<br>                test: /\\.html$/,<br>                use: &#123; loader: <span class=\"hljs-string\">&#x27;html-with-loader&#x27;</span> &#125;,<br>            &#125;,<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"图片加载-url-loader\"><a href=\"#图片加载-url-loader\" class=\"headerlink\" title=\"图片加载 url-loader\"></a>图片加载 url-loader</h1><ol>\n<li>对图片小的 做 base64 转换</li>\n<li>对较大的图片 直接提供 url 下载 可以使用 cdn 优化 ，页面请求过多 减少请求次数</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">module :&#123;<br>    rules:[<br>         &#123;<br>                test: <span class=\"hljs-regexp\">/\\.(jpg|png|jpeg)$/</span>,<br>                use: &#123;<br>                    loader: <span class=\"hljs-string\">&#x27;url-loader&#x27;</span>,<br>                    options: &#123; esModule: false,<br>                    limt:<span class=\"hljs-number\">100</span>*<span class=\"hljs-number\">1024</span>,<span class=\"hljs-regexp\">//</span>指小于<span class=\"hljs-number\">100</span>KB的图片自动转换base64<br>                    &#125;,<span class=\"hljs-regexp\">//</span>使用common.js 方式<br>                &#125;,<br>            &#125;,<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"样式兼容\"><a href=\"#样式兼容\" class=\"headerlink\" title=\"样式兼容\"></a>样式兼容</h1><p>因为浏览器厂商不一致 导致样式的适配不一致<br>一些 c3 新属性 兼容程度不一致<br>npm i -D outoprefixer postcss-loader</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 新建postcss.config.js<br><br><span class=\"hljs-regexp\">//</span>在 page.json 文件中配置<br><span class=\"hljs-string\">&quot;browserslist&quot;</span>:[<br>    <span class=\"hljs-string\">&quot;&gt; 1%&quot;</span>, <span class=\"hljs-regexp\">//</span>使用率大于<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">100</span><br>    <span class=\"hljs-string\">&quot;last 100 versions&quot;</span>, <span class=\"hljs-regexp\">//</span>对当前浏览器<span class=\"hljs-number\">100</span>个版本转换<br>    <span class=\"hljs-string\">&quot;not ie &lt;= 8&quot;</span> <span class=\"hljs-regexp\">//</span>不转换ie8以下<br>]<br><span class=\"hljs-regexp\">//</span> webpack.config.js 中配置<br>&#123;<br>    test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>    use: [<br>        MiniCssExtractPlugin.loader,<br>        <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;less-loader&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;postcss-loader&#x27;</span>,<br>    ], <span class=\"hljs-regexp\">//</span>从后至前加载<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"认识-webpack\"><a href=\"#认识-webpack\" class=\"headerlink\" title=\"认识 webpack\"></a>认识 <a href=\"https://webpack.docschina.org/\">webpack</a></h2><p>webpack 是前端一直流行很火的打包，构建工具。 所需要 node 环境 ，今天从零开始学习</p>\n<ul>\n<li>  entry 入口</li>\n<li>  output 出口</li>\n<li>  mode 环境 process.env.NODE_ENV 生产环境还是开发环境等等</li>\n<li>  loader 老生常谈的 用于各源代码进行转换 加载 引用等等</li>\n<li>  plugins 是我们在配置插件的地方。一般用来解决 loader 实现不了的工作</li>\n</ul>\n<h2 id=\"创建-webpack-工程\"><a href=\"#创建-webpack-工程\" class=\"headerlink\" title=\"创建 webpack 工程\"></a>创建 webpack 工程</h2><ol>\n<li>生成 package.json 文件<br>npm init -y</li>\n</ol>\n<p>2.安装 webpack webpack-cli</p>\n<p>npm i -D webpack webpack-cli</p>\n<p>-S 需要发布的<br>—D 不需要发布</p>\n<h2 id=\"webpack-零配置-默认打包\"><a href=\"#webpack-零配置-默认打包\" class=\"headerlink\" title=\"webpack 零配置 默认打包\"></a>webpack 零配置 默认打包</h2><p>只打包 js 压缩 生成 main.js<br>默认出口 dist/main.js<br>默认出口 src/index.js</p>\n<h2 id=\"安装-webpack-脚手架\"><a href=\"#安装-webpack-脚手架\" class=\"headerlink\" title=\"安装 webpack 脚手架\"></a>安装 webpack 脚手架</h2><p>npm i -D webpack-dev-server</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">devServer: &#123;<br>       <span class=\"hljs-regexp\">//</span> 配置webpack-dev-server<br>       port: <span class=\"hljs-number\">8083</span>, <span class=\"hljs-regexp\">//</span>配置服务器端口<br>       open: true, <span class=\"hljs-regexp\">//</span> 自动打开浏览器<br>       progress: true, <span class=\"hljs-regexp\">//</span>进度<br>       contentBase: <span class=\"hljs-string\">&#x27;./dist&#x27;</span>, <span class=\"hljs-regexp\">//</span>指定的web服务器根目录<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><p>webpack 默认只加载 js 不支持 css 加载<br>需要 css 装载器 css-loader style-loader 把 css 直接添加到 Html style 标签中</p>\n<h2 id=\"装载器执行顺序\"><a href=\"#装载器执行顺序\" class=\"headerlink\" title=\"装载器执行顺序\"></a>装载器执行顺序</h2><p>先加载 css 后整合到 html style 标签中 数组从后至前执行</p>\n<h2 id=\"less-装载器\"><a href=\"#less-装载器\" class=\"headerlink\" title=\"less 装载器\"></a>less 装载器</h2><p>npm i -D less-loader</p>\n<h2 id=\"css-抽取器\"><a href=\"#css-抽取器\" class=\"headerlink\" title=\"css 抽取器\"></a>css 抽取器</h2><p>npm i -D mini-css-extract-plugin<br>便于 css 压缩合并 处理缓存<br>npm i -D optimize-css-assets-webpack-plugin<br>js: terser-webpack-plugin</p>\n<h2 id=\"Es6-Es7-转-Es5\"><a href=\"#Es6-Es7-转-Es5\" class=\"headerlink\" title=\"Es6 Es7 转 Es5\"></a>Es6 Es7 转 Es5</h2><p>npm i -D babel-loader<br>@babel/core<br>@babel/preset-env 转换 Es5<br>@babel/plugin-proposal-decorators //装饰器</p>\n<h2 id=\"js-模块化\"><a href=\"#js-模块化\" class=\"headerlink\" title=\"js 模块化\"></a>js 模块化</h2><p>commonjs:<br>导出： module.exports 导入：require()<br>导出： export default xxx 导入 import xx from xxx</p>\n<h1 id=\"tree-shaking-去掉无引用代码\"><a href=\"#tree-shaking-去掉无引用代码\" class=\"headerlink\" title=\"tree shaking(去掉无引用代码)\"></a>tree shaking(去掉无引用代码)</h1><p>webpack4 有这个功能 支持当前 js 中无用的代码<br>webpack5 加强这个功能<br>a.js （有 无引用代码 ）去掉<br>只在生产模式下才会清掉</p>\n<h1 id=\"打包生成的-dist\"><a href=\"#打包生成的-dist\" class=\"headerlink\" title=\"打包生成的 dist\"></a>打包生成的 dist</h1><p>没有分类存储 js css 这些文件<br>在配置中分别输出的 filename 项中 配置 输出路径 js/index.js || css/index.css</p>\n<p>灵活配置 不同的 css /js 文件 将 js/index.js =&gt; js/[name].[hash].js</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">output: &#123;<br>      path: path.resolve(__dirname, <span class=\"hljs-string\">&#x27;dist&#x27;</span>), <span class=\"hljs-regexp\">//</span>出口<br>      filename: <span class=\"hljs-string\">&#x27;js/[name].[hash].js&#x27;</span>, <span class=\"hljs-regexp\">//</span>出口名称<br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n<p>因为浏览器的缓存机制 加上 hash 值 每次改动后的文件长度不一致 所以每次文件都会 确认使用的最新文件</p>\n<h1 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h1><p>使用 improt 引入的文件需要在使用的地方都要做一次引入</p>\n<p>使用 webpack 自带插件 webpack.ProvidepPlugin 可以设置全局变量<br>如 jq 类似第三方包项目中引用</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">plugins: [<br>       <span class=\"hljs-keyword\">new</span> webpack.ProvidePlugin(&#123;<br>           $: <span class=\"hljs-string\">&#x27;jqery&#x27;</span>,<br>       &#125;),<br>   ],<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置后，文件可以不用引入-，但打包体积不会变小\"><a href=\"#配置后，文件可以不用引入-，但打包体积不会变小\" class=\"headerlink\" title=\"配置后，文件可以不用引入 ，但打包体积不会变小\"></a>配置后，文件可以不用引入 ，但打包体积不会变小</h2><p>配置 externals 使用 不打包 文件</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">externals :&#123; <span class=\"hljs-regexp\">//</span>排除第三方<br>   jqery :<span class=\"hljs-string\">&#x27;$&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"图片导入\"><a href=\"#图片导入\" class=\"headerlink\" title=\"图片导入\"></a>图片导入</h1><p>使用装载器 引入 file-loader | url-loader<br>npm i -D file-loader url-loader<br>在 module 中配置</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">module :&#123;<br>    rules:[<br>         &#123;<br>                test: /\\.(jpg|png|jpeg)$/,<br>                use: &#123;<br>                    loader: <span class=\"hljs-string\">&#x27;file-loader&#x27;</span>,<br>                    options: &#123; esModule: false&#125;,//使用common<span class=\"hljs-selector-class\">.js</span> 方式<br>                &#125;,<br>            &#125;,<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用-html-withimg-loader\"><a href=\"#使用-html-withimg-loader\" class=\"headerlink\" title=\"使用 html-withimg-loader\"></a>使用 html-withimg-loader</h2><p>在 html 中加载图片</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">module :&#123;<br>    rules:[<br>         &#123;<br>                test: /\\.html$/,<br>                use: &#123; loader: <span class=\"hljs-string\">&#x27;html-with-loader&#x27;</span> &#125;,<br>            &#125;,<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"图片加载-url-loader\"><a href=\"#图片加载-url-loader\" class=\"headerlink\" title=\"图片加载 url-loader\"></a>图片加载 url-loader</h1><ol>\n<li>对图片小的 做 base64 转换</li>\n<li>对较大的图片 直接提供 url 下载 可以使用 cdn 优化 ，页面请求过多 减少请求次数</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">module :&#123;<br>    rules:[<br>         &#123;<br>                test: <span class=\"hljs-regexp\">/\\.(jpg|png|jpeg)$/</span>,<br>                use: &#123;<br>                    loader: <span class=\"hljs-string\">&#x27;url-loader&#x27;</span>,<br>                    options: &#123; esModule: false,<br>                    limt:<span class=\"hljs-number\">100</span>*<span class=\"hljs-number\">1024</span>,<span class=\"hljs-regexp\">//</span>指小于<span class=\"hljs-number\">100</span>KB的图片自动转换base64<br>                    &#125;,<span class=\"hljs-regexp\">//</span>使用common.js 方式<br>                &#125;,<br>            &#125;,<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"样式兼容\"><a href=\"#样式兼容\" class=\"headerlink\" title=\"样式兼容\"></a>样式兼容</h1><p>因为浏览器厂商不一致 导致样式的适配不一致<br>一些 c3 新属性 兼容程度不一致<br>npm i -D outoprefixer postcss-loader</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 新建postcss.config.js<br><br><span class=\"hljs-regexp\">//</span>在 page.json 文件中配置<br><span class=\"hljs-string\">&quot;browserslist&quot;</span>:[<br>    <span class=\"hljs-string\">&quot;&gt; 1%&quot;</span>, <span class=\"hljs-regexp\">//</span>使用率大于<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">100</span><br>    <span class=\"hljs-string\">&quot;last 100 versions&quot;</span>, <span class=\"hljs-regexp\">//</span>对当前浏览器<span class=\"hljs-number\">100</span>个版本转换<br>    <span class=\"hljs-string\">&quot;not ie &lt;= 8&quot;</span> <span class=\"hljs-regexp\">//</span>不转换ie8以下<br>]<br><span class=\"hljs-regexp\">//</span> webpack.config.js 中配置<br>&#123;<br>    test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>    use: [<br>        MiniCssExtractPlugin.loader,<br>        <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;less-loader&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;postcss-loader&#x27;</span>,<br>    ], <span class=\"hljs-regexp\">//</span>从后至前加载<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"TS基础学习0到1","date":"2021-10-28T13:27:28.000Z","_content":"\n## 认识 [TypeScript](https://www.tslang.cn/docS)\n\n因为 JavaScript 的‘灵活’性，在编码过程中并不会报错，如：修改某个 number 类型 使用是用来做运算 ，变成了 string. 类似问题，参数不符预期。对于多人开发的大型项目，往往会出现这样那样的问题。而 typeScript 可以 解决这些问题，类型断言。将错误在编译过程中暴露出来，从而减少运行中报错问题\n\n## 安装\n\n`npm install -g typescript`\n可以安装 ts-node 直接运行.ts 文件 `npm install -g ts-node`\n\n#### 认识类型\n\n```\nlet isDone: boolean = false;\nlet num: number = 0o744;\nlet num1: number = 6;\n let str: string = '33';\n let str1: string = `sss${num}s`; //支持字符串模版\nlet arr1: number[] = [1, 2, 34, 5];\nlet arr2: string[] = ['1', '3', '2', '1'];\n// 泛型\nlet arr3: Array<number> = [1, 23, 45];\nlet arr4: Array<number | string> = [1, '23', 45];\n元组 Tuple\n\n```\n\n### interface（接口）\n\n```\ninterface IObj {\n    name: string;\n    age: number;\n}\nlet obj: IObj = {\n    name: '11',\n    age: 11,\n};\n\ninterface IPerson {\n    name?: string; //选填 ?\n    date: string; // 必填\n    sex: string;\n    action(): void;//没要求有 值类型\n    [propName: string]: any; //可添加任意属性\n}\nlet person1: IPerson = {\n    date: '2021-11-01',\n    sex: '1',\n    action: function () { },\n    name: '小小',\n    cat: '儿童车',\n};\n```\n\n### 函数\n\n```\n// 函数 输入类型 输出类型\nfunction f1(a: number, b: number): Array<number> {\n    return [a, b];\n}\n// void 无返回值\nfunction f2(a: number, b: number): void { }\n```\n\n### < T >泛型(T 指一个变量)\n\n```\nfunction f3<T>(a: T, b: T): Array<T> {\n    console.log([a, b]);\n    return [a, b];\n}\nf3<string>('1', '2');\n\n```\n\n### type(别名)\n\n```\n// type 别名\ntype sn = string | number;\nlet sn1: sn = 'sss';\nlet sn2: sn = 444;\n\ntype sn1 = string | number;\nlet arr8: sn1[] = [1, '22'];\nlet arr9: Array<sn1> = [1, '22']; //泛型写法\n```\n\n### enum(枚举)\n\n```\n// 枚举\nenum Color {\n    Red,\n    Green,\n    Blue,\n}\nlet c: Color = Color.Red;\nconsole.log(c);\n\nenum EColor {\n    '红色',\n    '蓝色',\n    '橙色',\n}\nlet color: EColor = EColor.橙色;\nconsole.log(color);\n```\n\n### 接口 泛型 类 常规用法\n\n```\ninterface ILength {\n    length: number;\n}\ninterface ISearchFun {\n    <T extends ILength>(a: T, b: T): boolean;\n}\nlet fun4: ISearchFun = function (a, b) {\n    return a == b;\n};\n\n// 类实现接口 implements 关键字\ninterface IObj3 {\n    name: string;\n    color: string;\n    action(): string;\n}\nclass Cat implements IObj3 {\n    name: string;\n    color: string;\n    constructor(name: string, color: string) {\n        this.name = name;\n        this.color = color;\n    }\n    eat() {\n        return this.name + '吃';\n    }\n    action() {\n        return '11';\n    }\n}\n\ninterface IO3<T extends ILength> {\n    (a: T, b: T): boolean\n}\nlet fun5: IO3<string> = (x, y) => x == y\n\nconsole.log(fun5('12', '12'));\n```\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-10/10-28Tsѧϰ.md","raw":"---\ntitle: TS基础学习0到1\ndate: 2021-10-28 21:27:28\ntags: 原生\ncategory: JavaScript\n---\n\n## 认识 [TypeScript](https://www.tslang.cn/docS)\n\n因为 JavaScript 的‘灵活’性，在编码过程中并不会报错，如：修改某个 number 类型 使用是用来做运算 ，变成了 string. 类似问题，参数不符预期。对于多人开发的大型项目，往往会出现这样那样的问题。而 typeScript 可以 解决这些问题，类型断言。将错误在编译过程中暴露出来，从而减少运行中报错问题\n\n## 安装\n\n`npm install -g typescript`\n可以安装 ts-node 直接运行.ts 文件 `npm install -g ts-node`\n\n#### 认识类型\n\n```\nlet isDone: boolean = false;\nlet num: number = 0o744;\nlet num1: number = 6;\n let str: string = '33';\n let str1: string = `sss${num}s`; //支持字符串模版\nlet arr1: number[] = [1, 2, 34, 5];\nlet arr2: string[] = ['1', '3', '2', '1'];\n// 泛型\nlet arr3: Array<number> = [1, 23, 45];\nlet arr4: Array<number | string> = [1, '23', 45];\n元组 Tuple\n\n```\n\n### interface（接口）\n\n```\ninterface IObj {\n    name: string;\n    age: number;\n}\nlet obj: IObj = {\n    name: '11',\n    age: 11,\n};\n\ninterface IPerson {\n    name?: string; //选填 ?\n    date: string; // 必填\n    sex: string;\n    action(): void;//没要求有 值类型\n    [propName: string]: any; //可添加任意属性\n}\nlet person1: IPerson = {\n    date: '2021-11-01',\n    sex: '1',\n    action: function () { },\n    name: '小小',\n    cat: '儿童车',\n};\n```\n\n### 函数\n\n```\n// 函数 输入类型 输出类型\nfunction f1(a: number, b: number): Array<number> {\n    return [a, b];\n}\n// void 无返回值\nfunction f2(a: number, b: number): void { }\n```\n\n### < T >泛型(T 指一个变量)\n\n```\nfunction f3<T>(a: T, b: T): Array<T> {\n    console.log([a, b]);\n    return [a, b];\n}\nf3<string>('1', '2');\n\n```\n\n### type(别名)\n\n```\n// type 别名\ntype sn = string | number;\nlet sn1: sn = 'sss';\nlet sn2: sn = 444;\n\ntype sn1 = string | number;\nlet arr8: sn1[] = [1, '22'];\nlet arr9: Array<sn1> = [1, '22']; //泛型写法\n```\n\n### enum(枚举)\n\n```\n// 枚举\nenum Color {\n    Red,\n    Green,\n    Blue,\n}\nlet c: Color = Color.Red;\nconsole.log(c);\n\nenum EColor {\n    '红色',\n    '蓝色',\n    '橙色',\n}\nlet color: EColor = EColor.橙色;\nconsole.log(color);\n```\n\n### 接口 泛型 类 常规用法\n\n```\ninterface ILength {\n    length: number;\n}\ninterface ISearchFun {\n    <T extends ILength>(a: T, b: T): boolean;\n}\nlet fun4: ISearchFun = function (a, b) {\n    return a == b;\n};\n\n// 类实现接口 implements 关键字\ninterface IObj3 {\n    name: string;\n    color: string;\n    action(): string;\n}\nclass Cat implements IObj3 {\n    name: string;\n    color: string;\n    constructor(name: string, color: string) {\n        this.name = name;\n        this.color = color;\n    }\n    eat() {\n        return this.name + '吃';\n    }\n    action() {\n        return '11';\n    }\n}\n\ninterface IO3<T extends ILength> {\n    (a: T, b: T): boolean\n}\nlet fun5: IO3<string> = (x, y) => x == y\n\nconsole.log(fun5('12', '12'));\n```\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","slug":"2021-10/10-28Tsѧϰ","published":1,"updated":"2021-12-09T14:18:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211g0024f60c4oqnhk4h","content":"<h2 id=\"认识-TypeScript\"><a href=\"#认识-TypeScript\" class=\"headerlink\" title=\"认识 TypeScript\"></a>认识 <a href=\"https://www.tslang.cn/docS\">TypeScript</a></h2><p>因为 JavaScript 的‘灵活’性，在编码过程中并不会报错，如：修改某个 number 类型 使用是用来做运算 ，变成了 string. 类似问题，参数不符预期。对于多人开发的大型项目，往往会出现这样那样的问题。而 typeScript 可以 解决这些问题，类型断言。将错误在编译过程中暴露出来，从而减少运行中报错问题</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>npm install -g typescript</code><br>可以安装 ts-node 直接运行.ts 文件 <code>npm install -g ts-node</code></p>\n<h4 id=\"认识类型\"><a href=\"#认识类型\" class=\"headerlink\" title=\"认识类型\"></a>认识类型</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">isDone</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">num</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0o744</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">num1</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">6</span>;<br> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">str</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;33&#x27;</span>;<br> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">str1</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">`sss<span class=\"hljs-subst\">$&#123;num&#125;</span>s`</span>; <span class=\"hljs-comment\">//支持字符串模版</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr1</span>: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">5</span>];<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr2</span>: <span class=\"hljs-built_in\">string</span>[] = [<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>];<br><span class=\"hljs-comment\">// 泛型</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr3</span>: <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-built_in\">number</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">45</span>];<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr4</span>: <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">string</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;23&#x27;</span>, <span class=\"hljs-number\">45</span>];<br>元组 <span class=\"hljs-title class_\">Tuple</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"interface（接口）\"><a href=\"#interface（接口）\" class=\"headerlink\" title=\"interface（接口）\"></a>interface（接口）</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IObj</span> &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;<br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">obj</span>: <span class=\"hljs-title class_\">IObj</span> = &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;11&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">11</span>,<br>&#125;;<br><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IPerson</span> &#123;<br>    name?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">//选填 ?</span><br>    <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// 必填</span><br>    <span class=\"hljs-attr\">sex</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-title function_\">action</span>(): <span class=\"hljs-built_in\">void</span>;<span class=\"hljs-comment\">//没要求有 值类型</span><br>    [<span class=\"hljs-attr\">propName</span>: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">any</span>; <span class=\"hljs-comment\">//可添加任意属性</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">person1</span>: <span class=\"hljs-title class_\">IPerson</span> = &#123;<br>    <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;2021-11-01&#x27;</span>,<br>    <span class=\"hljs-attr\">sex</span>: <span class=\"hljs-string\">&#x27;1&#x27;</span>,<br>    <span class=\"hljs-attr\">action</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123; &#125;,<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;小小&#x27;</span>,<br>    <span class=\"hljs-attr\">cat</span>: <span class=\"hljs-string\">&#x27;儿童车&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 函数 输入类型 输出类型</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f1</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-built_in\">number</span>&gt; &#123;<br>    <span class=\"hljs-keyword\">return</span> [a, b];<br>&#125;<br><span class=\"hljs-comment\">// void 无返回值</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f2</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">void</span> &#123; &#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"lt-T-gt-泛型-T-指一个变量\"><a href=\"#lt-T-gt-泛型-T-指一个变量\" class=\"headerlink\" title=\"&lt; T &gt;泛型(T 指一个变量)\"></a>&lt; T &gt;泛型(T 指一个变量)</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f3</span>&lt;<span class=\"hljs-title function_\">T</span>&gt;(<span class=\"hljs-params\">a: T, b: T</span>): <span class=\"hljs-title function_\">Array</span>&lt;<span class=\"hljs-title function_\">T</span>&gt; &#123;<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>([a, b]);<br>    <span class=\"hljs-keyword\">return</span> [a, b];<br>&#125;<br>f3&lt;string&gt;(<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>);<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"type-别名\"><a href=\"#type-别名\" class=\"headerlink\" title=\"type(别名)\"></a>type(别名)</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// type 别名</span><br><span class=\"hljs-keyword\">type</span> sn = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">sn1</span>: sn = <span class=\"hljs-string\">&#x27;sss&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">sn2</span>: sn = <span class=\"hljs-number\">444</span>;<br><br><span class=\"hljs-keyword\">type</span> sn1 = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr8</span>: sn1[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;22&#x27;</span>];<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr9</span>: <span class=\"hljs-title class_\">Array</span>&lt;sn1&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;22&#x27;</span>]; <span class=\"hljs-comment\">//泛型写法</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"enum-枚举\"><a href=\"#enum-枚举\" class=\"headerlink\" title=\"enum(枚举)\"></a>enum(枚举)</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 枚举</span><br><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Color</span> &#123;<br>    <span class=\"hljs-title class_\">Red</span>,<br>    <span class=\"hljs-title class_\">Green</span>,<br>    <span class=\"hljs-title class_\">Blue</span>,<br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">c</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Red</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(c);<br><br><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">EColor</span> &#123;<br>    <span class=\"hljs-string\">&#x27;红色&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;蓝色&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;橙色&#x27;</span>,<br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">EColor</span> = <span class=\"hljs-title class_\">EColor</span>.橙色;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(color);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"接口-泛型-类-常规用法\"><a href=\"#接口-泛型-类-常规用法\" class=\"headerlink\" title=\"接口 泛型 类 常规用法\"></a>接口 泛型 类 常规用法</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ILength</span> &#123;<br>    <span class=\"hljs-attr\">length</span>: <span class=\"hljs-built_in\">number</span>;<br>&#125;<br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ISearchFun</span> &#123;<br>    &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ILength</span>&gt;(<span class=\"hljs-attr\">a</span>: T, <span class=\"hljs-attr\">b</span>: T): <span class=\"hljs-built_in\">boolean</span>;<br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">fun4</span>: <span class=\"hljs-title class_\">ISearchFun</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> a == b;<br>&#125;;<br><br><span class=\"hljs-comment\">// 类实现接口 implements 关键字</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IObj3</span> &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-title function_\">action</span>(): <span class=\"hljs-built_in\">string</span>;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IObj3</span> &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span>, color: <span class=\"hljs-built_in\">string</span></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">color</span> = color;<br>    &#125;<br>    <span class=\"hljs-title function_\">eat</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&#x27;吃&#x27;</span>;<br>    &#125;<br>    <span class=\"hljs-title function_\">action</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;11&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IO3</span>&lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ILength</span>&gt; &#123;<br>    (<span class=\"hljs-attr\">a</span>: T, <span class=\"hljs-attr\">b</span>: T): <span class=\"hljs-built_in\">boolean</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">fun5</span>: <span class=\"hljs-title class_\">IO3</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">x, y</span>) =&gt;</span> x == y<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">fun5</span>(<span class=\"hljs-string\">&#x27;12&#x27;</span>, <span class=\"hljs-string\">&#x27;12&#x27;</span>));<br></code></pre></td></tr></table></figure>\n\n<p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"认识-TypeScript\"><a href=\"#认识-TypeScript\" class=\"headerlink\" title=\"认识 TypeScript\"></a>认识 <a href=\"https://www.tslang.cn/docS\">TypeScript</a></h2><p>因为 JavaScript 的‘灵活’性，在编码过程中并不会报错，如：修改某个 number 类型 使用是用来做运算 ，变成了 string. 类似问题，参数不符预期。对于多人开发的大型项目，往往会出现这样那样的问题。而 typeScript 可以 解决这些问题，类型断言。将错误在编译过程中暴露出来，从而减少运行中报错问题</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>npm install -g typescript</code><br>可以安装 ts-node 直接运行.ts 文件 <code>npm install -g ts-node</code></p>\n<h4 id=\"认识类型\"><a href=\"#认识类型\" class=\"headerlink\" title=\"认识类型\"></a>认识类型</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">isDone</span>: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">false</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">num</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0o744</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">num1</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">6</span>;<br> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">str</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;33&#x27;</span>;<br> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">str1</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">`sss<span class=\"hljs-subst\">$&#123;num&#125;</span>s`</span>; <span class=\"hljs-comment\">//支持字符串模版</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr1</span>: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">5</span>];<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr2</span>: <span class=\"hljs-built_in\">string</span>[] = [<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>];<br><span class=\"hljs-comment\">// 泛型</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr3</span>: <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-built_in\">number</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">45</span>];<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr4</span>: <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">string</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;23&#x27;</span>, <span class=\"hljs-number\">45</span>];<br>元组 <span class=\"hljs-title class_\">Tuple</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"interface（接口）\"><a href=\"#interface（接口）\" class=\"headerlink\" title=\"interface（接口）\"></a>interface（接口）</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IObj</span> &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;<br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">obj</span>: <span class=\"hljs-title class_\">IObj</span> = &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;11&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">11</span>,<br>&#125;;<br><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IPerson</span> &#123;<br>    name?: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">//选填 ?</span><br>    <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// 必填</span><br>    <span class=\"hljs-attr\">sex</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-title function_\">action</span>(): <span class=\"hljs-built_in\">void</span>;<span class=\"hljs-comment\">//没要求有 值类型</span><br>    [<span class=\"hljs-attr\">propName</span>: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">any</span>; <span class=\"hljs-comment\">//可添加任意属性</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">person1</span>: <span class=\"hljs-title class_\">IPerson</span> = &#123;<br>    <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;2021-11-01&#x27;</span>,<br>    <span class=\"hljs-attr\">sex</span>: <span class=\"hljs-string\">&#x27;1&#x27;</span>,<br>    <span class=\"hljs-attr\">action</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123; &#125;,<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;小小&#x27;</span>,<br>    <span class=\"hljs-attr\">cat</span>: <span class=\"hljs-string\">&#x27;儿童车&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 函数 输入类型 输出类型</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f1</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-built_in\">number</span>&gt; &#123;<br>    <span class=\"hljs-keyword\">return</span> [a, b];<br>&#125;<br><span class=\"hljs-comment\">// void 无返回值</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f2</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">void</span> &#123; &#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"lt-T-gt-泛型-T-指一个变量\"><a href=\"#lt-T-gt-泛型-T-指一个变量\" class=\"headerlink\" title=\"&lt; T &gt;泛型(T 指一个变量)\"></a>&lt; T &gt;泛型(T 指一个变量)</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f3</span>&lt;<span class=\"hljs-title function_\">T</span>&gt;(<span class=\"hljs-params\">a: T, b: T</span>): <span class=\"hljs-title function_\">Array</span>&lt;<span class=\"hljs-title function_\">T</span>&gt; &#123;<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>([a, b]);<br>    <span class=\"hljs-keyword\">return</span> [a, b];<br>&#125;<br>f3&lt;string&gt;(<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>);<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"type-别名\"><a href=\"#type-别名\" class=\"headerlink\" title=\"type(别名)\"></a>type(别名)</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// type 别名</span><br><span class=\"hljs-keyword\">type</span> sn = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">sn1</span>: sn = <span class=\"hljs-string\">&#x27;sss&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">sn2</span>: sn = <span class=\"hljs-number\">444</span>;<br><br><span class=\"hljs-keyword\">type</span> sn1 = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr8</span>: sn1[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;22&#x27;</span>];<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">arr9</span>: <span class=\"hljs-title class_\">Array</span>&lt;sn1&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;22&#x27;</span>]; <span class=\"hljs-comment\">//泛型写法</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"enum-枚举\"><a href=\"#enum-枚举\" class=\"headerlink\" title=\"enum(枚举)\"></a>enum(枚举)</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 枚举</span><br><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Color</span> &#123;<br>    <span class=\"hljs-title class_\">Red</span>,<br>    <span class=\"hljs-title class_\">Green</span>,<br>    <span class=\"hljs-title class_\">Blue</span>,<br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">c</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Red</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(c);<br><br><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">EColor</span> &#123;<br>    <span class=\"hljs-string\">&#x27;红色&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;蓝色&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;橙色&#x27;</span>,<br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">EColor</span> = <span class=\"hljs-title class_\">EColor</span>.橙色;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(color);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"接口-泛型-类-常规用法\"><a href=\"#接口-泛型-类-常规用法\" class=\"headerlink\" title=\"接口 泛型 类 常规用法\"></a>接口 泛型 类 常规用法</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ILength</span> &#123;<br>    <span class=\"hljs-attr\">length</span>: <span class=\"hljs-built_in\">number</span>;<br>&#125;<br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ISearchFun</span> &#123;<br>    &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ILength</span>&gt;(<span class=\"hljs-attr\">a</span>: T, <span class=\"hljs-attr\">b</span>: T): <span class=\"hljs-built_in\">boolean</span>;<br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">fun4</span>: <span class=\"hljs-title class_\">ISearchFun</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> a == b;<br>&#125;;<br><br><span class=\"hljs-comment\">// 类实现接口 implements 关键字</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IObj3</span> &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-title function_\">action</span>(): <span class=\"hljs-built_in\">string</span>;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IObj3</span> &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-built_in\">string</span>;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span>, color: <span class=\"hljs-built_in\">string</span></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">color</span> = color;<br>    &#125;<br>    <span class=\"hljs-title function_\">eat</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&#x27;吃&#x27;</span>;<br>    &#125;<br>    <span class=\"hljs-title function_\">action</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;11&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IO3</span>&lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ILength</span>&gt; &#123;<br>    (<span class=\"hljs-attr\">a</span>: T, <span class=\"hljs-attr\">b</span>: T): <span class=\"hljs-built_in\">boolean</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">fun5</span>: <span class=\"hljs-title class_\">IO3</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">x, y</span>) =&gt;</span> x == y<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">fun5</span>(<span class=\"hljs-string\">&#x27;12&#x27;</span>, <span class=\"hljs-string\">&#x27;12&#x27;</span>));<br></code></pre></td></tr></table></figure>\n\n<p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"模板","date":"2021-06-28T13:27:28.000Z","_content":"\n### 实现效果\n\n浏览文本，当即将浏览到图片时，进行加载动画。\n\n#### 主要\n\n> css 部分\n\n-   scale 控制图片缩放\n-   translateX 来控制左右移动\n\n> js 部分\n\n-   window.scrolly 纵向滚动距离\n-   window.innerHeight viewport 部分高度\n-   el.height 节点的高度\n-   el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口\n\n> `debounce` 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。\n\n### 在线地址\n\n### 初始代码\n\n### 实例代码\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-11/12-07认识node.md","raw":"---\ntitle: 模板\ndate: 2021-06-28 21:27:28\ntags: 原生\ncategory: JavaScript\n---\n\n### 实现效果\n\n浏览文本，当即将浏览到图片时，进行加载动画。\n\n#### 主要\n\n> css 部分\n\n-   scale 控制图片缩放\n-   translateX 来控制左右移动\n\n> js 部分\n\n-   window.scrolly 纵向滚动距离\n-   window.innerHeight viewport 部分高度\n-   el.height 节点的高度\n-   el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口\n\n> `debounce` 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。\n\n### 在线地址\n\n### 初始代码\n\n### 实例代码\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","slug":"2021-11/12-07认识node","published":1,"updated":"2021-12-09T14:11:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211h0028f60c9at154ks","content":"<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h3><p>浏览文本，当即将浏览到图片时，进行加载动画。</p>\n<h4 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h4><blockquote>\n<p>css 部分</p>\n</blockquote>\n<ul>\n<li>  scale 控制图片缩放</li>\n<li>  translateX 来控制左右移动</li>\n</ul>\n<blockquote>\n<p>js 部分</p>\n</blockquote>\n<ul>\n<li>  window.scrolly 纵向滚动距离</li>\n<li>  window.innerHeight viewport 部分高度</li>\n<li>  el.height 节点的高度</li>\n<li>  el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口</li>\n</ul>\n<blockquote>\n<p><code>debounce</code> 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。</p>\n</blockquote>\n<h3 id=\"在线地址\"><a href=\"#在线地址\" class=\"headerlink\" title=\"在线地址\"></a>在线地址</h3><h3 id=\"初始代码\"><a href=\"#初始代码\" class=\"headerlink\" title=\"初始代码\"></a>初始代码</h3><h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h3><p>浏览文本，当即将浏览到图片时，进行加载动画。</p>\n<h4 id=\"主要\"><a href=\"#主要\" class=\"headerlink\" title=\"主要\"></a>主要</h4><blockquote>\n<p>css 部分</p>\n</blockquote>\n<ul>\n<li>  scale 控制图片缩放</li>\n<li>  translateX 来控制左右移动</li>\n</ul>\n<blockquote>\n<p>js 部分</p>\n</blockquote>\n<ul>\n<li>  window.scrolly 纵向滚动距离</li>\n<li>  window.innerHeight viewport 部分高度</li>\n<li>  el.height 节点的高度</li>\n<li>  el.offsetTop 当前元素节点至顶的距离 相对于浏览器窗口</li>\n</ul>\n<blockquote>\n<p><code>debounce</code> 的作用： 降低事件监听的频率，使用了 Lodash 中的 debounce 方法。</p>\n</blockquote>\n<h3 id=\"在线地址\"><a href=\"#在线地址\" class=\"headerlink\" title=\"在线地址\"></a>在线地址</h3><h3 id=\"初始代码\"><a href=\"#初始代码\" class=\"headerlink\" title=\"初始代码\"></a>初始代码</h3><h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"封装一个表单验证（针对）","date":"2021-12-06T14:27:28.000Z","_content":"\n### 解决问题？\n\n由于在工作中，公司 h5 项目 对 vant 的 表单验证 不太理想，业务需要 toast 提示验证，而非表单中的函数验证。所以在验证校验时，使用了大量的 if else 判断。代码臃肿 重复 。这些面向过程的编码行为逻辑又不能进行封装。\n\n```\n            var name = this.username.value;\n            var pwd1 = this.password1.value;\n            var pwd2 = this.password2.value;\n            var tel = this.phone.value;\n            if (name.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('用户名不能为空')\n                return false\n            }\n            if (pwd1.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('密码不能为空')\n                return false\n            }\n             if (pwd2.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('确认密码不能为空')\n                return false\n            }\n            if (pwd2 !== pwd1) {\n                alert('确认密码与原密码不相同！')\n                return false\n            }\n            if (tel.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('手机号码不能为空')\n                return false\n            }\n            if (!/^1[3,4,5,7,8,9][0-9]\\d{8}$/.test(tel)) {\n                alert('手机号码格式不正确')\n                return false\n            }\n\n```\n\n#### 思路\n\n-   首先将 定义一个对像 rules 将校验规则存起来\n-   将逻辑进行抽离 校验值 与 Dom 无关（因为不用将某项的提示信息放到当前项）\n-   推理，使用方式 `{ formKey:[{verifyName：'isRequired',verifyVal:'11',msg:'提示信息'}] }`（这里将校验值传递进来，便于处理，不用通过虚拟 dom 获取 ）\n-   封装处理方法 获取对象中 key 的数组 每一项的校验名称、值、错误提示 一一比对\n\n### 实现\n\n```\n            function Validate() {}\n            // 四个功能函数， 通过外部 调用rules[名称]获取\n            Validate.prototype.rules = {\n                // 是否手机号\n                isMobile: function (str) {\n                    let rule = /^1[3,4,5,7,8,9][0-9]\\d{8}$/;\n                    return rule.test(str);\n                },\n                // 是否必填\n                isRequired: function (str) {\n                    // 除去首尾空格\n                    let value = str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n                    return value !== \"\";\n                },\n                // 最小长度\n                minLength: function (str, length) {\n                    let strLength = str.length;\n                    return strLength >= length;\n                },\n                // 是否相等\n                isEqual: function () {\n                    // 可以接收多个参数比较\n                    let args = Array.prototype.slice.call(arguments);\n                    // 取首项与后面所有的项比较，如果每个都相等，就返回true\n                    let equal = args.every(function (value) {\n                        return value === args[0];\n                    })\n                    return equal;\n                }\n            }\n            Validate.prototype.test = function (rules) {\n                let v = this;\n                let valid; // 保存校验结果\n                // 外部传递的规则配置参数rules\n                for (let key in rules) {\n                    for (let i = 0; i < rules[key].length; i++) { // 遍历每一个字段的校验规则\n                        let ruleName = rules[key][i].rule; // 规则名\n                        let value = rules[key][i].value; // 获校验值\n                        if (!Array.isArray(value)) { // 统一校验值为数组类型\n                            value = new Array(value)\n                        }\n                        let result = v.rules[ruleName].apply(v, value); // 调用校验规则方法进行校验\n                        if (!result) { // 如果校验不通过，就获取校验结果信息，并立即跳出循环不再执行，节约消耗\n                            valid = {\n                                errValue: key,\n                                errMsg: rules[key][i].message\n                            }\n                            break;\n                        }\n                    }\n                    if (valid) { // 如果有了校验结果，代表存在不通过的字段，则立即停止循环，节约消耗\n                        break;\n                    }\n                }\n                return valid; // 把校验结果返回出去\n            }\n            // 封装之后 我们只需每次将构造函数实例话 进行这样的穿参\n            let formData = document.getElementById('form')\n            formData.onsubmit = function () {\n                event.preventDefault()\n                let validator = new Validate();\n                // 验证规则 抽离出来， 便于更为灵活的应用验证器\n                //  验证器已经和DOM解耦，只关心规则和数据以及message\n                let res = validator.test({ // 和id一致才能获取\n                    username: [{\n                        rule: 'isRequired',\n                        value: this.username.value,\n                        message: '用户名不能为空！'\n                    }],\n                    password1: [{\n                            rule: 'isRequired',\n                            value: this.password1.value,\n                            message: '密码不能为空！'\n                        },\n                        {\n                            rule: 'minLength',\n                            value: [this.password1.value, 6],\n                            message: '密码长度不能小于6个字符！'\n                        }\n                    ],\n                    password2: [{\n                            rule: 'isRequired',\n                            value: this.password2.value,\n                            message: '确认密码不能为空！'\n                        },\n                        {\n                            rule: 'minLength',\n                            value: [this.password2.value, 6],\n                            message: '确认密码长度不能小于6个字符！'\n                        },\n                        {\n                            rule: 'isEqual',\n                            value: [this.password2.value, this.password1.value],\n                            message: '确认密码与原密码不相同！'\n                        }\n                    ],\n                })\n                if (res) {\n                    console.log(res)\n                    this.$tost.error(res)\n                } else {\n                    console.log('校验通过')\n                }\n            }\n```\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","source":"_posts/2021-12/12-06表单校验封装.md","raw":"---\ntitle: 封装一个表单验证（针对）\ndate: 2021-12-06 22:27:28\ntags: 原生\ncategory: JavaScript\n---\n\n### 解决问题？\n\n由于在工作中，公司 h5 项目 对 vant 的 表单验证 不太理想，业务需要 toast 提示验证，而非表单中的函数验证。所以在验证校验时，使用了大量的 if else 判断。代码臃肿 重复 。这些面向过程的编码行为逻辑又不能进行封装。\n\n```\n            var name = this.username.value;\n            var pwd1 = this.password1.value;\n            var pwd2 = this.password2.value;\n            var tel = this.phone.value;\n            if (name.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('用户名不能为空')\n                return false\n            }\n            if (pwd1.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('密码不能为空')\n                return false\n            }\n             if (pwd2.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('确认密码不能为空')\n                return false\n            }\n            if (pwd2 !== pwd1) {\n                alert('确认密码与原密码不相同！')\n                return false\n            }\n            if (tel.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('手机号码不能为空')\n                return false\n            }\n            if (!/^1[3,4,5,7,8,9][0-9]\\d{8}$/.test(tel)) {\n                alert('手机号码格式不正确')\n                return false\n            }\n\n```\n\n#### 思路\n\n-   首先将 定义一个对像 rules 将校验规则存起来\n-   将逻辑进行抽离 校验值 与 Dom 无关（因为不用将某项的提示信息放到当前项）\n-   推理，使用方式 `{ formKey:[{verifyName：'isRequired',verifyVal:'11',msg:'提示信息'}] }`（这里将校验值传递进来，便于处理，不用通过虚拟 dom 获取 ）\n-   封装处理方法 获取对象中 key 的数组 每一项的校验名称、值、错误提示 一一比对\n\n### 实现\n\n```\n            function Validate() {}\n            // 四个功能函数， 通过外部 调用rules[名称]获取\n            Validate.prototype.rules = {\n                // 是否手机号\n                isMobile: function (str) {\n                    let rule = /^1[3,4,5,7,8,9][0-9]\\d{8}$/;\n                    return rule.test(str);\n                },\n                // 是否必填\n                isRequired: function (str) {\n                    // 除去首尾空格\n                    let value = str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n                    return value !== \"\";\n                },\n                // 最小长度\n                minLength: function (str, length) {\n                    let strLength = str.length;\n                    return strLength >= length;\n                },\n                // 是否相等\n                isEqual: function () {\n                    // 可以接收多个参数比较\n                    let args = Array.prototype.slice.call(arguments);\n                    // 取首项与后面所有的项比较，如果每个都相等，就返回true\n                    let equal = args.every(function (value) {\n                        return value === args[0];\n                    })\n                    return equal;\n                }\n            }\n            Validate.prototype.test = function (rules) {\n                let v = this;\n                let valid; // 保存校验结果\n                // 外部传递的规则配置参数rules\n                for (let key in rules) {\n                    for (let i = 0; i < rules[key].length; i++) { // 遍历每一个字段的校验规则\n                        let ruleName = rules[key][i].rule; // 规则名\n                        let value = rules[key][i].value; // 获校验值\n                        if (!Array.isArray(value)) { // 统一校验值为数组类型\n                            value = new Array(value)\n                        }\n                        let result = v.rules[ruleName].apply(v, value); // 调用校验规则方法进行校验\n                        if (!result) { // 如果校验不通过，就获取校验结果信息，并立即跳出循环不再执行，节约消耗\n                            valid = {\n                                errValue: key,\n                                errMsg: rules[key][i].message\n                            }\n                            break;\n                        }\n                    }\n                    if (valid) { // 如果有了校验结果，代表存在不通过的字段，则立即停止循环，节约消耗\n                        break;\n                    }\n                }\n                return valid; // 把校验结果返回出去\n            }\n            // 封装之后 我们只需每次将构造函数实例话 进行这样的穿参\n            let formData = document.getElementById('form')\n            formData.onsubmit = function () {\n                event.preventDefault()\n                let validator = new Validate();\n                // 验证规则 抽离出来， 便于更为灵活的应用验证器\n                //  验证器已经和DOM解耦，只关心规则和数据以及message\n                let res = validator.test({ // 和id一致才能获取\n                    username: [{\n                        rule: 'isRequired',\n                        value: this.username.value,\n                        message: '用户名不能为空！'\n                    }],\n                    password1: [{\n                            rule: 'isRequired',\n                            value: this.password1.value,\n                            message: '密码不能为空！'\n                        },\n                        {\n                            rule: 'minLength',\n                            value: [this.password1.value, 6],\n                            message: '密码长度不能小于6个字符！'\n                        }\n                    ],\n                    password2: [{\n                            rule: 'isRequired',\n                            value: this.password2.value,\n                            message: '确认密码不能为空！'\n                        },\n                        {\n                            rule: 'minLength',\n                            value: [this.password2.value, 6],\n                            message: '确认密码长度不能小于6个字符！'\n                        },\n                        {\n                            rule: 'isEqual',\n                            value: [this.password2.value, this.password1.value],\n                            message: '确认密码与原密码不相同！'\n                        }\n                    ],\n                })\n                if (res) {\n                    console.log(res)\n                    this.$tost.error(res)\n                } else {\n                    console.log('校验通过')\n                }\n            }\n```\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","slug":"2021-12/12-06表单校验封装","published":1,"updated":"2021-12-09T14:11:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211i002cf60c6c9ce1ha","content":"<h3 id=\"解决问题？\"><a href=\"#解决问题？\" class=\"headerlink\" title=\"解决问题？\"></a>解决问题？</h3><p>由于在工作中，公司 h5 项目 对 vant 的 表单验证 不太理想，业务需要 toast 提示验证，而非表单中的函数验证。所以在验证校验时，使用了大量的 if else 判断。代码臃肿 重复 。这些面向过程的编码行为逻辑又不能进行封装。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> name = this.username.value;<br><span class=\"hljs-keyword\">var</span> pwd1 = this.password1.value;<br><span class=\"hljs-keyword\">var</span> pwd2 = this.password2.value;<br><span class=\"hljs-keyword\">var</span> tel = this.phone.value;<br><span class=\"hljs-keyword\">if</span> (name.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;用户名不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (pwd1.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;密码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br> <span class=\"hljs-keyword\">if</span> (pwd2.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;确认密码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (pwd2 !== pwd1) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;确认密码与原密码不相同！&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (tel.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;手机号码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/^1[3,4,5,7,8,9][0-9]\\d&#123;8&#125;$/</span>.test(tel)) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;手机号码格式不正确&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>  首先将 定义一个对像 rules 将校验规则存起来</li>\n<li>  将逻辑进行抽离 校验值 与 Dom 无关（因为不用将某项的提示信息放到当前项）</li>\n<li>  推理，使用方式 <code>&#123; formKey:[&#123;verifyName：&#39;isRequired&#39;,verifyVal:&#39;11&#39;,msg:&#39;提示信息&#39;&#125;] &#125;</code>（这里将校验值传递进来，便于处理，不用通过虚拟 dom 获取 ）</li>\n<li>  封装处理方法 获取对象中 key 的数组 每一项的校验名称、值、错误提示 一一比对</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Validate</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br><span class=\"hljs-comment\">// 四个功能函数， 通过外部 调用rules[名称]获取</span><br><span class=\"hljs-title class_\">Validate</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">rules</span> = &#123;<br>    <span class=\"hljs-comment\">// 是否手机号</span><br>    <span class=\"hljs-attr\">isMobile</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> rule = <span class=\"hljs-regexp\">/^1[3,4,5,7,8,9][0-9]\\d&#123;8&#125;$/</span>;<br>        <span class=\"hljs-keyword\">return</span> rule.<span class=\"hljs-title function_\">test</span>(str);<br>    &#125;,<br>    <span class=\"hljs-comment\">// 是否必填</span><br>    <span class=\"hljs-attr\">isRequired</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) &#123;<br>        <span class=\"hljs-comment\">// 除去首尾空格</span><br>        <span class=\"hljs-keyword\">let</span> value = str.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> value !== <span class=\"hljs-string\">&quot;&quot;</span>;<br>    &#125;,<br>    <span class=\"hljs-comment\">// 最小长度</span><br>    <span class=\"hljs-attr\">minLength</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str, length</span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> strLength = str.<span class=\"hljs-property\">length</span>;<br>        <span class=\"hljs-keyword\">return</span> strLength &gt;= length;<br>    &#125;,<br>    <span class=\"hljs-comment\">// 是否相等</span><br>    <span class=\"hljs-attr\">isEqual</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-comment\">// 可以接收多个参数比较</span><br>        <span class=\"hljs-keyword\">let</span> args = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>);<br>        <span class=\"hljs-comment\">// 取首项与后面所有的项比较，如果每个都相等，就返回true</span><br>        <span class=\"hljs-keyword\">let</span> equal = args.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> value === args[<span class=\"hljs-number\">0</span>];<br>        &#125;)<br>        <span class=\"hljs-keyword\">return</span> equal;<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">Validate</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">test</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">rules</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-variable language_\">this</span>;<br>    <span class=\"hljs-keyword\">let</span> valid; <span class=\"hljs-comment\">// 保存校验结果</span><br>    <span class=\"hljs-comment\">// 外部传递的规则配置参数rules</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> rules) &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; rules[key].<span class=\"hljs-property\">length</span>; i++) &#123; <span class=\"hljs-comment\">// 遍历每一个字段的校验规则</span><br>            <span class=\"hljs-keyword\">let</span> ruleName = rules[key][i].<span class=\"hljs-property\">rule</span>; <span class=\"hljs-comment\">// 规则名</span><br>            <span class=\"hljs-keyword\">let</span> value = rules[key][i].<span class=\"hljs-property\">value</span>; <span class=\"hljs-comment\">// 获校验值</span><br>            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(value)) &#123; <span class=\"hljs-comment\">// 统一校验值为数组类型</span><br>                value = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(value)<br>            &#125;<br>            <span class=\"hljs-keyword\">let</span> result = v.<span class=\"hljs-property\">rules</span>[ruleName].<span class=\"hljs-title function_\">apply</span>(v, value); <span class=\"hljs-comment\">// 调用校验规则方法进行校验</span><br>            <span class=\"hljs-keyword\">if</span> (!result) &#123; <span class=\"hljs-comment\">// 如果校验不通过，就获取校验结果信息，并立即跳出循环不再执行，节约消耗</span><br>                valid = &#123;<br>                    <span class=\"hljs-attr\">errValue</span>: key,<br>                    <span class=\"hljs-attr\">errMsg</span>: rules[key][i].<span class=\"hljs-property\">message</span><br>                &#125;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (valid) &#123; <span class=\"hljs-comment\">// 如果有了校验结果，代表存在不通过的字段，则立即停止循环，节约消耗</span><br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> valid; <span class=\"hljs-comment\">// 把校验结果返回出去</span><br>&#125;<br><span class=\"hljs-comment\">// 封装之后 我们只需每次将构造函数实例话 进行这样的穿参</span><br><span class=\"hljs-keyword\">let</span> formData = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;form&#x27;</span>)<br>formData.<span class=\"hljs-property\">onsubmit</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    event.<span class=\"hljs-title function_\">preventDefault</span>()<br>    <span class=\"hljs-keyword\">let</span> validator = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Validate</span>();<br>    <span class=\"hljs-comment\">// 验证规则 抽离出来， 便于更为灵活的应用验证器</span><br>    <span class=\"hljs-comment\">//  验证器已经和DOM解耦，只关心规则和数据以及message</span><br>    <span class=\"hljs-keyword\">let</span> res = validator.<span class=\"hljs-title function_\">test</span>(&#123; <span class=\"hljs-comment\">// 和id一致才能获取</span><br>        <span class=\"hljs-attr\">username</span>: [&#123;<br>            <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">username</span>.<span class=\"hljs-property\">value</span>,<br>            <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;用户名不能为空！&#x27;</span><br>        &#125;],<br>        <span class=\"hljs-attr\">password1</span>: [&#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>,<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;密码不能为空！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;minLength&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-number\">6</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;密码长度不能小于6个字符！&#x27;</span><br>            &#125;<br>        ],<br>        <span class=\"hljs-attr\">password2</span>: [&#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>,<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码不能为空！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;minLength&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-number\">6</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码长度不能小于6个字符！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isEqual&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码与原密码不相同！&#x27;</span><br>            &#125;<br>        ],<br>    &#125;)<br>    <span class=\"hljs-keyword\">if</span> (res) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$tost</span>.<span class=\"hljs-title function_\">error</span>(res)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;校验通过&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"解决问题？\"><a href=\"#解决问题？\" class=\"headerlink\" title=\"解决问题？\"></a>解决问题？</h3><p>由于在工作中，公司 h5 项目 对 vant 的 表单验证 不太理想，业务需要 toast 提示验证，而非表单中的函数验证。所以在验证校验时，使用了大量的 if else 判断。代码臃肿 重复 。这些面向过程的编码行为逻辑又不能进行封装。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> name = this.username.value;<br><span class=\"hljs-keyword\">var</span> pwd1 = this.password1.value;<br><span class=\"hljs-keyword\">var</span> pwd2 = this.password2.value;<br><span class=\"hljs-keyword\">var</span> tel = this.phone.value;<br><span class=\"hljs-keyword\">if</span> (name.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;用户名不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (pwd1.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;密码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br> <span class=\"hljs-keyword\">if</span> (pwd2.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;确认密码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (pwd2 !== pwd1) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;确认密码与原密码不相同！&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (tel.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;手机号码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/^1[3,4,5,7,8,9][0-9]\\d&#123;8&#125;$/</span>.test(tel)) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;手机号码格式不正确&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>  首先将 定义一个对像 rules 将校验规则存起来</li>\n<li>  将逻辑进行抽离 校验值 与 Dom 无关（因为不用将某项的提示信息放到当前项）</li>\n<li>  推理，使用方式 <code>&#123; formKey:[&#123;verifyName：&#39;isRequired&#39;,verifyVal:&#39;11&#39;,msg:&#39;提示信息&#39;&#125;] &#125;</code>（这里将校验值传递进来，便于处理，不用通过虚拟 dom 获取 ）</li>\n<li>  封装处理方法 获取对象中 key 的数组 每一项的校验名称、值、错误提示 一一比对</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Validate</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br><span class=\"hljs-comment\">// 四个功能函数， 通过外部 调用rules[名称]获取</span><br><span class=\"hljs-title class_\">Validate</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">rules</span> = &#123;<br>    <span class=\"hljs-comment\">// 是否手机号</span><br>    <span class=\"hljs-attr\">isMobile</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> rule = <span class=\"hljs-regexp\">/^1[3,4,5,7,8,9][0-9]\\d&#123;8&#125;$/</span>;<br>        <span class=\"hljs-keyword\">return</span> rule.<span class=\"hljs-title function_\">test</span>(str);<br>    &#125;,<br>    <span class=\"hljs-comment\">// 是否必填</span><br>    <span class=\"hljs-attr\">isRequired</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) &#123;<br>        <span class=\"hljs-comment\">// 除去首尾空格</span><br>        <span class=\"hljs-keyword\">let</span> value = str.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> value !== <span class=\"hljs-string\">&quot;&quot;</span>;<br>    &#125;,<br>    <span class=\"hljs-comment\">// 最小长度</span><br>    <span class=\"hljs-attr\">minLength</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str, length</span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> strLength = str.<span class=\"hljs-property\">length</span>;<br>        <span class=\"hljs-keyword\">return</span> strLength &gt;= length;<br>    &#125;,<br>    <span class=\"hljs-comment\">// 是否相等</span><br>    <span class=\"hljs-attr\">isEqual</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-comment\">// 可以接收多个参数比较</span><br>        <span class=\"hljs-keyword\">let</span> args = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>);<br>        <span class=\"hljs-comment\">// 取首项与后面所有的项比较，如果每个都相等，就返回true</span><br>        <span class=\"hljs-keyword\">let</span> equal = args.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> value === args[<span class=\"hljs-number\">0</span>];<br>        &#125;)<br>        <span class=\"hljs-keyword\">return</span> equal;<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">Validate</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">test</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">rules</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-variable language_\">this</span>;<br>    <span class=\"hljs-keyword\">let</span> valid; <span class=\"hljs-comment\">// 保存校验结果</span><br>    <span class=\"hljs-comment\">// 外部传递的规则配置参数rules</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> rules) &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; rules[key].<span class=\"hljs-property\">length</span>; i++) &#123; <span class=\"hljs-comment\">// 遍历每一个字段的校验规则</span><br>            <span class=\"hljs-keyword\">let</span> ruleName = rules[key][i].<span class=\"hljs-property\">rule</span>; <span class=\"hljs-comment\">// 规则名</span><br>            <span class=\"hljs-keyword\">let</span> value = rules[key][i].<span class=\"hljs-property\">value</span>; <span class=\"hljs-comment\">// 获校验值</span><br>            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(value)) &#123; <span class=\"hljs-comment\">// 统一校验值为数组类型</span><br>                value = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(value)<br>            &#125;<br>            <span class=\"hljs-keyword\">let</span> result = v.<span class=\"hljs-property\">rules</span>[ruleName].<span class=\"hljs-title function_\">apply</span>(v, value); <span class=\"hljs-comment\">// 调用校验规则方法进行校验</span><br>            <span class=\"hljs-keyword\">if</span> (!result) &#123; <span class=\"hljs-comment\">// 如果校验不通过，就获取校验结果信息，并立即跳出循环不再执行，节约消耗</span><br>                valid = &#123;<br>                    <span class=\"hljs-attr\">errValue</span>: key,<br>                    <span class=\"hljs-attr\">errMsg</span>: rules[key][i].<span class=\"hljs-property\">message</span><br>                &#125;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (valid) &#123; <span class=\"hljs-comment\">// 如果有了校验结果，代表存在不通过的字段，则立即停止循环，节约消耗</span><br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> valid; <span class=\"hljs-comment\">// 把校验结果返回出去</span><br>&#125;<br><span class=\"hljs-comment\">// 封装之后 我们只需每次将构造函数实例话 进行这样的穿参</span><br><span class=\"hljs-keyword\">let</span> formData = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;form&#x27;</span>)<br>formData.<span class=\"hljs-property\">onsubmit</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    event.<span class=\"hljs-title function_\">preventDefault</span>()<br>    <span class=\"hljs-keyword\">let</span> validator = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Validate</span>();<br>    <span class=\"hljs-comment\">// 验证规则 抽离出来， 便于更为灵活的应用验证器</span><br>    <span class=\"hljs-comment\">//  验证器已经和DOM解耦，只关心规则和数据以及message</span><br>    <span class=\"hljs-keyword\">let</span> res = validator.<span class=\"hljs-title function_\">test</span>(&#123; <span class=\"hljs-comment\">// 和id一致才能获取</span><br>        <span class=\"hljs-attr\">username</span>: [&#123;<br>            <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">username</span>.<span class=\"hljs-property\">value</span>,<br>            <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;用户名不能为空！&#x27;</span><br>        &#125;],<br>        <span class=\"hljs-attr\">password1</span>: [&#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>,<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;密码不能为空！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;minLength&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-number\">6</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;密码长度不能小于6个字符！&#x27;</span><br>            &#125;<br>        ],<br>        <span class=\"hljs-attr\">password2</span>: [&#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>,<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码不能为空！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;minLength&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-number\">6</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码长度不能小于6个字符！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isEqual&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码与原密码不相同！&#x27;</span><br>            &#125;<br>        ],<br>    &#125;)<br>    <span class=\"hljs-keyword\">if</span> (res) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$tost</span>.<span class=\"hljs-title function_\">error</span>(res)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;校验通过&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"},{"title":"封装一个表单验证（针对）","date":"2022-10-06T14:27:28.000Z","_content":"\n### 解决问题？\n\n由于在工作中，公司 h5 项目 对 vant 的 表单验证 不太理想，业务需要 toast 提示验证，而非表单中的函数验证。所以在验证校验时，使用了大量的 if else 判断。代码臃肿 重复 。这些面向过程的编码行为逻辑又不能进行封装。\n\n```\n            var name = this.username.value;\n            var pwd1 = this.password1.value;\n            var pwd2 = this.password2.value;\n            var tel = this.phone.value;\n            if (name.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('用户名不能为空')\n                return false\n            }\n            if (pwd1.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('密码不能为空')\n                return false\n            }\n             if (pwd2.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('确认密码不能为空')\n                return false\n            }\n            if (pwd2 !== pwd1) {\n                alert('确认密码与原密码不相同！')\n                return false\n            }\n            if (tel.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('手机号码不能为空')\n                return false\n            }\n            if (!/^1[3,4,5,7,8,9][0-9]\\d{8}$/.test(tel)) {\n                alert('手机号码格式不正确')\n                return false\n            }\n\n```\n\n#### 思路\n\n-   首先将 定义一个对像 rules 将校验规则存起来\n-   将逻辑进行抽离 校验值 与 Dom 无关（因为不用将某项的提示信息放到当前项）\n-   推理，使用方式 `{ formKey:[{verifyName：'isRequired',verifyVal:'11',msg:'提示信息'}] }`（这里将校验值传递进来，便于处理，不用通过虚拟 dom 获取 ）\n-   封装处理方法 获取对象中 key 的数组 每一项的校验名称、值、错误提示 一一比对\n\n### 实现\n\n```\n            function Validate() {}\n            // 四个功能函数， 通过外部 调用rules[名称]获取\n            Validate.prototype.rules = {\n                // 是否手机号\n                isMobile: function (str) {\n                    let rule = /^1[3,4,5,7,8,9][0-9]\\d{8}$/;\n                    return rule.test(str);\n                },\n                // 是否必填\n                isRequired: function (str) {\n                    // 除去首尾空格\n                    let value = str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n                    return value !== \"\";\n                },\n                // 最小长度\n                minLength: function (str, length) {\n                    let strLength = str.length;\n                    return strLength >= length;\n                },\n                // 是否相等\n                isEqual: function () {\n                    // 可以接收多个参数比较\n                    let args = Array.prototype.slice.call(arguments);\n                    // 取首项与后面所有的项比较，如果每个都相等，就返回true\n                    let equal = args.every(function (value) {\n                        return value === args[0];\n                    })\n                    return equal;\n                }\n            }\n            Validate.prototype.test = function (rules) {\n                let v = this;\n                let valid; // 保存校验结果\n                // 外部传递的规则配置参数rules\n                for (let key in rules) {\n                    for (let i = 0; i < rules[key].length; i++) { // 遍历每一个字段的校验规则\n                        let ruleName = rules[key][i].rule; // 规则名\n                        let value = rules[key][i].value; // 获校验值\n                        if (!Array.isArray(value)) { // 统一校验值为数组类型\n                            value = new Array(value)\n                        }\n                        let result = v.rules[ruleName].apply(v, value); // 调用校验规则方法进行校验\n                        if (!result) { // 如果校验不通过，就获取校验结果信息，并立即跳出循环不再执行，节约消耗\n                            valid = {\n                                errValue: key,\n                                errMsg: rules[key][i].message\n                            }\n                            break;\n                        }\n                    }\n                    if (valid) { // 如果有了校验结果，代表存在不通过的字段，则立即停止循环，节约消耗\n                        break;\n                    }\n                }\n                return valid; // 把校验结果返回出去\n            }\n            // 封装之后 我们只需每次将构造函数实例话 进行这样的穿参\n            let formData = document.getElementById('form')\n            formData.onsubmit = function () {\n                event.preventDefault()\n                let validator = new Validate();\n                // 验证规则 抽离出来， 便于更为灵活的应用验证器\n                //  验证器已经和DOM解耦，只关心规则和数据以及message\n                let res = validator.test({ // 和id一致才能获取\n                    username: [{\n                        rule: 'isRequired',\n                        value: this.username.value,\n                        message: '用户名不能为空！'\n                    }],\n                    password1: [{\n                            rule: 'isRequired',\n                            value: this.password1.value,\n                            message: '密码不能为空！'\n                        },\n                        {\n                            rule: 'minLength',\n                            value: [this.password1.value, 6],\n                            message: '密码长度不能小于6个字符！'\n                        }\n                    ],\n                    password2: [{\n                            rule: 'isRequired',\n                            value: this.password2.value,\n                            message: '确认密码不能为空！'\n                        },\n                        {\n                            rule: 'minLength',\n                            value: [this.password2.value, 6],\n                            message: '确认密码长度不能小于6个字符！'\n                        },\n                        {\n                            rule: 'isEqual',\n                            value: [this.password2.value, this.password1.value],\n                            message: '确认密码与原密码不相同！'\n                        }\n                    ],\n                })\n                if (res) {\n                    console.log(res)\n                    this.$tost.error(res)\n                } else {\n                    console.log('校验通过')\n                }\n            }\n```\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","source":"_posts/2022-01/12-06表单校验封装.md","raw":"---\ntitle: 封装一个表单验证（针对）\ndate: 2022-10-06 22:27:28\ntags: 原生\ncategory: JavaScript\n---\n\n### 解决问题？\n\n由于在工作中，公司 h5 项目 对 vant 的 表单验证 不太理想，业务需要 toast 提示验证，而非表单中的函数验证。所以在验证校验时，使用了大量的 if else 判断。代码臃肿 重复 。这些面向过程的编码行为逻辑又不能进行封装。\n\n```\n            var name = this.username.value;\n            var pwd1 = this.password1.value;\n            var pwd2 = this.password2.value;\n            var tel = this.phone.value;\n            if (name.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('用户名不能为空')\n                return false\n            }\n            if (pwd1.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('密码不能为空')\n                return false\n            }\n             if (pwd2.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('确认密码不能为空')\n                return false\n            }\n            if (pwd2 !== pwd1) {\n                alert('确认密码与原密码不相同！')\n                return false\n            }\n            if (tel.replace(/(^\\s*)|(\\s*$)/g, \"\") === \"\") {\n                alert('手机号码不能为空')\n                return false\n            }\n            if (!/^1[3,4,5,7,8,9][0-9]\\d{8}$/.test(tel)) {\n                alert('手机号码格式不正确')\n                return false\n            }\n\n```\n\n#### 思路\n\n-   首先将 定义一个对像 rules 将校验规则存起来\n-   将逻辑进行抽离 校验值 与 Dom 无关（因为不用将某项的提示信息放到当前项）\n-   推理，使用方式 `{ formKey:[{verifyName：'isRequired',verifyVal:'11',msg:'提示信息'}] }`（这里将校验值传递进来，便于处理，不用通过虚拟 dom 获取 ）\n-   封装处理方法 获取对象中 key 的数组 每一项的校验名称、值、错误提示 一一比对\n\n### 实现\n\n```\n            function Validate() {}\n            // 四个功能函数， 通过外部 调用rules[名称]获取\n            Validate.prototype.rules = {\n                // 是否手机号\n                isMobile: function (str) {\n                    let rule = /^1[3,4,5,7,8,9][0-9]\\d{8}$/;\n                    return rule.test(str);\n                },\n                // 是否必填\n                isRequired: function (str) {\n                    // 除去首尾空格\n                    let value = str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n                    return value !== \"\";\n                },\n                // 最小长度\n                minLength: function (str, length) {\n                    let strLength = str.length;\n                    return strLength >= length;\n                },\n                // 是否相等\n                isEqual: function () {\n                    // 可以接收多个参数比较\n                    let args = Array.prototype.slice.call(arguments);\n                    // 取首项与后面所有的项比较，如果每个都相等，就返回true\n                    let equal = args.every(function (value) {\n                        return value === args[0];\n                    })\n                    return equal;\n                }\n            }\n            Validate.prototype.test = function (rules) {\n                let v = this;\n                let valid; // 保存校验结果\n                // 外部传递的规则配置参数rules\n                for (let key in rules) {\n                    for (let i = 0; i < rules[key].length; i++) { // 遍历每一个字段的校验规则\n                        let ruleName = rules[key][i].rule; // 规则名\n                        let value = rules[key][i].value; // 获校验值\n                        if (!Array.isArray(value)) { // 统一校验值为数组类型\n                            value = new Array(value)\n                        }\n                        let result = v.rules[ruleName].apply(v, value); // 调用校验规则方法进行校验\n                        if (!result) { // 如果校验不通过，就获取校验结果信息，并立即跳出循环不再执行，节约消耗\n                            valid = {\n                                errValue: key,\n                                errMsg: rules[key][i].message\n                            }\n                            break;\n                        }\n                    }\n                    if (valid) { // 如果有了校验结果，代表存在不通过的字段，则立即停止循环，节约消耗\n                        break;\n                    }\n                }\n                return valid; // 把校验结果返回出去\n            }\n            // 封装之后 我们只需每次将构造函数实例话 进行这样的穿参\n            let formData = document.getElementById('form')\n            formData.onsubmit = function () {\n                event.preventDefault()\n                let validator = new Validate();\n                // 验证规则 抽离出来， 便于更为灵活的应用验证器\n                //  验证器已经和DOM解耦，只关心规则和数据以及message\n                let res = validator.test({ // 和id一致才能获取\n                    username: [{\n                        rule: 'isRequired',\n                        value: this.username.value,\n                        message: '用户名不能为空！'\n                    }],\n                    password1: [{\n                            rule: 'isRequired',\n                            value: this.password1.value,\n                            message: '密码不能为空！'\n                        },\n                        {\n                            rule: 'minLength',\n                            value: [this.password1.value, 6],\n                            message: '密码长度不能小于6个字符！'\n                        }\n                    ],\n                    password2: [{\n                            rule: 'isRequired',\n                            value: this.password2.value,\n                            message: '确认密码不能为空！'\n                        },\n                        {\n                            rule: 'minLength',\n                            value: [this.password2.value, 6],\n                            message: '确认密码长度不能小于6个字符！'\n                        },\n                        {\n                            rule: 'isEqual',\n                            value: [this.password2.value, this.password1.value],\n                            message: '确认密码与原密码不相同！'\n                        }\n                    ],\n                })\n                if (res) {\n                    console.log(res)\n                    this.$tost.error(res)\n                } else {\n                    console.log('校验通过')\n                }\n            }\n```\n\n`![BG图片](/img/default.jpg)`\n![BG图片](/img/1.jpg)\n","slug":"2022-01/12-06表单校验封装","published":1,"updated":"2022-10-13T07:57:14.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl98c211j002ff60cgene8ijj","content":"<h3 id=\"解决问题？\"><a href=\"#解决问题？\" class=\"headerlink\" title=\"解决问题？\"></a>解决问题？</h3><p>由于在工作中，公司 h5 项目 对 vant 的 表单验证 不太理想，业务需要 toast 提示验证，而非表单中的函数验证。所以在验证校验时，使用了大量的 if else 判断。代码臃肿 重复 。这些面向过程的编码行为逻辑又不能进行封装。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> name = this.username.value;<br><span class=\"hljs-keyword\">var</span> pwd1 = this.password1.value;<br><span class=\"hljs-keyword\">var</span> pwd2 = this.password2.value;<br><span class=\"hljs-keyword\">var</span> tel = this.phone.value;<br><span class=\"hljs-keyword\">if</span> (name.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;用户名不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (pwd1.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;密码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br> <span class=\"hljs-keyword\">if</span> (pwd2.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;确认密码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (pwd2 !== pwd1) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;确认密码与原密码不相同！&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (tel.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;手机号码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/^1[3,4,5,7,8,9][0-9]\\d&#123;8&#125;$/</span>.test(tel)) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;手机号码格式不正确&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>  首先将 定义一个对像 rules 将校验规则存起来</li>\n<li>  将逻辑进行抽离 校验值 与 Dom 无关（因为不用将某项的提示信息放到当前项）</li>\n<li>  推理，使用方式 <code>&#123; formKey:[&#123;verifyName：&#39;isRequired&#39;,verifyVal:&#39;11&#39;,msg:&#39;提示信息&#39;&#125;] &#125;</code>（这里将校验值传递进来，便于处理，不用通过虚拟 dom 获取 ）</li>\n<li>  封装处理方法 获取对象中 key 的数组 每一项的校验名称、值、错误提示 一一比对</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Validate</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br><span class=\"hljs-comment\">// 四个功能函数， 通过外部 调用rules[名称]获取</span><br><span class=\"hljs-title class_\">Validate</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">rules</span> = &#123;<br>    <span class=\"hljs-comment\">// 是否手机号</span><br>    <span class=\"hljs-attr\">isMobile</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> rule = <span class=\"hljs-regexp\">/^1[3,4,5,7,8,9][0-9]\\d&#123;8&#125;$/</span>;<br>        <span class=\"hljs-keyword\">return</span> rule.<span class=\"hljs-title function_\">test</span>(str);<br>    &#125;,<br>    <span class=\"hljs-comment\">// 是否必填</span><br>    <span class=\"hljs-attr\">isRequired</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) &#123;<br>        <span class=\"hljs-comment\">// 除去首尾空格</span><br>        <span class=\"hljs-keyword\">let</span> value = str.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> value !== <span class=\"hljs-string\">&quot;&quot;</span>;<br>    &#125;,<br>    <span class=\"hljs-comment\">// 最小长度</span><br>    <span class=\"hljs-attr\">minLength</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str, length</span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> strLength = str.<span class=\"hljs-property\">length</span>;<br>        <span class=\"hljs-keyword\">return</span> strLength &gt;= length;<br>    &#125;,<br>    <span class=\"hljs-comment\">// 是否相等</span><br>    <span class=\"hljs-attr\">isEqual</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-comment\">// 可以接收多个参数比较</span><br>        <span class=\"hljs-keyword\">let</span> args = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>);<br>        <span class=\"hljs-comment\">// 取首项与后面所有的项比较，如果每个都相等，就返回true</span><br>        <span class=\"hljs-keyword\">let</span> equal = args.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> value === args[<span class=\"hljs-number\">0</span>];<br>        &#125;)<br>        <span class=\"hljs-keyword\">return</span> equal;<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">Validate</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">test</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">rules</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-variable language_\">this</span>;<br>    <span class=\"hljs-keyword\">let</span> valid; <span class=\"hljs-comment\">// 保存校验结果</span><br>    <span class=\"hljs-comment\">// 外部传递的规则配置参数rules</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> rules) &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; rules[key].<span class=\"hljs-property\">length</span>; i++) &#123; <span class=\"hljs-comment\">// 遍历每一个字段的校验规则</span><br>            <span class=\"hljs-keyword\">let</span> ruleName = rules[key][i].<span class=\"hljs-property\">rule</span>; <span class=\"hljs-comment\">// 规则名</span><br>            <span class=\"hljs-keyword\">let</span> value = rules[key][i].<span class=\"hljs-property\">value</span>; <span class=\"hljs-comment\">// 获校验值</span><br>            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(value)) &#123; <span class=\"hljs-comment\">// 统一校验值为数组类型</span><br>                value = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(value)<br>            &#125;<br>            <span class=\"hljs-keyword\">let</span> result = v.<span class=\"hljs-property\">rules</span>[ruleName].<span class=\"hljs-title function_\">apply</span>(v, value); <span class=\"hljs-comment\">// 调用校验规则方法进行校验</span><br>            <span class=\"hljs-keyword\">if</span> (!result) &#123; <span class=\"hljs-comment\">// 如果校验不通过，就获取校验结果信息，并立即跳出循环不再执行，节约消耗</span><br>                valid = &#123;<br>                    <span class=\"hljs-attr\">errValue</span>: key,<br>                    <span class=\"hljs-attr\">errMsg</span>: rules[key][i].<span class=\"hljs-property\">message</span><br>                &#125;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (valid) &#123; <span class=\"hljs-comment\">// 如果有了校验结果，代表存在不通过的字段，则立即停止循环，节约消耗</span><br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> valid; <span class=\"hljs-comment\">// 把校验结果返回出去</span><br>&#125;<br><span class=\"hljs-comment\">// 封装之后 我们只需每次将构造函数实例话 进行这样的穿参</span><br><span class=\"hljs-keyword\">let</span> formData = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;form&#x27;</span>)<br>formData.<span class=\"hljs-property\">onsubmit</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    event.<span class=\"hljs-title function_\">preventDefault</span>()<br>    <span class=\"hljs-keyword\">let</span> validator = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Validate</span>();<br>    <span class=\"hljs-comment\">// 验证规则 抽离出来， 便于更为灵活的应用验证器</span><br>    <span class=\"hljs-comment\">//  验证器已经和DOM解耦，只关心规则和数据以及message</span><br>    <span class=\"hljs-keyword\">let</span> res = validator.<span class=\"hljs-title function_\">test</span>(&#123; <span class=\"hljs-comment\">// 和id一致才能获取</span><br>        <span class=\"hljs-attr\">username</span>: [&#123;<br>            <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">username</span>.<span class=\"hljs-property\">value</span>,<br>            <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;用户名不能为空！&#x27;</span><br>        &#125;],<br>        <span class=\"hljs-attr\">password1</span>: [&#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>,<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;密码不能为空！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;minLength&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-number\">6</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;密码长度不能小于6个字符！&#x27;</span><br>            &#125;<br>        ],<br>        <span class=\"hljs-attr\">password2</span>: [&#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>,<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码不能为空！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;minLength&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-number\">6</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码长度不能小于6个字符！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isEqual&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码与原密码不相同！&#x27;</span><br>            &#125;<br>        ],<br>    &#125;)<br>    <span class=\"hljs-keyword\">if</span> (res) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$tost</span>.<span class=\"hljs-title function_\">error</span>(res)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;校验通过&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"解决问题？\"><a href=\"#解决问题？\" class=\"headerlink\" title=\"解决问题？\"></a>解决问题？</h3><p>由于在工作中，公司 h5 项目 对 vant 的 表单验证 不太理想，业务需要 toast 提示验证，而非表单中的函数验证。所以在验证校验时，使用了大量的 if else 判断。代码臃肿 重复 。这些面向过程的编码行为逻辑又不能进行封装。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> name = this.username.value;<br><span class=\"hljs-keyword\">var</span> pwd1 = this.password1.value;<br><span class=\"hljs-keyword\">var</span> pwd2 = this.password2.value;<br><span class=\"hljs-keyword\">var</span> tel = this.phone.value;<br><span class=\"hljs-keyword\">if</span> (name.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;用户名不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (pwd1.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;密码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br> <span class=\"hljs-keyword\">if</span> (pwd2.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;确认密码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (pwd2 !== pwd1) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;确认密码与原密码不相同！&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (tel.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>) === <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;手机号码不能为空&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/^1[3,4,5,7,8,9][0-9]\\d&#123;8&#125;$/</span>.test(tel)) &#123;<br>    alert(<span class=\"hljs-string\">&#x27;手机号码格式不正确&#x27;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>  首先将 定义一个对像 rules 将校验规则存起来</li>\n<li>  将逻辑进行抽离 校验值 与 Dom 无关（因为不用将某项的提示信息放到当前项）</li>\n<li>  推理，使用方式 <code>&#123; formKey:[&#123;verifyName：&#39;isRequired&#39;,verifyVal:&#39;11&#39;,msg:&#39;提示信息&#39;&#125;] &#125;</code>（这里将校验值传递进来，便于处理，不用通过虚拟 dom 获取 ）</li>\n<li>  封装处理方法 获取对象中 key 的数组 每一项的校验名称、值、错误提示 一一比对</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Validate</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br><span class=\"hljs-comment\">// 四个功能函数， 通过外部 调用rules[名称]获取</span><br><span class=\"hljs-title class_\">Validate</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">rules</span> = &#123;<br>    <span class=\"hljs-comment\">// 是否手机号</span><br>    <span class=\"hljs-attr\">isMobile</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> rule = <span class=\"hljs-regexp\">/^1[3,4,5,7,8,9][0-9]\\d&#123;8&#125;$/</span>;<br>        <span class=\"hljs-keyword\">return</span> rule.<span class=\"hljs-title function_\">test</span>(str);<br>    &#125;,<br>    <span class=\"hljs-comment\">// 是否必填</span><br>    <span class=\"hljs-attr\">isRequired</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) &#123;<br>        <span class=\"hljs-comment\">// 除去首尾空格</span><br>        <span class=\"hljs-keyword\">let</span> value = str.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/(^\\s*)|(\\s*$)/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> value !== <span class=\"hljs-string\">&quot;&quot;</span>;<br>    &#125;,<br>    <span class=\"hljs-comment\">// 最小长度</span><br>    <span class=\"hljs-attr\">minLength</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str, length</span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> strLength = str.<span class=\"hljs-property\">length</span>;<br>        <span class=\"hljs-keyword\">return</span> strLength &gt;= length;<br>    &#125;,<br>    <span class=\"hljs-comment\">// 是否相等</span><br>    <span class=\"hljs-attr\">isEqual</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-comment\">// 可以接收多个参数比较</span><br>        <span class=\"hljs-keyword\">let</span> args = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>);<br>        <span class=\"hljs-comment\">// 取首项与后面所有的项比较，如果每个都相等，就返回true</span><br>        <span class=\"hljs-keyword\">let</span> equal = args.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> value === args[<span class=\"hljs-number\">0</span>];<br>        &#125;)<br>        <span class=\"hljs-keyword\">return</span> equal;<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">Validate</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">test</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">rules</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-variable language_\">this</span>;<br>    <span class=\"hljs-keyword\">let</span> valid; <span class=\"hljs-comment\">// 保存校验结果</span><br>    <span class=\"hljs-comment\">// 外部传递的规则配置参数rules</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> rules) &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; rules[key].<span class=\"hljs-property\">length</span>; i++) &#123; <span class=\"hljs-comment\">// 遍历每一个字段的校验规则</span><br>            <span class=\"hljs-keyword\">let</span> ruleName = rules[key][i].<span class=\"hljs-property\">rule</span>; <span class=\"hljs-comment\">// 规则名</span><br>            <span class=\"hljs-keyword\">let</span> value = rules[key][i].<span class=\"hljs-property\">value</span>; <span class=\"hljs-comment\">// 获校验值</span><br>            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(value)) &#123; <span class=\"hljs-comment\">// 统一校验值为数组类型</span><br>                value = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(value)<br>            &#125;<br>            <span class=\"hljs-keyword\">let</span> result = v.<span class=\"hljs-property\">rules</span>[ruleName].<span class=\"hljs-title function_\">apply</span>(v, value); <span class=\"hljs-comment\">// 调用校验规则方法进行校验</span><br>            <span class=\"hljs-keyword\">if</span> (!result) &#123; <span class=\"hljs-comment\">// 如果校验不通过，就获取校验结果信息，并立即跳出循环不再执行，节约消耗</span><br>                valid = &#123;<br>                    <span class=\"hljs-attr\">errValue</span>: key,<br>                    <span class=\"hljs-attr\">errMsg</span>: rules[key][i].<span class=\"hljs-property\">message</span><br>                &#125;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (valid) &#123; <span class=\"hljs-comment\">// 如果有了校验结果，代表存在不通过的字段，则立即停止循环，节约消耗</span><br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> valid; <span class=\"hljs-comment\">// 把校验结果返回出去</span><br>&#125;<br><span class=\"hljs-comment\">// 封装之后 我们只需每次将构造函数实例话 进行这样的穿参</span><br><span class=\"hljs-keyword\">let</span> formData = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;form&#x27;</span>)<br>formData.<span class=\"hljs-property\">onsubmit</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    event.<span class=\"hljs-title function_\">preventDefault</span>()<br>    <span class=\"hljs-keyword\">let</span> validator = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Validate</span>();<br>    <span class=\"hljs-comment\">// 验证规则 抽离出来， 便于更为灵活的应用验证器</span><br>    <span class=\"hljs-comment\">//  验证器已经和DOM解耦，只关心规则和数据以及message</span><br>    <span class=\"hljs-keyword\">let</span> res = validator.<span class=\"hljs-title function_\">test</span>(&#123; <span class=\"hljs-comment\">// 和id一致才能获取</span><br>        <span class=\"hljs-attr\">username</span>: [&#123;<br>            <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">username</span>.<span class=\"hljs-property\">value</span>,<br>            <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;用户名不能为空！&#x27;</span><br>        &#125;],<br>        <span class=\"hljs-attr\">password1</span>: [&#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>,<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;密码不能为空！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;minLength&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-number\">6</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;密码长度不能小于6个字符！&#x27;</span><br>            &#125;<br>        ],<br>        <span class=\"hljs-attr\">password2</span>: [&#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isRequired&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>,<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码不能为空！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;minLength&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-number\">6</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码长度不能小于6个字符！&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-attr\">rule</span>: <span class=\"hljs-string\">&#x27;isEqual&#x27;</span>,<br>                <span class=\"hljs-attr\">value</span>: [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password2</span>.<span class=\"hljs-property\">value</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password1</span>.<span class=\"hljs-property\">value</span>],<br>                <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;确认密码与原密码不相同！&#x27;</span><br>            &#125;<br>        ],<br>    &#125;)<br>    <span class=\"hljs-keyword\">if</span> (res) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$tost</span>.<span class=\"hljs-title function_\">error</span>(res)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;校验通过&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>![BG图片](/img/default.jpg)</code><br><img src=\"/img/1.jpg\" alt=\"BG图片\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl98c210s0008f60ccv23e5fk","category_id":"cl98c210n0004f60cho6zb9n0","_id":"cl98c210x000ff60cakcx7rf8"},{"post_id":"cl98c210h0001f60c8rvm8z5j","category_id":"cl98c210n0004f60cho6zb9n0","_id":"cl98c210z000jf60c7qwr1kbl"},{"post_id":"cl98c210l0003f60c3mzg82zq","category_id":"cl98c210u000af60ca577gnfv","_id":"cl98c2110000nf60ccfwr9oyl"},{"post_id":"cl98c210w000ef60c6o02cado","category_id":"cl98c210n0004f60cho6zb9n0","_id":"cl98c2113000qf60ced8p7ey7"},{"post_id":"cl98c210q0007f60c3x06b58z","category_id":"cl98c210n0004f60cho6zb9n0","_id":"cl98c2114000tf60c7mgf94si"},{"post_id":"cl98c210z000lf60cbyyz9dbp","category_id":"cl98c210n0004f60cho6zb9n0","_id":"cl98c2115000yf60c7v797vln"},{"post_id":"cl98c210v000df60c9cpgf2i3","category_id":"cl98c2110000mf60cbad35a4b","_id":"cl98c21170011f60c2y17dtzm"},{"post_id":"cl98c2115000xf60cg5jnf1f6","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c21190017f60c3h53dkf6"},{"post_id":"cl98c210y000if60c2mww59ep","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211a001af60c1sv87n4m"},{"post_id":"cl98c21160010f60c1suzgjcd","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211b001ef60c44xvhl5u"},{"post_id":"cl98c21170014f60c8dkc4gjo","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211c001gf60casls7cge"},{"post_id":"cl98c2111000pf60ce41640a9","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211c001kf60ccpdta2ql"},{"post_id":"cl98c21180016f60cdry8cnpf","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211d001nf60c11r247qk"},{"post_id":"cl98c21190019f60cbhftdjt1","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211e001rf60cbj354uj3"},{"post_id":"cl98c2113000sf60c4za12lza","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211f001uf60c5kqggubn"},{"post_id":"cl98c211b001df60ce98qeekv","category_id":"cl98c210n0004f60cho6zb9n0","_id":"cl98c211f001yf60c3wkbf4rl"},{"post_id":"cl98c211b001ff60cascugutz","category_id":"cl98c210n0004f60cho6zb9n0","_id":"cl98c211g0021f60chhhrhac4"},{"post_id":"cl98c211c001jf60cal5vcgdg","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211h0025f60c78ck4nlr"},{"post_id":"cl98c211d001mf60c8tfq49gm","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211i0029f60cg5a00l4n"},{"post_id":"cl98c211e001qf60ceiwo569u","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211j002df60c25us754v"},{"post_id":"cl98c211e001tf60cgu9og54p","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211j002gf60cerz0b518"},{"post_id":"cl98c211f001xf60cbwnic6pf","category_id":"cl98c2114000vf60c447g86mb","_id":"cl98c211k002jf60ce3bu2mcz"},{"post_id":"cl98c211g0024f60c4oqnhk4h","category_id":"cl98c210n0004f60cho6zb9n0","_id":"cl98c211k002lf60c0xuy8fn0"},{"post_id":"cl98c211h0028f60c9at154ks","category_id":"cl98c210n0004f60cho6zb9n0","_id":"cl98c211l002of60chpgf9wvd"},{"post_id":"cl98c211i002cf60c6c9ce1ha","category_id":"cl98c210n0004f60cho6zb9n0","_id":"cl98c211l002qf60cfody0mg5"},{"post_id":"cl98c211g0020f60c3eqd13fu","category_id":"cl98c211h0026f60c176e2v1m","_id":"cl98c211m002tf60c859mfgna"},{"post_id":"cl98c211j002ff60cgene8ijj","category_id":"cl98c210n0004f60cho6zb9n0","_id":"cl98c211m002vf60c9a4f9i6v"}],"PostTag":[{"post_id":"cl98c210h0001f60c8rvm8z5j","tag_id":"cl98c210p0005f60cdhal17zp","_id":"cl98c210v000cf60c6epw3tyw"},{"post_id":"cl98c210l0003f60c3mzg82zq","tag_id":"cl98c210u000bf60c4i4f2xk1","_id":"cl98c210z000kf60cda0c85kj"},{"post_id":"cl98c210q0007f60c3x06b58z","tag_id":"cl98c210x000hf60c2lwo5rc7","_id":"cl98c2113000rf60c0e9td8h9"},{"post_id":"cl98c210z000lf60cbyyz9dbp","tag_id":"cl98c210x000hf60c2lwo5rc7","_id":"cl98c2114000uf60caurvd2xq"},{"post_id":"cl98c210s0008f60ccv23e5fk","tag_id":"cl98c210x000hf60c2lwo5rc7","_id":"cl98c2116000zf60cebmjaxac"},{"post_id":"cl98c210t0009f60cg70qfmo4","tag_id":"cl98c2114000wf60chd2s4zar","_id":"cl98c21180015f60chlp373ay"},{"post_id":"cl98c210v000df60c9cpgf2i3","tag_id":"cl98c21170013f60c3un8au7b","_id":"cl98c211b001cf60c7kan5rdf"},{"post_id":"cl98c211b001df60ce98qeekv","tag_id":"cl98c210x000hf60c2lwo5rc7","_id":"cl98c211c001if60c7q1kaxf7"},{"post_id":"cl98c210w000ef60c6o02cado","tag_id":"cl98c210x000hf60c2lwo5rc7","_id":"cl98c211d001lf60c0ypeh4b5"},{"post_id":"cl98c211b001ff60cascugutz","tag_id":"cl98c210x000hf60c2lwo5rc7","_id":"cl98c211e001pf60c19il6u6p"},{"post_id":"cl98c211c001jf60cal5vcgdg","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211e001sf60ccvkc3mb5"},{"post_id":"cl98c210y000if60c2mww59ep","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211f001wf60c4atdce31"},{"post_id":"cl98c211d001mf60c8tfq49gm","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211g001zf60c21t5h90p"},{"post_id":"cl98c211e001qf60ceiwo569u","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211g0023f60cdyd3679x"},{"post_id":"cl98c2111000pf60ce41640a9","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211h0027f60ceadrbakq"},{"post_id":"cl98c211e001tf60cgu9og54p","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211i002bf60cenkqf0vl"},{"post_id":"cl98c211f001xf60cbwnic6pf","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211j002ef60c97535899"},{"post_id":"cl98c2113000sf60c4za12lza","tag_id":"cl98c211f001vf60c16nh5lp9","_id":"cl98c211k002if60cdoxs98wz"},{"post_id":"cl98c211g0020f60c3eqd13fu","tag_id":"cl98c210x000hf60c2lwo5rc7","_id":"cl98c211k002kf60cdtojaboo"},{"post_id":"cl98c211g0024f60c4oqnhk4h","tag_id":"cl98c210x000hf60c2lwo5rc7","_id":"cl98c211l002nf60ceuql18ur"},{"post_id":"cl98c2115000xf60cg5jnf1f6","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211l002pf60c7y9ac0a3"},{"post_id":"cl98c211h0028f60c9at154ks","tag_id":"cl98c210x000hf60c2lwo5rc7","_id":"cl98c211l002sf60c62tx3uog"},{"post_id":"cl98c211i002cf60c6c9ce1ha","tag_id":"cl98c210x000hf60c2lwo5rc7","_id":"cl98c211m002uf60c62bs42j2"},{"post_id":"cl98c21160010f60c1suzgjcd","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211m002wf60c88w80zn3"},{"post_id":"cl98c211j002ff60cgene8ijj","tag_id":"cl98c210x000hf60c2lwo5rc7","_id":"cl98c211m002xf60c46zkan3v"},{"post_id":"cl98c21170014f60c8dkc4gjo","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211n002yf60c4bhahz5c"},{"post_id":"cl98c21180016f60cdry8cnpf","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211o002zf60c4gmy4ruy"},{"post_id":"cl98c21190019f60cbhftdjt1","tag_id":"cl98c211c001hf60c972iejnf","_id":"cl98c211o0030f60cclp404ik"}],"Tag":[{"name":"工具函数","_id":"cl98c210p0005f60cdhal17zp"},{"name":"配置","_id":"cl98c210u000bf60c4i4f2xk1"},{"name":"原生","_id":"cl98c210x000hf60c2lwo5rc7"},{"name":"webSocket","_id":"cl98c2114000wf60chd2s4zar"},{"name":"校验方式","_id":"cl98c21170013f60c3un8au7b"},{"name":"Vue","_id":"cl98c211c001hf60c972iejnf"},{"name":"vue","_id":"cl98c211f001vf60c16nh5lp9"}]}}